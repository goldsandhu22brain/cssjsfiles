// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"mkVv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyPatches = exports.Immer = void 0;
exports.castDraft = K;
exports.castImmutable = $;
exports.createDraft = void 0;
exports.current = R;
exports.default = void 0;
exports.enableAllPlugins = J;
exports.enableES5 = F;
exports.enableMapSet = C;
exports.enablePatches = T;
exports.finishDraft = void 0;
exports.freeze = d;
exports.immerable = void 0;
exports.isDraft = r;
exports.isDraftable = t;
exports.nothing = void 0;
exports.original = e;
exports.setUseProxies = exports.setAutoFreeze = exports.produceWithPatches = exports.produce = void 0;
function n(n) {
  for (var r = arguments.length, t = Array(r > 1 ? r - 1 : 0), e = 1; e < r; e++) t[e - 1] = arguments[e];
  if ("production" !== "production") {
    var i = Y[n],
      o = i ? "function" == typeof i ? i.apply(null, t) : i : "unknown error nr: " + n;
    throw Error("[Immer] " + o);
  }
  throw Error("[Immer] minified error nr: " + n + (t.length ? " " + t.map(function (n) {
    return "'" + n + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n) {
  return !!n && !!n[Q];
}
function t(n) {
  var r;
  return !!n && (function (n) {
    if (!n || "object" != typeof n) return !1;
    var r = Object.getPrototypeOf(n);
    if (null === r) return !0;
    var t = Object.hasOwnProperty.call(r, "constructor") && r.constructor;
    return t === Object || "function" == typeof t && Function.toString.call(t) === Z;
  }(n) || Array.isArray(n) || !!n[L] || !!(null === (r = n.constructor) || void 0 === r ? void 0 : r[L]) || s(n) || v(n));
}
function e(t) {
  return r(t) || n(23, t), t[Q].t;
}
function i(n, r, t) {
  void 0 === t && (t = !1), 0 === o(n) ? (t ? Object.keys : nn)(n).forEach(function (e) {
    t && "symbol" == typeof e || r(e, n[e], n);
  }) : n.forEach(function (t, e) {
    return r(e, t, n);
  });
}
function o(n) {
  var r = n[Q];
  return r ? r.i > 3 ? r.i - 4 : r.i : Array.isArray(n) ? 1 : s(n) ? 2 : v(n) ? 3 : 0;
}
function u(n, r) {
  return 2 === o(n) ? n.has(r) : Object.prototype.hasOwnProperty.call(n, r);
}
function a(n, r) {
  return 2 === o(n) ? n.get(r) : n[r];
}
function f(n, r, t) {
  var e = o(n);
  2 === e ? n.set(r, t) : 3 === e ? n.add(t) : n[r] = t;
}
function c(n, r) {
  return n === r ? 0 !== n || 1 / n == 1 / r : n != n && r != r;
}
function s(n) {
  return X && n instanceof Map;
}
function v(n) {
  return q && n instanceof Set;
}
function p(n) {
  return n.o || n.t;
}
function l(n) {
  if (Array.isArray(n)) return Array.prototype.slice.call(n);
  var r = rn(n);
  delete r[Q];
  for (var t = nn(r), e = 0; e < t.length; e++) {
    var i = t[e],
      o = r[i];
    !1 === o.writable && (o.writable = !0, o.configurable = !0), (o.get || o.set) && (r[i] = {
      configurable: !0,
      writable: !0,
      enumerable: o.enumerable,
      value: n[i]
    });
  }
  return Object.create(Object.getPrototypeOf(n), r);
}
function d(n, e) {
  return void 0 === e && (e = !1), y(n) || r(n) || !t(n) || (o(n) > 1 && (n.set = n.add = n.clear = n.delete = h), Object.freeze(n), e && i(n, function (n, r) {
    return d(r, !0);
  }, !0)), n;
}
function h() {
  n(2);
}
function y(n) {
  return null == n || "object" != typeof n || Object.isFrozen(n);
}
function b(r) {
  var t = tn[r];
  return t || n(18, r), t;
}
function m(n, r) {
  tn[n] || (tn[n] = r);
}
function _() {
  return "production" === "production" || U || n(0), U;
}
function j(n, r) {
  r && (b("Patches"), n.u = [], n.s = [], n.v = r);
}
function g(n) {
  O(n), n.p.forEach(S), n.p = null;
}
function O(n) {
  n === U && (U = n.l);
}
function w(n) {
  return U = {
    p: [],
    l: U,
    h: n,
    m: !0,
    _: 0
  };
}
function S(n) {
  var r = n[Q];
  0 === r.i || 1 === r.i ? r.j() : r.g = !0;
}
function P(r, e) {
  e._ = e.p.length;
  var i = e.p[0],
    o = void 0 !== r && r !== i;
  return e.h.O || b("ES5").S(e, r, o), o ? (i[Q].P && (g(e), n(4)), t(r) && (r = M(e, r), e.l || x(e, r)), e.u && b("Patches").M(i[Q].t, r, e.u, e.s)) : r = M(e, i, []), g(e), e.u && e.v(e.u, e.s), r !== H ? r : void 0;
}
function M(n, r, t) {
  if (y(r)) return r;
  var e = r[Q];
  if (!e) return i(r, function (i, o) {
    return A(n, e, r, i, o, t);
  }, !0), r;
  if (e.A !== n) return r;
  if (!e.P) return x(n, e.t, !0), e.t;
  if (!e.I) {
    e.I = !0, e.A._--;
    var o = 4 === e.i || 5 === e.i ? e.o = l(e.k) : e.o,
      u = o,
      a = !1;
    3 === e.i && (u = new Set(o), o.clear(), a = !0), i(u, function (r, i) {
      return A(n, e, o, r, i, t, a);
    }), x(n, o, !1), t && n.u && b("Patches").N(e, t, n.u, n.s);
  }
  return e.o;
}
function A(e, i, o, a, c, s, v) {
  if ("production" !== "production" && c === o && n(5), r(c)) {
    var p = M(e, c, s && i && 3 !== i.i && !u(i.R, a) ? s.concat(a) : void 0);
    if (f(o, a, p), !r(p)) return;
    e.m = !1;
  } else v && o.add(c);
  if (t(c) && !y(c)) {
    if (!e.h.D && e._ < 1) return;
    M(e, c), i && i.A.l || x(e, c);
  }
}
function x(n, r, t) {
  void 0 === t && (t = !1), !n.l && n.h.D && n.m && d(r, t);
}
function z(n, r) {
  var t = n[Q];
  return (t ? p(t) : n)[r];
}
function I(n, r) {
  if (r in n) for (var t = Object.getPrototypeOf(n); t;) {
    var e = Object.getOwnPropertyDescriptor(t, r);
    if (e) return e;
    t = Object.getPrototypeOf(t);
  }
}
function k(n) {
  n.P || (n.P = !0, n.l && k(n.l));
}
function E(n) {
  n.o || (n.o = l(n.t));
}
function N(n, r, t) {
  var e = s(r) ? b("MapSet").F(r, t) : v(r) ? b("MapSet").T(r, t) : n.O ? function (n, r) {
    var t = Array.isArray(n),
      e = {
        i: t ? 1 : 0,
        A: r ? r.A : _(),
        P: !1,
        I: !1,
        R: {},
        l: r,
        t: n,
        k: null,
        o: null,
        j: null,
        C: !1
      },
      i = e,
      o = en;
    t && (i = [e], o = on);
    var u = Proxy.revocable(i, o),
      a = u.revoke,
      f = u.proxy;
    return e.k = f, e.j = a, f;
  }(r, t) : b("ES5").J(r, t);
  return (t ? t.A : _()).p.push(e), e;
}
function R(e) {
  return r(e) || n(22, e), function n(r) {
    if (!t(r)) return r;
    var e,
      u = r[Q],
      c = o(r);
    if (u) {
      if (!u.P && (u.i < 4 || !b("ES5").K(u))) return u.t;
      u.I = !0, e = D(r, c), u.I = !1;
    } else e = D(r, c);
    return i(e, function (r, t) {
      u && a(u.t, r) === t || f(e, r, n(t));
    }), 3 === c ? new Set(e) : e;
  }(e);
}
function D(n, r) {
  switch (r) {
    case 2:
      return new Map(n);
    case 3:
      return Array.from(n);
  }
  return l(n);
}
function F() {
  function t(n, r) {
    var t = s[n];
    return t ? t.enumerable = r : s[n] = t = {
      configurable: !0,
      enumerable: r,
      get: function () {
        var r = this[Q];
        return "production" !== "production" && f(r), en.get(r, n);
      },
      set: function (r) {
        var t = this[Q];
        "production" !== "production" && f(t), en.set(t, n, r);
      }
    }, t;
  }
  function e(n) {
    for (var r = n.length - 1; r >= 0; r--) {
      var t = n[r][Q];
      if (!t.P) switch (t.i) {
        case 5:
          a(t) && k(t);
          break;
        case 4:
          o(t) && k(t);
      }
    }
  }
  function o(n) {
    for (var r = n.t, t = n.k, e = nn(t), i = e.length - 1; i >= 0; i--) {
      var o = e[i];
      if (o !== Q) {
        var a = r[o];
        if (void 0 === a && !u(r, o)) return !0;
        var f = t[o],
          s = f && f[Q];
        if (s ? s.t !== a : !c(f, a)) return !0;
      }
    }
    var v = !!r[Q];
    return e.length !== nn(r).length + (v ? 0 : 1);
  }
  function a(n) {
    var r = n.k;
    if (r.length !== n.t.length) return !0;
    var t = Object.getOwnPropertyDescriptor(r, r.length - 1);
    if (t && !t.get) return !0;
    for (var e = 0; e < r.length; e++) if (!r.hasOwnProperty(e)) return !0;
    return !1;
  }
  function f(r) {
    r.g && n(3, JSON.stringify(p(r)));
  }
  var s = {};
  m("ES5", {
    J: function (n, r) {
      var e = Array.isArray(n),
        i = function (n, r) {
          if (n) {
            for (var e = Array(r.length), i = 0; i < r.length; i++) Object.defineProperty(e, "" + i, t(i, !0));
            return e;
          }
          var o = rn(r);
          delete o[Q];
          for (var u = nn(o), a = 0; a < u.length; a++) {
            var f = u[a];
            o[f] = t(f, n || !!o[f].enumerable);
          }
          return Object.create(Object.getPrototypeOf(r), o);
        }(e, n),
        o = {
          i: e ? 5 : 4,
          A: r ? r.A : _(),
          P: !1,
          I: !1,
          R: {},
          l: r,
          t: n,
          k: i,
          o: null,
          g: !1,
          C: !1
        };
      return Object.defineProperty(i, Q, {
        value: o,
        writable: !0
      }), i;
    },
    S: function (n, t, o) {
      o ? r(t) && t[Q].A === n && e(n.p) : (n.u && function n(r) {
        if (r && "object" == typeof r) {
          var t = r[Q];
          if (t) {
            var e = t.t,
              o = t.k,
              f = t.R,
              c = t.i;
            if (4 === c) i(o, function (r) {
              r !== Q && (void 0 !== e[r] || u(e, r) ? f[r] || n(o[r]) : (f[r] = !0, k(t)));
            }), i(e, function (n) {
              void 0 !== o[n] || u(o, n) || (f[n] = !1, k(t));
            });else if (5 === c) {
              if (a(t) && (k(t), f.length = !0), o.length < e.length) for (var s = o.length; s < e.length; s++) f[s] = !1;else for (var v = e.length; v < o.length; v++) f[v] = !0;
              for (var p = Math.min(o.length, e.length), l = 0; l < p; l++) o.hasOwnProperty(l) || (f[l] = !0), void 0 === f[l] && n(o[l]);
            }
          }
        }
      }(n.p[0]), e(n.p));
    },
    K: function (n) {
      return 4 === n.i ? o(n) : a(n);
    }
  });
}
function T() {
  function e(n) {
    if (!t(n)) return n;
    if (Array.isArray(n)) return n.map(e);
    if (s(n)) return new Map(Array.from(n.entries()).map(function (n) {
      return [n[0], e(n[1])];
    }));
    if (v(n)) return new Set(Array.from(n).map(e));
    var r = Object.create(Object.getPrototypeOf(n));
    for (var i in n) r[i] = e(n[i]);
    return u(n, L) && (r[L] = n[L]), r;
  }
  function f(n) {
    return r(n) ? e(n) : n;
  }
  var c = "add";
  m("Patches", {
    $: function (r, t) {
      return t.forEach(function (t) {
        for (var i = t.path, u = t.op, f = r, s = 0; s < i.length - 1; s++) {
          var v = o(f),
            p = i[s];
          "string" != typeof p && "number" != typeof p && (p = "" + p), 0 !== v && 1 !== v || "__proto__" !== p && "constructor" !== p || n(24), "function" == typeof f && "prototype" === p && n(24), "object" != typeof (f = a(f, p)) && n(15, i.join("/"));
        }
        var l = o(f),
          d = e(t.value),
          h = i[i.length - 1];
        switch (u) {
          case "replace":
            switch (l) {
              case 2:
                return f.set(h, d);
              case 3:
                n(16);
              default:
                return f[h] = d;
            }
          case c:
            switch (l) {
              case 1:
                return "-" === h ? f.push(d) : f.splice(h, 0, d);
              case 2:
                return f.set(h, d);
              case 3:
                return f.add(d);
              default:
                return f[h] = d;
            }
          case "remove":
            switch (l) {
              case 1:
                return f.splice(h, 1);
              case 2:
                return f.delete(h);
              case 3:
                return f.delete(t.value);
              default:
                return delete f[h];
            }
          default:
            n(17, u);
        }
      }), r;
    },
    N: function (n, r, t, e) {
      switch (n.i) {
        case 0:
        case 4:
        case 2:
          return function (n, r, t, e) {
            var o = n.t,
              s = n.o;
            i(n.R, function (n, i) {
              var v = a(o, n),
                p = a(s, n),
                l = i ? u(o, n) ? "replace" : c : "remove";
              if (v !== p || "replace" !== l) {
                var d = r.concat(n);
                t.push("remove" === l ? {
                  op: l,
                  path: d
                } : {
                  op: l,
                  path: d,
                  value: p
                }), e.push(l === c ? {
                  op: "remove",
                  path: d
                } : "remove" === l ? {
                  op: c,
                  path: d,
                  value: f(v)
                } : {
                  op: "replace",
                  path: d,
                  value: f(v)
                });
              }
            });
          }(n, r, t, e);
        case 5:
        case 1:
          return function (n, r, t, e) {
            var i = n.t,
              o = n.R,
              u = n.o;
            if (u.length < i.length) {
              var a = [u, i];
              i = a[0], u = a[1];
              var s = [e, t];
              t = s[0], e = s[1];
            }
            for (var v = 0; v < i.length; v++) if (o[v] && u[v] !== i[v]) {
              var p = r.concat([v]);
              t.push({
                op: "replace",
                path: p,
                value: f(u[v])
              }), e.push({
                op: "replace",
                path: p,
                value: f(i[v])
              });
            }
            for (var l = i.length; l < u.length; l++) {
              var d = r.concat([l]);
              t.push({
                op: c,
                path: d,
                value: f(u[l])
              });
            }
            i.length < u.length && e.push({
              op: "replace",
              path: r.concat(["length"]),
              value: i.length
            });
          }(n, r, t, e);
        case 3:
          return function (n, r, t, e) {
            var i = n.t,
              o = n.o,
              u = 0;
            i.forEach(function (n) {
              if (!o.has(n)) {
                var i = r.concat([u]);
                t.push({
                  op: "remove",
                  path: i,
                  value: n
                }), e.unshift({
                  op: c,
                  path: i,
                  value: n
                });
              }
              u++;
            }), u = 0, o.forEach(function (n) {
              if (!i.has(n)) {
                var o = r.concat([u]);
                t.push({
                  op: c,
                  path: o,
                  value: n
                }), e.unshift({
                  op: "remove",
                  path: o,
                  value: n
                });
              }
              u++;
            });
          }(n, r, t, e);
      }
    },
    M: function (n, r, t, e) {
      t.push({
        op: "replace",
        path: [],
        value: r === H ? void 0 : r
      }), e.push({
        op: "replace",
        path: [],
        value: n
      });
    }
  });
}
function C() {
  function r(n, r) {
    function t() {
      this.constructor = n;
    }
    a(n, r), n.prototype = (t.prototype = r.prototype, new t());
  }
  function e(n) {
    n.o || (n.R = new Map(), n.o = new Map(n.t));
  }
  function o(n) {
    n.o || (n.o = new Set(), n.t.forEach(function (r) {
      if (t(r)) {
        var e = N(n.A.h, r, n);
        n.p.set(r, e), n.o.add(e);
      } else n.o.add(r);
    }));
  }
  function u(r) {
    r.g && n(3, JSON.stringify(p(r)));
  }
  var a = function (n, r) {
      return (a = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (n, r) {
        n.__proto__ = r;
      } || function (n, r) {
        for (var t in r) r.hasOwnProperty(t) && (n[t] = r[t]);
      })(n, r);
    },
    f = function () {
      function n(n, r) {
        return this[Q] = {
          i: 2,
          l: r,
          A: r ? r.A : _(),
          P: !1,
          I: !1,
          o: void 0,
          R: void 0,
          t: n,
          k: this,
          C: !1,
          g: !1
        }, this;
      }
      r(n, Map);
      var o = n.prototype;
      return Object.defineProperty(o, "size", {
        get: function () {
          return p(this[Q]).size;
        }
      }), o.has = function (n) {
        return p(this[Q]).has(n);
      }, o.set = function (n, r) {
        var t = this[Q];
        return u(t), p(t).has(n) && p(t).get(n) === r || (e(t), k(t), t.R.set(n, !0), t.o.set(n, r), t.R.set(n, !0)), this;
      }, o.delete = function (n) {
        if (!this.has(n)) return !1;
        var r = this[Q];
        return u(r), e(r), k(r), r.t.has(n) ? r.R.set(n, !1) : r.R.delete(n), r.o.delete(n), !0;
      }, o.clear = function () {
        var n = this[Q];
        u(n), p(n).size && (e(n), k(n), n.R = new Map(), i(n.t, function (r) {
          n.R.set(r, !1);
        }), n.o.clear());
      }, o.forEach = function (n, r) {
        var t = this;
        p(this[Q]).forEach(function (e, i) {
          n.call(r, t.get(i), i, t);
        });
      }, o.get = function (n) {
        var r = this[Q];
        u(r);
        var i = p(r).get(n);
        if (r.I || !t(i)) return i;
        if (i !== r.t.get(n)) return i;
        var o = N(r.A.h, i, r);
        return e(r), r.o.set(n, o), o;
      }, o.keys = function () {
        return p(this[Q]).keys();
      }, o.values = function () {
        var n,
          r = this,
          t = this.keys();
        return (n = {})[V] = function () {
          return r.values();
        }, n.next = function () {
          var n = t.next();
          return n.done ? n : {
            done: !1,
            value: r.get(n.value)
          };
        }, n;
      }, o.entries = function () {
        var n,
          r = this,
          t = this.keys();
        return (n = {})[V] = function () {
          return r.entries();
        }, n.next = function () {
          var n = t.next();
          if (n.done) return n;
          var e = r.get(n.value);
          return {
            done: !1,
            value: [n.value, e]
          };
        }, n;
      }, o[V] = function () {
        return this.entries();
      }, n;
    }(),
    c = function () {
      function n(n, r) {
        return this[Q] = {
          i: 3,
          l: r,
          A: r ? r.A : _(),
          P: !1,
          I: !1,
          o: void 0,
          t: n,
          k: this,
          p: new Map(),
          g: !1,
          C: !1
        }, this;
      }
      r(n, Set);
      var t = n.prototype;
      return Object.defineProperty(t, "size", {
        get: function () {
          return p(this[Q]).size;
        }
      }), t.has = function (n) {
        var r = this[Q];
        return u(r), r.o ? !!r.o.has(n) || !(!r.p.has(n) || !r.o.has(r.p.get(n))) : r.t.has(n);
      }, t.add = function (n) {
        var r = this[Q];
        return u(r), this.has(n) || (o(r), k(r), r.o.add(n)), this;
      }, t.delete = function (n) {
        if (!this.has(n)) return !1;
        var r = this[Q];
        return u(r), o(r), k(r), r.o.delete(n) || !!r.p.has(n) && r.o.delete(r.p.get(n));
      }, t.clear = function () {
        var n = this[Q];
        u(n), p(n).size && (o(n), k(n), n.o.clear());
      }, t.values = function () {
        var n = this[Q];
        return u(n), o(n), n.o.values();
      }, t.entries = function () {
        var n = this[Q];
        return u(n), o(n), n.o.entries();
      }, t.keys = function () {
        return this.values();
      }, t[V] = function () {
        return this.values();
      }, t.forEach = function (n, r) {
        for (var t = this.values(), e = t.next(); !e.done;) n.call(r, e.value, e.value, this), e = t.next();
      }, n;
    }();
  m("MapSet", {
    F: function (n, r) {
      return new f(n, r);
    },
    T: function (n, r) {
      return new c(n, r);
    }
  });
}
function J() {
  F(), C(), T();
}
function K(n) {
  return n;
}
function $(n) {
  return n;
}
var G,
  U,
  W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"),
  X = "undefined" != typeof Map,
  q = "undefined" != typeof Set,
  B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect,
  H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = !0, G),
  L = W ? Symbol.for("immer-draftable") : "__$immer_draftable",
  Q = W ? Symbol.for("immer-state") : "__$immer_state",
  V = "undefined" != typeof Symbol && Symbol.iterator || "@@iterator",
  Y = {
    0: "Illegal state",
    1: "Immer drafts cannot have computed properties",
    2: "This object has been frozen and should not be mutated",
    3: function (n) {
      return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n;
    },
    4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    5: "Immer forbids circular references",
    6: "The first or second argument to `produce` must be a function",
    7: "The third argument to `produce` must be a function or undefined",
    8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
    10: "The given draft is already finalized",
    11: "Object.defineProperty() cannot be used on an Immer draft",
    12: "Object.setPrototypeOf() cannot be used on an Immer draft",
    13: "Immer only supports deleting array indices",
    14: "Immer only supports setting array indices and the 'length' property",
    15: function (n) {
      return "Cannot apply patch, path doesn't resolve: " + n;
    },
    16: 'Sets cannot have "replace" patches.',
    17: function (n) {
      return "Unsupported patch operation: " + n;
    },
    18: function (n) {
      return "The plugin for '" + n + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n + "()` when initializing your application.";
    },
    20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
    21: function (n) {
      return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n + "'";
    },
    22: function (n) {
      return "'current' expects a draft, got: " + n;
    },
    23: function (n) {
      return "'original' expects a draft, got: " + n;
    },
    24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
  },
  Z = "" + Object.prototype.constructor,
  nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function (n) {
    return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n));
  } : Object.getOwnPropertyNames,
  rn = Object.getOwnPropertyDescriptors || function (n) {
    var r = {};
    return nn(n).forEach(function (t) {
      r[t] = Object.getOwnPropertyDescriptor(n, t);
    }), r;
  },
  tn = {},
  en = {
    get: function (n, r) {
      if (r === Q) return n;
      var e = p(n);
      if (!u(e, r)) return function (n, r, t) {
        var e,
          i = I(r, t);
        return i ? "value" in i ? i.value : null === (e = i.get) || void 0 === e ? void 0 : e.call(n.k) : void 0;
      }(n, e, r);
      var i = e[r];
      return n.I || !t(i) ? i : i === z(n.t, r) ? (E(n), n.o[r] = N(n.A.h, i, n)) : i;
    },
    has: function (n, r) {
      return r in p(n);
    },
    ownKeys: function (n) {
      return Reflect.ownKeys(p(n));
    },
    set: function (n, r, t) {
      var e = I(p(n), r);
      if (null == e ? void 0 : e.set) return e.set.call(n.k, t), !0;
      if (!n.P) {
        var i = z(p(n), r),
          o = null == i ? void 0 : i[Q];
        if (o && o.t === t) return n.o[r] = t, n.R[r] = !1, !0;
        if (c(t, i) && (void 0 !== t || u(n.t, r))) return !0;
        E(n), k(n);
      }
      return n.o[r] === t && (void 0 !== t || r in n.o) || Number.isNaN(t) && Number.isNaN(n.o[r]) || (n.o[r] = t, n.R[r] = !0), !0;
    },
    deleteProperty: function (n, r) {
      return void 0 !== z(n.t, r) || r in n.t ? (n.R[r] = !1, E(n), k(n)) : delete n.R[r], n.o && delete n.o[r], !0;
    },
    getOwnPropertyDescriptor: function (n, r) {
      var t = p(n),
        e = Reflect.getOwnPropertyDescriptor(t, r);
      return e ? {
        writable: !0,
        configurable: 1 !== n.i || "length" !== r,
        enumerable: e.enumerable,
        value: t[r]
      } : e;
    },
    defineProperty: function () {
      n(11);
    },
    getPrototypeOf: function (n) {
      return Object.getPrototypeOf(n.t);
    },
    setPrototypeOf: function () {
      n(12);
    }
  },
  on = {};
exports.immerable = L;
exports.nothing = H;
i(en, function (n, r) {
  on[n] = function () {
    return arguments[0] = arguments[0][0], r.apply(this, arguments);
  };
}), on.deleteProperty = function (r, t) {
  return "production" !== "production" && isNaN(parseInt(t)) && n(13), on.set.call(this, r, t, void 0);
}, on.set = function (r, t, e) {
  return "production" !== "production" && "length" !== t && isNaN(parseInt(t)) && n(14), en.set.call(this, r[0], t, e, r[0]);
};
var un = function () {
    function e(r) {
      var e = this;
      this.O = B, this.D = !0, this.produce = function (r, i, o) {
        if ("function" == typeof r && "function" != typeof i) {
          var u = i;
          i = r;
          var a = e;
          return function (n) {
            var r = this;
            void 0 === n && (n = u);
            for (var t = arguments.length, e = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) e[o - 1] = arguments[o];
            return a.produce(n, function (n) {
              var t;
              return (t = i).call.apply(t, [r, n].concat(e));
            });
          };
        }
        var f;
        if ("function" != typeof i && n(6), void 0 !== o && "function" != typeof o && n(7), t(r)) {
          var c = w(e),
            s = N(e, r, void 0),
            v = !0;
          try {
            f = i(s), v = !1;
          } finally {
            v ? g(c) : O(c);
          }
          return "undefined" != typeof Promise && f instanceof Promise ? f.then(function (n) {
            return j(c, o), P(n, c);
          }, function (n) {
            throw g(c), n;
          }) : (j(c, o), P(f, c));
        }
        if (!r || "object" != typeof r) {
          if (void 0 === (f = i(r)) && (f = r), f === H && (f = void 0), e.D && d(f, !0), o) {
            var p = [],
              l = [];
            b("Patches").M(r, f, p, l), o(p, l);
          }
          return f;
        }
        n(21, r);
      }, this.produceWithPatches = function (n, r) {
        if ("function" == typeof n) return function (r) {
          for (var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
          return e.produceWithPatches(r, function (r) {
            return n.apply(void 0, [r].concat(i));
          });
        };
        var t,
          i,
          o = e.produce(n, r, function (n, r) {
            t = n, i = r;
          });
        return "undefined" != typeof Promise && o instanceof Promise ? o.then(function (n) {
          return [n, t, i];
        }) : [o, t, i];
      }, "boolean" == typeof (null == r ? void 0 : r.useProxies) && this.setUseProxies(r.useProxies), "boolean" == typeof (null == r ? void 0 : r.autoFreeze) && this.setAutoFreeze(r.autoFreeze);
    }
    var i = e.prototype;
    return i.createDraft = function (e) {
      t(e) || n(8), r(e) && (e = R(e));
      var i = w(this),
        o = N(this, e, void 0);
      return o[Q].C = !0, O(i), o;
    }, i.finishDraft = function (r, t) {
      var e = r && r[Q];
      "production" !== "production" && (e && e.C || n(9), e.I && n(10));
      var i = e.A;
      return j(i, t), P(void 0, i);
    }, i.setAutoFreeze = function (n) {
      this.D = n;
    }, i.setUseProxies = function (r) {
      r && !B && n(20), this.O = r;
    }, i.applyPatches = function (n, t) {
      var e;
      for (e = t.length - 1; e >= 0; e--) {
        var i = t[e];
        if (0 === i.path.length && "replace" === i.op) {
          n = i.value;
          break;
        }
      }
      e > -1 && (t = t.slice(e + 1));
      var o = b("Patches").$;
      return r(n) ? o(n, t) : this.produce(n, function (n) {
        return o(n, t);
      });
    }, e;
  }(),
  an = new un(),
  fn = an.produce,
  cn = an.produceWithPatches.bind(an),
  sn = an.setAutoFreeze.bind(an),
  vn = an.setUseProxies.bind(an),
  pn = an.applyPatches.bind(an),
  ln = an.createDraft.bind(an),
  dn = an.finishDraft.bind(an);
exports.finishDraft = dn;
exports.createDraft = ln;
exports.applyPatches = pn;
exports.setUseProxies = vn;
exports.setAutoFreeze = sn;
exports.produceWithPatches = cn;
exports.produce = fn;
exports.Immer = un;
var _default = fn;
exports.default = _default;
},{}],"J5wV":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);

  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

exports.default = shallow;

},{}],"UWKb":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function create(createState) {
  var state;
  var listeners = new Set();

  var setState = function setState(partial, replace) {
    var nextState = typeof partial === 'function' ? partial(state) : partial;

    if (nextState !== state) {
      var _previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach(function (listener) {
        return listener(state, _previousState);
      });
    }
  };

  var getState = function getState() {
    return state;
  };

  var subscribeWithSelector = function subscribeWithSelector(listener, selector, equalityFn) {
    if (selector === void 0) {
      selector = getState;
    }

    if (equalityFn === void 0) {
      equalityFn = Object.is;
    }

    var currentSlice = selector(state);

    function listenerToAdd() {
      var nextSlice = selector(state);

      if (!equalityFn(currentSlice, nextSlice)) {
        var _previousSlice = currentSlice;
        listener(currentSlice = nextSlice, _previousSlice);
      }
    }

    listeners.add(listenerToAdd);
    return function () {
      return listeners.delete(listenerToAdd);
    };
  };

  var subscribe = function subscribe(listener, selector, equalityFn) {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }

    listeners.add(listener);
    return function () {
      return listeners.delete(listener);
    };
  };

  var destroy = function destroy() {
    return listeners.clear();
  };

  var api = {
    setState: setState,
    getState: getState,
    subscribe: subscribe,
    destroy: destroy
  };
  state = createState(setState, getState, api);
  return api;
}

exports.default = create;

},{}],"RsyN":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactObject = compactObject;
exports.deprecated = deprecated;
exports.detectBrowser = detectBrowser;
exports.disableLog = disableLog;
exports.disableWarnings = disableWarnings;
exports.extractVersion = extractVersion;
exports.filterStats = filterStats;
exports.log = log;
exports.walkStats = walkStats;
exports.wrapPeerConnectionEvent = wrapPeerConnectionEvent;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function (e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
  };
  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
  };
  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function () {
      return this['_on' + eventNameToWrap];
    },
    set: function (cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + _typeof(bool) + '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + _typeof(bool) + '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}
function log() {
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  var result = {
    browser: null,
    version: null
  };

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }
  var {
    navigator: navigator
  } = window;
  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }
  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }
  return Object.keys(data).reduce(function (accumulator, key) {
    var isObj = isObject(data[key]);
    var value = isObj ? compactObject(data[key]) : data[key];
    var isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, _defineProperty({}, key, value));
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function (name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function (id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function (value) {
    if (value.type === 'track' && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function (trackStat) {
    result.forEach(function (stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}
},{}],"RmTL":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetUserMedia = shimGetUserMedia;
var utils = _interopRequireWildcard(require("../utils.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var logging = utils.log;
function shimGetUserMedia(window, browserDetails) {
  var navigator = window && window.navigator;
  if (!navigator.mediaDevices) {
    return;
  }
  var constraintsToChrome_ = function (c) {
    if (_typeof(c) !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function (key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = _typeof(c[key]) === 'object' ? c[key] : {
        ideal: c[key]
      };
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function (prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === 'deviceId' ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function (mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };
  var shimConstraints_ = function (constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && _typeof(constraints.audio) === 'object') {
      var remap = function (obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && _typeof(constraints.video) === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && (_typeof(face) === 'object' ? face : {
        ideal: face
      });
      var getSupportedFacingModeLies = browserDetails.version < 66;
      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices().then(function (devices) {
            devices = devices.filter(function (d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function (d) {
              return matches.some(function (match) {
                return d.label.toLowerCase().includes(match);
              });
            });
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }

            if (dev) {
              constraints.video.deviceId = face.exact ? {
                exact: dev.deviceId
              } : {
                ideal: dev.deviceId
              };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };
  var shimError_ = function (e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function () {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };
  var getUserMedia_ = function (constraints, onSuccess, onError) {
    shimConstraints_(constraints, function (c) {
      navigator.webkitGetUserMedia(c, onSuccess, function (e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (cs) {
      return shimConstraints_(cs, function (c) {
        return origGetUserMedia(c).then(function (stream) {
          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function (track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function (e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }
}
},{"../utils.js":"RsyN"}],"yjjI":[function(require,module,exports) {
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then(function (sourceId) {
      var widthSpecified = constraints.video && constraints.video.width;
      var heightSpecified = constraints.video && constraints.video.height;
      var frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: 'desktop',
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}
},{}],"RNlo":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixNegotiationNeeded = fixNegotiationNeeded;
exports.shimAddTrackRemoveTrack = shimAddTrackRemoveTrack;
exports.shimAddTrackRemoveTrackWithNative = shimAddTrackRemoveTrackWithNative;
Object.defineProperty(exports, "shimGetDisplayMedia", {
  enumerable: true,
  get: function () {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimGetSendersWithDtmf = shimGetSendersWithDtmf;
exports.shimGetStats = shimGetStats;
Object.defineProperty(exports, "shimGetUserMedia", {
  enumerable: true,
  get: function () {
    return _getusermedia.shimGetUserMedia;
  }
});
exports.shimMediaStream = shimMediaStream;
exports.shimOnTrack = shimOnTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.shimSenderReceiverGetStats = shimSenderReceiverGetStats;
var utils = _interopRequireWildcard(require("../utils.js"));
var _getusermedia = require("./getusermedia");
var _getdisplaymedia = require("./getdisplaymedia");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}
function shimOnTrack(window) {
  if (_typeof(window) === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get: function () {
        return this._ontrack;
      },
      set: function (f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var _this = this;
      if (!this._ontrackpoly) {
        this._ontrackpoly = function (e) {
          // onaddstream does not fire when a track is added to an existing
          // stream. But stream.onaddtrack is implemented so we use that.
          e.stream.addEventListener('addtrack', function (te) {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === te.track.id;
              });
            } else {
              receiver = {
                track: te.track
              };
            }
            var event = new Event('track');
            event.track = te.track;
            event.receiver = receiver;
            event.transceiver = {
              receiver: receiver
            };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
          e.stream.getTracks().forEach(function (track) {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === track.id;
              });
            } else {
              receiver = {
                track: track
              };
            }
            var event = new Event('track');
            event.track = track;
            event.receiver = receiver;
            event.transceiver = {
              receiver: receiver
            };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
        };
        this.addEventListener('addstream', this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver', {
          value: {
            receiver: e.receiver
          }
        });
      }
      return e;
    });
  }
}
function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (_typeof(window) === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
    var shimSenderWithDtmf = function (pc, track) {
      return {
        track: track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        var sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };
      var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        var idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this2 = this;
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(function (track) {
        _this2._senders.push(shimSenderWithDtmf(_this2, track));
      });
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this3 = this;
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach(function (track) {
        var sender = _this3._senders.find(function (s) {
          return s.track === track;
        });
        if (sender) {
          // remove sender
          _this3._senders.splice(_this3._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (_typeof(window) === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this4 = this;
      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this4;
      });
      return senders;
    };
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get: function () {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}
function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var _this5 = this;
    var [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }
    var fixChromeStats_ = function (response) {
      var standardReport = {};
      var reports = response.result();
      reports.forEach(function (report) {
        var standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(function (name) {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    };

    // shim getStats with maplike support
    var makeMapStats = function (stats) {
      return new Map(Object.keys(stats).map(function (key) {
        return [key, stats[key]];
      }));
    };
    if (arguments.length >= 2) {
      var successCallbackWrapper_ = function (response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };
      return origGetStats.apply(this, [successCallbackWrapper_, selector]);
    }

    // promise-support
    return new Promise(function (resolve, reject) {
      origGetStats.apply(_this5, [function (response) {
        resolve(makeMapStats(fixChromeStats_(response)));
      }, reject]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var _this6 = this;
        var senders = origGetSenders.apply(this, []);
        senders.forEach(function (sender) {
          return sender._pc = _this6;
        });
        return senders;
      };
    }
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      var sender = this;
      return this._pc.getStats().then(function (result) {
        return (
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          utils.filterStats(result, sender.track, true)
        );
      });
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var _this7 = this;
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(function (receiver) {
          return receiver._pc = _this7;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      var receiver = this;
      return this._pc.getStats().then(function (result) {
        return utils.filterStats(result, receiver.track, false);
      });
    };
  }
  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
      var track = arguments[0];
      var sender;
      var receiver;
      var err;
      this.getSenders().forEach(function (s) {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(function (r) {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this8 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map(function (streamId) {
      return _this8._shimmedLocalStreams[streamId][0];
    });
  };
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    var sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this9 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this9.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    var existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    var newSenders = this.getSenders().filter(function (newSender) {
      return existingSenders.indexOf(newSender) === -1;
    });
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };
  var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this10 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach(function (streamId) {
        var idx = _this10._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          _this10._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (_this10._shimmedLocalStreams[streamId].length === 1) {
          delete _this10._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this11 = this;
    var nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map(function (stream) {
      return _this11._reverseStreams[stream.id];
    });
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this12 = this;
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this12.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      var newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    var _this13 = this;
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    var streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find(function (t) {
      return t === track;
    })) {
      // this is not fully correct but all we can manage without
      // [[associated MediaStreams]] internal slot.
      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
    }
    var alreadyExists = this.getSenders().find(function (s) {
      return s.track === track;
    });
    if (alreadyExists) {
      throw new DOMException('Track already exists.', 'InvalidAccessError');
    }
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    var oldStream = this._streams[stream.id];
    if (oldStream) {
      // this is using odd Chrome behaviour, use with caution:
      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
      // Note: we rely on the high-level addTrack/dtmf shim to
      // create the sender with a dtmf sender.
      oldStream.addTrack(track);

      // Trigger ONN async.
      Promise.resolve().then(function () {
        _this13.dispatchEvent(new Event('negotiationneeded'));
      });
    } else {
      var newStream = new window.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find(function (s) {
      return s.track === track;
    });
  };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function (method) {
    var nativeMethod = window.RTCPeerConnection.prototype[method];
    var methodObj = _defineProperty({}, method, function () {
      var _this14 = this;
      var args = arguments;
      var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [function (description) {
          var desc = replaceInternalStreamId(_this14, description);
          args[0].apply(null, [desc]);
        }, function (err) {
          if (args[1]) {
            args[1].apply(null, err);
          }
        }, arguments[2]]);
      }
      return nativeMethod.apply(this, arguments).then(function (description) {
        return replaceInternalStreamId(_this14, description);
      });
    });
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
    get: function () {
      var description = origLocalDescription.get.apply(this);
      if (description.type === '') {
        return description;
      }
      return replaceInternalStreamId(this, description);
    }
  });
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this15 = this;
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    // We can not yet check for sender instanceof RTCRtpSender
    // since we shim RTPSender. So we check if sender._pc is set.
    if (!sender._pc) {
      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
    }
    var isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
    }

    // Search for the native stream the senders track belongs to.
    this._streams = this._streams || {};
    var stream;
    Object.keys(this._streams).forEach(function (streamid) {
      var hasTrack = _this15._streams[streamid].getTracks().find(function (track) {
        return sender.track === track;
      });
      if (hasTrack) {
        stream = _this15._streams[streamid];
      }
    });
    if (stream) {
      if (stream.getTracks().length === 1) {
        // if this is the last track of the stream, remove the stream. This
        // takes care of any shimmed _senders.
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        // relying on the same odd chrome behaviour as above.
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event('negotiationneeded'));
    }
  };
}
function shimPeerConnection(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function (e) {
    var pc = e.target;
    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}
},{"../utils.js":"RsyN","./getusermedia":"RmTL","./getdisplaymedia":"yjjI"}],"OQLX":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetUserMedia = shimGetUserMedia;
var utils = _interopRequireWildcard(require("../utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimGetUserMedia(window, browserDetails) {
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;
  navigator.getUserMedia = function (constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function (obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };
    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (c) {
      if (_typeof(c) === 'object' && _typeof(c.audio) === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };
    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function () {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }
    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function (c) {
        if (this.kind === 'audio' && _typeof(c) === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}
},{"../utils":"RsyN"}],"Hsc4":[function(require,module,exports) {
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
      err.name = 'NotFoundError';
      // from https://heycam.github.io/webidl/#idl-DOMException-error-names
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = {
        mediaSource: preferredMediaSource
      };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window.navigator.mediaDevices.getUserMedia(constraints);
  };
}
},{}],"vPl0":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimAddTransceiver = shimAddTransceiver;
exports.shimCreateAnswer = shimCreateAnswer;
exports.shimCreateOffer = shimCreateOffer;
Object.defineProperty(exports, "shimGetDisplayMedia", {
  enumerable: true,
  get: function () {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimGetParameters = shimGetParameters;
Object.defineProperty(exports, "shimGetUserMedia", {
  enumerable: true,
  get: function () {
    return _getusermedia.shimGetUserMedia;
  }
});
exports.shimOnTrack = shimOnTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.shimRTCDataChannel = shimRTCDataChannel;
exports.shimReceiverGetStats = shimReceiverGetStats;
exports.shimRemoveStream = shimRemoveStream;
exports.shimSenderGetStats = shimSenderGetStats;
var utils = _interopRequireWildcard(require("../utils"));
var _getusermedia = require("./getusermedia");
var _getdisplaymedia = require("./getdisplaymedia");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimOnTrack(window) {
  if (_typeof(window) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function () {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimPeerConnection(window, browserDetails) {
  if (_typeof(window) !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }

  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }
  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
  var modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };
  var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null]).then(function (stats) {
      if (browserDetails.version < 53 && !onSucc) {
        // Shim only promise getStats with spec-hyphens in type names
        // Leave callback version alone; misc old uses of forEach before Map
        try {
          stats.forEach(function (stat) {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e) {
          if (e.name !== 'TypeError') {
            throw e;
          }
          // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
          stats.forEach(function (stat, i) {
            stats.set(i, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this = this;
      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this;
      });
      return senders;
    };
  }
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      var sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
  };
}
function shimReceiverGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      var _this2 = this;
      var receivers = origGetReceivers.apply(this, []);
      receivers.forEach(function (receiver) {
        return receiver._pc = _this2;
      });
      return receivers;
    };
  }
  utils.wrapPeerConnectionEvent(window, 'track', function (e) {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window) {
  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    var _this3 = this;
    utils.deprecated('removeStream', 'removeTrack');
    this.getSenders().forEach(function (sender) {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        _this3.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}
function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      // WebIDL input coercion and validation
      var sendEncodings = arguments[1] && arguments[1].sendEncodings;
      if (sendEncodings === undefined) {
        sendEncodings = [];
      }
      sendEncodings = _toConsumableArray(sendEncodings);
      var shouldPerformCheck = sendEncodings.length > 0;
      if (shouldPerformCheck) {
        // If sendEncodings params are provided, validate grammar
        sendEncodings.forEach(function (encodingParam) {
          if ('rid' in encodingParam) {
            var ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError('Invalid RID value provided.');
            }
          }
          if ('scaleResolutionDownBy' in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
              throw new RangeError('scale_resolution_down_by must be >= 1.0');
            }
          }
          if ('maxFramerate' in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError('max_framerate must be >= 0.0');
            }
          }
        });
      }
      var transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        // Check if the init options were applied. If not we do this in an
        // asynchronous way and save the promise reference in a global object.
        // This is an ugly hack, but at the same time is way more robust than
        // checking the sender parameters before and after the createOffer
        // Also note that after the createoffer we are not 100% sure that
        // the params were asynchronously applied so we might miss the
        // opportunity to recreate offer.
        var {
          sender: sender
        } = transceiver;
        var params = sender.getParameters();
        if (!('encodings' in params) ||
        // Avoid being fooled by patched getParameters() below.
        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = sendEncodings;
          sender.sendEncodings = sendEncodings;
          this.setParametersPromises.push(sender.setParameters(params).then(function () {
            delete sender.sendEncodings;
          }).catch(function () {
            delete sender.sendEncodings;
          }));
        }
      }
      return transceiver;
    };
  }
}
function shimGetParameters(window) {
  if (!(_typeof(window) === 'object' && window.RTCRtpSender)) {
    return;
  }
  var origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters = function getParameters() {
      var params = origGetParameters.apply(this, arguments);
      if (!('encodings' in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }
      return params;
    };
  }
}
function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    var _arguments = arguments,
      _this4 = this;
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateOffer.apply(_this4, _arguments);
      }).finally(function () {
        _this4.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    var _arguments2 = arguments,
      _this5 = this;
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateAnswer.apply(_this5, _arguments2);
      }).finally(function () {
        _this5.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}
},{"../utils":"RsyN","./getusermedia":"OQLX","./getdisplaymedia":"Hsc4"}],"aXmZ":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimAudioContext = shimAudioContext;
exports.shimCallbacksAPI = shimCallbacksAPI;
exports.shimConstraints = shimConstraints;
exports.shimCreateOfferLegacy = shimCreateOfferLegacy;
exports.shimGetUserMedia = shimGetUserMedia;
exports.shimLocalStreamsAPI = shimLocalStreamsAPI;
exports.shimRTCIceServerUrls = shimRTCIceServerUrls;
exports.shimRemoteStreamsAPI = shimRemoteStreamsAPI;
exports.shimTrackEventTransceiver = shimTrackEventTransceiver;
var utils = _interopRequireWildcard(require("../utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimLocalStreamsAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    var _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this = this;
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
      stream.getVideoTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
      var _this2 = this;
      for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        streams[_key - 1] = arguments[_key];
      }
      if (streams) {
        streams.forEach(function (stream) {
          if (!_this2._localStreams) {
            _this2._localStreams = [stream];
          } else if (!_this2._localStreams.includes(stream)) {
            _this2._localStreams.push(stream);
          }
        });
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this3 = this;
      if (!this._localStreams) {
        this._localStreams = [];
      }
      var index = this._localStreams.indexOf(stream);
      if (index === -1) {
        return;
      }
      this._localStreams.splice(index, 1);
      var tracks = stream.getTracks();
      this.getSenders().forEach(function (sender) {
        if (tracks.includes(sender.track)) {
          _this3.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get: function () {
        return this._onaddstream;
      },
      set: function (f) {
        var _this4 = this;
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!_this4._remoteStreams) {
              _this4._remoteStreams = [];
            }
            if (_this4._remoteStreams.includes(stream)) {
              return;
            }
            _this4._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            _this4.dispatchEvent(event);
          });
        });
      }
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var pc = this;
      if (!this._onaddstreampoly) {
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }
            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}
function shimCallbacksAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  var prototype = window.RTCPeerConnection.prototype;
  var origCreateOffer = prototype.createOffer;
  var origCreateAnswer = prototype.createAnswer;
  var setLocalDescription = prototype.setLocalDescription;
  var setRemoteDescription = prototype.setRemoteDescription;
  var addIceCandidate = prototype.addIceCandidate;
  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  var withCallback = function (description, successCallback, failureCallback) {
    var promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;
  withCallback = function (description, successCallback, failureCallback) {
    var promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;
  withCallback = function (candidate, successCallback, failureCallback) {
    var promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia(window) {
  var navigator = window && window.navigator;
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    var mediaDevices = navigator.mediaDevices;
    var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = function (constraints) {
      return _getUserMedia(shimConstraints(constraints));
    };
  }
  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({}, constraints, {
      video: utils.compactObject(constraints.video)
    });
  }
  return constraints;
}
function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  var OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      var newIceServers = [];
      for (var i = 0; i < pcConfig.iceServers.length; i++) {
        var server = pcConfig.iceServers[i];
        if (server.urls === undefined && server.url) {
          utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get: function () {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}
function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (_typeof(window) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function () {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimCreateOfferLegacy(window) {
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      var audioTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'audio';
      });
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === 'sendrecv') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('sendonly');
          } else {
            audioTransceiver.direction = 'sendonly';
          }
        } else if (audioTransceiver.direction === 'recvonly') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('inactive');
          } else {
            audioTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver('audio', {
          direction: 'recvonly'
        });
      }
      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      var videoTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'video';
      });
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === 'sendrecv') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('sendonly');
          } else {
            videoTransceiver.direction = 'sendonly';
          }
        } else if (videoTransceiver.direction === 'recvonly') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('inactive');
          } else {
            videoTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver('video', {
          direction: 'recvonly'
        });
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window) {
  if (_typeof(window) !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}
},{"../utils":"RsyN"}],"jIWI":[function(require,module,exports) {
/* eslint-env node */
'use strict';

// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substring(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' '),
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri +
      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
      '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substring(7, sp), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  description.profile = mline[2];
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
    .map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(codec => {
    wildcardRtcpFb.forEach(fb=> {
      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
        return existingFeedback.type === fb.type &&
          existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substring(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substring(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (typeof module === 'object') {
  module.exports = SDPUtils;
}

},{}],"WlzA":[function(require,module,exports) {
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeExtmapAllowMixed = removeExtmapAllowMixed;
exports.shimAddIceCandidateNullOrEmpty = shimAddIceCandidateNullOrEmpty;
exports.shimConnectionState = shimConnectionState;
exports.shimMaxMessageSize = shimMaxMessageSize;
exports.shimParameterlessSetLocalDescription = shimParameterlessSetLocalDescription;
exports.shimRTCIceCandidate = shimRTCIceCandidate;
exports.shimRTCIceCandidateRelayProtocol = shimRTCIceCandidateRelayProtocol;
exports.shimSendThrowTypeError = shimSendThrowTypeError;
var _sdp = _interopRequireDefault(require("sdp"));
var utils = _interopRequireWildcard(require("./utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
    return;
  }
  var NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (_typeof(args) === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substring(2);
    }
    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      var nativeCandidate = new NativeRTCIceCandidate(args);
      var parsedCandidate = _sdp.default.parseCandidate(args.candidate);
      for (var key in parsedCandidate) {
        if (!(key in nativeCandidate)) {
          Object.defineProperty(nativeCandidate, key, {
            value: parsedCandidate[key]
          });
        }
      }

      // Override serializer to not serialize the extra attributes.
      nativeCandidate.toJSON = function toJSON() {
        return {
          candidate: nativeCandidate.candidate,
          sdpMid: nativeCandidate.sdpMid,
          sdpMLineIndex: nativeCandidate.sdpMLineIndex,
          usernameFragment: nativeCandidate.usernameFragment
        };
      };
      return nativeCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}
function shimRTCIceCandidateRelayProtocol(window) {
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'relayProtocol' in window.RTCIceCandidate.prototype) {
    return;
  }

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {
    if (e.candidate) {
      var parsedCandidate = _sdp.default.parseCandidate(e.candidate.candidate);
      if (parsedCandidate.type === 'relay') {
        // This is a libwebrtc-specific mapping of local type preference
        // to relayProtocol.
        e.candidate.relayProtocol = {
          0: 'tls',
          1: 'tcp',
          2: 'udp'
        }[parsedCandidate.priority >> 24];
      }
    }
    return e;
  });
}
function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get: function () {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }
  var sctpInDescription = function (description) {
    if (!description || !description.sdp) {
      return false;
    }
    var sections = _sdp.default.splitSections(description.sdp);
    sections.shift();
    return sections.some(function (mediaSection) {
      var mLine = _sdp.default.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };
  var getRemoteFirefoxVersion = function (description) {
    // TODO: Is there a better solution for detecting Firefox?
    var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    var version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };
  var getCanSendMaxMessageSize = function (remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    var canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };
  var getMaxMessageSize = function (description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    var maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }
    var match = _sdp.default.matchPrefix(description.sdp, 'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substring(19), 10);
    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };
  var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    // Chrome decided to not expose .sctp in plan-b mode.
    // As usual, adapter.js has to do an 'ugly worakaround'
    // to cover up the mess.
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
      var {
        sdpSemantics: sdpSemantics
      } = this.getConfiguration();
      if (sdpSemantics === 'plan-b') {
        Object.defineProperty(this, 'sctp', {
          get: function () {
            return typeof this._sctp === 'undefined' ? null : this._sctp;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
    if (sctpInDescription(arguments[0])) {
      // Check if the remote is FF.
      var isFirefox = getRemoteFirefoxVersion(arguments[0]);

      // Get the maximum message size the local peer is capable of sending
      var canSendMMS = getCanSendMaxMessageSize(isFirefox);

      // Get the maximum message size of the remote peer.
      var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

      // Determine final maximum message size
      var maxMessageSize;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }

      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
      // attribute.
      var sctp = {};
      Object.defineProperty(sctp, 'maxMessageSize', {
        get: function () {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }
    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    var origDataChannelSend = dc.send;
    dc.send = function send() {
      var data = arguments[0];
      var length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    var dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  utils.wrapPeerConnectionEvent(window, 'datachannel', function (e) {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}

/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get: function () {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get: function () {
      return this._onconnectionstatechange || null;
    },
    set: function (cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
  ['setLocalDescription', 'setRemoteDescription'].forEach(function (method) {
    var origMethod = proto[method];
    proto[method] = function () {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = function (e) {
          var pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            var newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      var sdp = desc.sdp.split('\n').filter(function (line) {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp: sdp
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    // Firefox 68+ emits and processes {candidate: "", ...}, ignore
    // in older versions.
    // Native support for ignoring exists for Chrome M77+.
    // Safari ignores as well, exact version unknown but works in the same
    // version that also ignores addIceCandidate(null).
    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    var _this = this;
    var desc = arguments[0] || {};
    if (_typeof(desc) !== 'object' || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    }
    // The remaining steps should technically happen when SLD comes off the
    // RTCPeerConnection's operations chain (not ahead of going on it), but
    // this is too difficult to shim. Instead, this shim only covers the
    // common case where the operations chain is empty. This is imperfect, but
    // should cover many cases. Rationale: Even if we can't reduce the glare
    // window to zero on imperfect implementations, there's value in tapping
    // into the perfect negotiation pattern that several browsers support.
    desc = {
      type: desc.type,
      sdp: desc.sdp
    };
    if (!desc.type) {
      switch (this.signalingState) {
        case 'stable':
        case 'have-local-offer':
        case 'have-remote-pranswer':
          desc.type = 'offer';
          break;
        default:
          desc.type = 'answer';
          break;
      }
    }
    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
      return nativeSetLocalDescription.apply(this, [desc]);
    }
    var func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
    return func.apply(this).then(function (d) {
      return nativeSetLocalDescription.apply(_this, [d]);
    });
  };
}
},{"sdp":"jIWI","./utils":"RsyN"}],"elb5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adapterFactory = adapterFactory;
var utils = _interopRequireWildcard(require("./utils"));
var chromeShim = _interopRequireWildcard(require("./chrome/chrome_shim"));
var firefoxShim = _interopRequireWildcard(require("./firefox/firefox_shim"));
var safariShim = _interopRequireWildcard(require("./safari/safari_shim"));
var commonShim = _interopRequireWildcard(require("./common_shim"));
var sdp = _interopRequireWildcard(require("sdp"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

// Browser shims.

// Shimming starts here.
function adapterFactory() {
  var {
    window: window
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    shimChrome: true,
    shimFirefox: true,
    shimSafari: true
  };
  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);
  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp: sdp
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;

      // Must be called before shimPeerConnection.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      chromeShim.shimGetUserMedia(window, browserDetails);
      chromeShim.shimMediaStream(window, browserDetails);
      chromeShim.shimPeerConnection(window, browserDetails);
      chromeShim.shimOnTrack(window, browserDetails);
      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);
      chromeShim.shimGetSendersWithDtmf(window, browserDetails);
      chromeShim.shimGetStats(window, browserDetails);
      chromeShim.shimSenderReceiverGetStats(window, browserDetails);
      chromeShim.fixNegotiationNeeded(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);
      commonShim.shimConnectionState(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      commonShim.removeExtmapAllowMixed(window, browserDetails);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;

      // Must be called before shimPeerConnection.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      firefoxShim.shimGetUserMedia(window, browserDetails);
      firefoxShim.shimPeerConnection(window, browserDetails);
      firefoxShim.shimOnTrack(window, browserDetails);
      firefoxShim.shimRemoveStream(window, browserDetails);
      firefoxShim.shimSenderGetStats(window, browserDetails);
      firefoxShim.shimReceiverGetStats(window, browserDetails);
      firefoxShim.shimRTCDataChannel(window, browserDetails);
      firefoxShim.shimAddTransceiver(window, browserDetails);
      firefoxShim.shimGetParameters(window, browserDetails);
      firefoxShim.shimCreateOffer(window, browserDetails);
      firefoxShim.shimCreateAnswer(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimConnectionState(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;

      // Must be called before shimCallbackAPI.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      safariShim.shimRTCIceServerUrls(window, browserDetails);
      safariShim.shimCreateOfferLegacy(window, browserDetails);
      safariShim.shimCallbacksAPI(window, browserDetails);
      safariShim.shimLocalStreamsAPI(window, browserDetails);
      safariShim.shimRemoteStreamsAPI(window, browserDetails);
      safariShim.shimTrackEventTransceiver(window, browserDetails);
      safariShim.shimGetUserMedia(window, browserDetails);
      safariShim.shimAudioContext(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      commonShim.removeExtmapAllowMixed(window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }
  return adapter;
}
},{"./utils":"RsyN","./chrome/chrome_shim":"RNlo","./firefox/firefox_shim":"vPl0","./safari/safari_shim":"aXmZ","./common_shim":"WlzA","sdp":"jIWI"}],"WzOL":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adapter_factory = require("./adapter_factory.js");
var adapter = (0, _adapter_factory.adapterFactory)({
  window: typeof window === 'undefined' ? undefined : window
});
var _default = adapter;
exports.default = _default;
},{"./adapter_factory.js":"elb5"}],"Godu":[function(require,module,exports) {
var define;
/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.35
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License *//*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
/////////////////////////////////////////////////////////////////////////////////

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '1.0.35',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major',
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded',
        UA_MAX_LENGTH = 350;

    var AMAZON  = 'Amazon',
        APPLE   = 'Apple',
        ASUS    = 'ASUS',
        BLACKBERRY = 'BlackBerry',
        BROWSER = 'Browser',
        CHROME  = 'Chrome',
        EDGE    = 'Edge',
        FIREFOX = 'Firefox',
        GOOGLE  = 'Google',
        HUAWEI  = 'Huawei',
        LG      = 'LG',
        MICROSOFT = 'Microsoft',
        MOTOROLA  = 'Motorola',
        OPERA   = 'Opera',
        SAMSUNG = 'Samsung',
        SHARP   = 'Sharp',
        SONY    = 'Sony',
        VIERA   = 'Viera',
        XIAOMI  = 'Xiaomi',
        ZEBRA   = 'Zebra',
        FACEBOOK    = 'Facebook',
        CHROMIUM_OS = 'Chromium OS',
        MAC_OS  = 'Mac OS';

    ///////////
    // Helper
    //////////

    var extend = function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        enumerize = function (arr) {
            var enums = {};
            for (var i=0; i<arr.length; i++) {
                enums[arr[i].toUpperCase()] = arr[i];
            }
            return enums;
        },
        has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        },
        lowerize = function (str) {
            return str.toLowerCase();
        },
        majorize = function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        },
        trim = function (str, len) {
            if (typeof(str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
    };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    if (!regex[j]) { break; }
                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length === 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length === 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length === 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        strMapper = function (str, map) {

            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
    };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
            '1.0'   : '/8',
            '1.2'   : '/1',
            '1.3'   : '/3',
            '2.0'   : '/412',
            '2.0.2' : '/416',
            '2.0.3' : '/417',
            '2.0.4' : '/419',
            '?'     : '/'
        },
        windowsVersionMap = {
            'ME'        : '4.90',
            'NT 3.11'   : 'NT3.51',
            'NT 4.0'    : 'NT4.0',
            '2000'      : 'NT 5.0',
            'XP'        : ['NT 5.1', 'NT 5.2'],
            'Vista'     : 'NT 6.0',
            '7'         : 'NT 6.1',
            '8'         : 'NT 6.2',
            '8.1'       : 'NT 6.3',
            '10'        : ['NT 6.4', 'NT 10.0'],
            'RT'        : 'ARM'
    };

    //////////////
    // Regex map
    /////////////

    var regexes = {

        browser : [[

            /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
            ], [VERSION, [NAME, 'Chrome']], [
            /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
            ], [VERSION, [NAME, 'Edge']], [

            // Presto based
            /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
            ], [NAME, VERSION], [
            /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
            ], [VERSION, [NAME, OPERA+' Mini']], [
            /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
            ], [VERSION, [NAME, OPERA]], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,               // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,                                  // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(heytap|ovi)browser\/([\d\.]+)/i,                                  // Heytap/Ovi
            /(weibo)__([\d\.]+)/i                                               // Weibo
            ], [NAME, VERSION], [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
            ], [VERSION, [NAME, 'UC'+BROWSER]], [
            /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
            ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
            /micromessenger\/([\w\.]+)/i                                        // WeChat
            ], [VERSION, [NAME, 'WeChat']], [
            /konqueror\/([\w\.]+)/i                                             // Konqueror
            ], [VERSION, [NAME, 'Konqueror']], [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
            ], [VERSION, [NAME, 'IE']], [
            /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
            ], [VERSION, [NAME, 'Yandex']], [
            /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
            /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
            ], [VERSION, [NAME, FIREFOX+' Focus']], [
            /\bopt\/([\w\.]+)/i                                                 // Opera Touch
            ], [VERSION, [NAME, OPERA+' Touch']], [
            /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
            ], [VERSION, [NAME, 'Coc Coc']], [
            /dolfin\/([\w\.]+)/i                                                // Dolphin
            ], [VERSION, [NAME, 'Dolphin']], [
            /coast\/([\w\.]+)/i                                                 // Opera Coast
            ], [VERSION, [NAME, OPERA+' Coast']], [
            /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
            ], [VERSION, [NAME, 'MIUI '+BROWSER]], [
            /fxios\/([-\w\.]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, FIREFOX]], [
            /\bqihu|(qi?ho?o?|360)browser/i                                     // 360
            ], [[NAME, '360 '+BROWSER]], [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
            ], [[NAME, /(.+)/, '$1 '+BROWSER], VERSION], [                      // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [
            /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i            // QQBrowser/Baidu App/2345 Browser
            ], [NAME, VERSION], [
            /(metasr)[\/ ]?([\w\.]+)/i,                                         // SouGouBrowser
            /(lbbrowser)/i,                                                     // LieBao Browser
            /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
            ], [NAME], [

            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
            ], [[NAME, FACEBOOK], VERSION], [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
            /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
            /(chromium|instagram)[\/ ]([-\w\.]+)/i                              // Chromium/Instagram
            ], [NAME, VERSION], [
            /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
            ], [VERSION, [NAME, 'GSA']], [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
            ], [VERSION, [NAME, 'TikTok']], [

            /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
            ], [VERSION, [NAME, CHROME+' Headless']], [

            / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
            ], [[NAME, CHROME+' WebView'], VERSION], [

            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
            ], [VERSION, [NAME, 'Android '+BROWSER]], [

            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
            ], [VERSION, NAME], [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
            ], [NAME, [VERSION, strMapper, oldSafariMap]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
            ], [VERSION, [NAME, FIREFOX+' Reality']], [
            /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,                                             // Links
            /panasonic;(viera)/i                                                // Panasonic Viera
            ], [NAME, VERSION], [
            
            /(cobalt)\/([\w\.]+)/i                                              // Cobalt
            ], [NAME, [VERSION, /master.|lts./, ""]]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
            ], [[ARCHITECTURE, 'ia32']], [

            /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
            ], [[ARCHITECTURE, 'arm64']], [

            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
            ], [[ARCHITECTURE, 'armhf']], [

            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, lowerize]]
        ],

        device : [[

            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////

            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
            /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
            /(macintosh);/i
            ], [MODEL, [VENDOR, APPLE]], [

            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

            // Xiaomi
            /\b(poco[\w ]+)(?: bui|\))/i,                                       // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [

            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

            // Google
            /(pixel c)\b/i                                                      // Google Pixel C
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,                             // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i                                                    // BlackBerry 10
            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

            // HTC
            /(nexus 9)/i                                                        // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [

            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
            /(asus)-?(\w+)/i,                                                   // Asus
            /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
            /(jolla)/i,                                                         // Jolla
            /(oppo) ?([\w ]+) bui/i                                             // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /(kobo)\s(ereader|touch)/i,                                         // Kobo
            /(archos) (gamepad2?)/i,                                            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(surface duo)/i                                                    // Surface Duo
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
            /(u304aa)/i                                                         // AT&T
            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
            /\bsie-(\w*)/i                                                      // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
            /\b(rct\w+) b/i                                                     // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
            /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
            /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
            /\b(tm\d{3}\w+) b/i
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
            /\b(k88) b/i                                                        // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
            /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
            /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
            /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
            /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
            /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
            /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
            /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
            /\b(ph-1) /i                                                        // Essential PH-1
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
            /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
            /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
            /\btu_(1491) b/i                                                    // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
            /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
            /(sprint) (\w+)/i                                                   // Sprint Phones
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

            ///////////////////
            // SMARTTVS
            ///////////////////

            /smart-tv.+(samsung)/i                                              // Samsung
            ], [VENDOR, [TYPE, SMARTTV]], [
            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
            ], [[VENDOR, LG], [TYPE, SMARTTV]], [
            /(apple) ?tv/i                                                      // Apple TV
            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
            /droid.+aft(\w)( bui|\))/i                                          // Fire TV
            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i                                               // Sharp
            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
            /(bravia[\w ]+)( bui|\))/i                                              // Sony
            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
            /(mitv-\w{5}) bui/i                                                 // Xiaomi
            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
            ], [[TYPE, SMARTTV]], [

            ///////////////////
            // CONSOLES
            ///////////////////

            /(ouya)/i,                                                          // Ouya
            /(nintendo) ([wids3utch]+)/i                                        // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
            /droid.+; (shield) bui/i                                            // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
            /(playstation [345portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

            ///////////////////
            // WEARABLES
            ///////////////////

            /((pebble))app/i                                                    // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /droid.+; (wt63?0{2,3})\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [
            /(quest( 2| pro)?)/i                                                // Oculus Quest
            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

            ///////////////////
            // EMBEDDED
            ///////////////////

            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
            ], [VENDOR, [TYPE, EMBEDDED]], [
            /(aeobc)\b/i                                                        // Echo Dot
            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

            ////////////////////
            // MIXED (GENERIC)
            ///////////////////

            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i           // Android Phones from Unidentified Vendors
            ], [MODEL, [TYPE, MOBILE]], [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
            ], [MODEL, [TYPE, TABLET]], [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
            ], [[TYPE, TABLET]], [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
            ], [[TYPE, MOBILE]], [
            /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]
        ],

        engine : [[

            /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, EDGE+'HTML']], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
            /\b(libweb)/i
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows
            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows) nt 6\.2; (arm)/i,                                        // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, strMapper, windowsVersionMap]], [

            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
            /ios;fbsv\/([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
            /\((series40);/i                                                    // Series 40
            ], [NAME, VERSION], [
            /\(bb(10);/i                                                        // BlackBerry 10
            ], [VERSION, [NAME, BLACKBERRY]], [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
            ], [VERSION, [NAME, 'Symbian']], [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ], [VERSION, [NAME, FIREFOX+' OS']], [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
            ], [VERSION, [NAME, 'webOS']], [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
            ], [VERSION, [NAME, 'watchOS']], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, CHROME+'cast']], [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
            ], [[NAME, CHROMIUM_OS], VERSION],[

            // Smart TVs
            /panasonic;(viera)/i,                                               // Panasonic Viera
            /(netrange)mmh/i,                                                   // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,                                                // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i                                                    // Haiku
            ], [NAME, VERSION], [
            /(sunos) ?([\w\.\d]*)/i                                             // Solaris
            ], [[NAME, 'Solaris'], VERSION], [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i                                                // UNIX
            ], [NAME, VERSION]
        ]
    };

    /////////////////
    // Constructor
    ////////////////

    var UAParser = function (ua, extensions) {

        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
        }

        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;
        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

        this.getBrowser = function () {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                _browser[NAME] = 'Brave';
            }
            return _browser;
        };
        this.getCPU = function () {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function () {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                _device[TYPE] = MOBILE;
            }
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = 'iPad';
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function () {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function () {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                _os[NAME] = _uach.platform  
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS);           // backward compatibility
            }
            return _os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return _ua;
        };
        this.setUA = function (ua) {
            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if (typeof module !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (typeof(define) === FUNC_TYPE && define.amd) {
            define(function () {
                return UAParser;
            });
        } else if (typeof window !== UNDEF_TYPE) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);

},{}],"gKk3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}
},{}],"Wq06":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],"p9l8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regex = _interopRequireDefault(require("./regex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}
var _default = validate;
exports.default = _default;
},{"./regex.js":"Wq06"}],"vDjk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _validate = _interopRequireDefault(require("./validate.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
var _default = stringify;
exports.default = _default;
},{"./validate.js":"p9l8"}],"qgnI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _rng = _interopRequireDefault(require("./rng.js"));
var _stringify = _interopRequireDefault(require("./stringify.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;
var _clockseq; // Previous uuid creation time

var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng.default)();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval

  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested

  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || (0, _stringify.default)(b);
}
var _default = v1;
exports.default = _default;
},{"./rng.js":"gKk3","./stringify.js":"vDjk"}],"rtKa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _validate = _interopRequireDefault(require("./validate.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }
  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}
var _default = parse;
exports.default = _default;
},{"./validate.js":"p9l8"}],"Y6ie":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = _default;
var _stringify = _interopRequireDefault(require("./stringify.js"));
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;
function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`

    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)

  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support

  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./stringify.js":"vDjk","./parse.js":"rtKa"}],"bGV3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */

function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }
  return output;
}
/**
 * Calculate output length with padding and bit length
 */

function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */

function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */

function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }
  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */

function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */

function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */

function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var _default = md5;
exports.default = _default;
},{}],"vJdu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _v = _interopRequireDefault(require("./v35.js"));
var _md = _interopRequireDefault(require("./md5.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./v35.js":"Y6ie","./md5.js":"bGV3"}],"K7Zs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _rng = _interopRequireDefault(require("./rng.js"));
var _stringify = _interopRequireDefault(require("./stringify.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return (0, _stringify.default)(rnds);
}
var _default = v4;
exports.default = _default;
},{"./rng.js":"gKk3","./stringify.js":"vDjk"}],"MvYZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}
var _default = sha1;
exports.default = _default;
},{}],"K2oB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _v = _interopRequireDefault(require("./v35.js"));
var _sha = _interopRequireDefault(require("./sha1.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./v35.js":"Y6ie","./sha1.js":"MvYZ"}],"loGb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],"GRom":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _validate = _interopRequireDefault(require("./validate.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var _default = version;
exports.default = _default;
},{"./validate.js":"p9l8"}],"UeUD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
var _v = _interopRequireDefault(require("./v1.js"));
var _v2 = _interopRequireDefault(require("./v3.js"));
var _v3 = _interopRequireDefault(require("./v4.js"));
var _v4 = _interopRequireDefault(require("./v5.js"));
var _nil = _interopRequireDefault(require("./nil.js"));
var _version = _interopRequireDefault(require("./version.js"));
var _validate = _interopRequireDefault(require("./validate.js"));
var _stringify = _interopRequireDefault(require("./stringify.js"));
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./v1.js":"qgnI","./v3.js":"vJdu","./v4.js":"K7Zs","./v5.js":"K2oB","./nil.js":"loGb","./version.js":"GRom","./validate.js":"p9l8","./stringify.js":"vDjk","./parse.js":"rtKa"}],"g5IB":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"x3aR":[function(require,module,exports) {
var process = require("process");
var define;
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
;!function(undefined) {
  var hasOwnProperty= Object.hasOwnProperty;
  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };
  var defaultMaxListeners = 10;
  var nextTickSupported= typeof process=='object' && typeof process.nextTick=='function';
  var symbolsSupported= typeof Symbol==='function';
  var reflectSupported= typeof Reflect === 'object';
  var setImmediateSupported= typeof setImmediate === 'function';
  var _setImmediate= setImmediateSupported ? setImmediate : setTimeout;
  var ownKeys= symbolsSupported? (reflectSupported && typeof Reflect.ownKeys==='function'? Reflect.ownKeys : function(obj){
    var arr= Object.getOwnPropertyNames(obj);
    arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
    return arr;
  }) : Object.keys;

  function init() {
    this._events = {};
    if (this._conf) {
      configure.call(this, this._conf);
    }
  }

  function configure(conf) {
    if (conf) {
      this._conf = conf;

      conf.delimiter && (this.delimiter = conf.delimiter);

      if(conf.maxListeners!==undefined){
          this._maxListeners= conf.maxListeners;
      }

      conf.wildcard && (this.wildcard = conf.wildcard);
      conf.newListener && (this._newListener = conf.newListener);
      conf.removeListener && (this._removeListener = conf.removeListener);
      conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
      conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);

      if (this.wildcard) {
        this.listenerTree = {};
      }
    }
  }

  function logPossibleMemoryLeak(count, eventName) {
    var errorMsg = '(node) warning: possible EventEmitter memory ' +
        'leak detected. ' + count + ' listeners added. ' +
        'Use emitter.setMaxListeners() to increase limit.';

    if(this.verboseMemoryLeak){
      errorMsg += ' Event name: ' + eventName + '.';
    }

    if(typeof process !== 'undefined' && process.emitWarning){
      var e = new Error(errorMsg);
      e.name = 'MaxListenersExceededWarning';
      e.emitter = this;
      e.count = count;
      process.emitWarning(e);
    } else {
      console.error(errorMsg);

      if (console.trace){
        console.trace();
      }
    }
  }

  var toArray = function (a, b, c) {
    var n = arguments.length;
    switch (n) {
      case 0:
        return [];
      case 1:
        return [a];
      case 2:
        return [a, b];
      case 3:
        return [a, b, c];
      default:
        var arr = new Array(n);
        while (n--) {
          arr[n] = arguments[n];
        }
        return arr;
    }
  };

  function toObject(keys, values) {
    var obj = {};
    var key;
    var len = keys.length;
    var valuesCount = values ? values.length : 0;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = i < valuesCount ? values[i] : undefined;
    }
    return obj;
  }

  function TargetObserver(emitter, target, options) {
    this._emitter = emitter;
    this._target = target;
    this._listeners = {};
    this._listenersCount = 0;

    var on, off;

    if (options.on || options.off) {
      on = options.on;
      off = options.off;
    }

    if (target.addEventListener) {
      on = target.addEventListener;
      off = target.removeEventListener;
    } else if (target.addListener) {
      on = target.addListener;
      off = target.removeListener;
    } else if (target.on) {
      on = target.on;
      off = target.off;
    }

    if (!on && !off) {
      throw Error('target does not implement any known event API');
    }

    if (typeof on !== 'function') {
      throw TypeError('on method must be a function');
    }

    if (typeof off !== 'function') {
      throw TypeError('off method must be a function');
    }

    this._on = on;
    this._off = off;

    var _observers= emitter._observers;
    if(_observers){
      _observers.push(this);
    }else{
      emitter._observers= [this];
    }
  }

  Object.assign(TargetObserver.prototype, {
    subscribe: function(event, localEvent, reducer){
      var observer= this;
      var target= this._target;
      var emitter= this._emitter;
      var listeners= this._listeners;
      var handler= function(){
        var args= toArray.apply(null, arguments);
        var eventObj= {
          data: args,
          name: localEvent,
          original: event
        };
        if(reducer){
          var result= reducer.call(target, eventObj);
          if(result!==false){
            emitter.emit.apply(emitter, [eventObj.name].concat(args))
          }
          return;
        }
        emitter.emit.apply(emitter, [localEvent].concat(args));
      };


      if(listeners[event]){
        throw Error('Event \'' + event + '\' is already listening');
      }

      this._listenersCount++;

      if(emitter._newListener && emitter._removeListener && !observer._onNewListener){

        this._onNewListener = function (_event) {
          if (_event === localEvent && listeners[event] === null) {
            listeners[event] = handler;
            observer._on.call(target, event, handler);
          }
        };

        emitter.on('newListener', this._onNewListener);

        this._onRemoveListener= function(_event){
          if(_event === localEvent && !emitter.hasListeners(_event) && listeners[event]){
            listeners[event]= null;
            observer._off.call(target, event, handler);
          }
        };

        listeners[event]= null;

        emitter.on('removeListener', this._onRemoveListener);
      }else{
        listeners[event]= handler;
        observer._on.call(target, event, handler);
      }
    },

    unsubscribe: function(event){
      var observer= this;
      var listeners= this._listeners;
      var emitter= this._emitter;
      var handler;
      var events;
      var off= this._off;
      var target= this._target;
      var i;

      if(event && typeof event!=='string'){
        throw TypeError('event must be a string');
      }

      function clearRefs(){
        if(observer._onNewListener){
          emitter.off('newListener', observer._onNewListener);
          emitter.off('removeListener', observer._onRemoveListener);
          observer._onNewListener= null;
          observer._onRemoveListener= null;
        }
        var index= findTargetIndex.call(emitter, observer);
        emitter._observers.splice(index, 1);
      }

      if(event){
        handler= listeners[event];
        if(!handler) return;
        off.call(target, event, handler);
        delete listeners[event];
        if(!--this._listenersCount){
          clearRefs();
        }
      }else{
        events= ownKeys(listeners);
        i= events.length;
        while(i-->0){
          event= events[i];
          off.call(target, event, listeners[event]);
        }
        this._listeners= {};
        this._listenersCount= 0;
        clearRefs();
      }
    }
  });

  function resolveOptions(options, schema, reducers, allowUnknown) {
    var computedOptions = Object.assign({}, schema);

    if (!options) return computedOptions;

    if (typeof options !== 'object') {
      throw TypeError('options must be an object')
    }

    var keys = Object.keys(options);
    var length = keys.length;
    var option, value;
    var reducer;

    function reject(reason) {
      throw Error('Invalid "' + option + '" option value' + (reason ? '. Reason: ' + reason : ''))
    }

    for (var i = 0; i < length; i++) {
      option = keys[i];
      if (!allowUnknown && !hasOwnProperty.call(schema, option)) {
        throw Error('Unknown "' + option + '" option');
      }
      value = options[option];
      if (value !== undefined) {
        reducer = reducers[option];
        computedOptions[option] = reducer ? reducer(value, reject) : value;
      }
    }
    return computedOptions;
  }

  function constructorReducer(value, reject) {
    if (typeof value !== 'function' || !value.hasOwnProperty('prototype')) {
      reject('value must be a constructor');
    }
    return value;
  }

  function makeTypeReducer(types) {
    var message= 'value must be type of ' + types.join('|');
    var len= types.length;
    var firstType= types[0];
    var secondType= types[1];

    if (len === 1) {
      return function (v, reject) {
        if (typeof v === firstType) {
          return v;
        }
        reject(message);
      }
    }

    if (len === 2) {
      return function (v, reject) {
        var kind= typeof v;
        if (kind === firstType || kind === secondType) return v;
        reject(message);
      }
    }

    return function (v, reject) {
      var kind = typeof v;
      var i = len;
      while (i-- > 0) {
        if (kind === types[i]) return v;
      }
      reject(message);
    }
  }

  var functionReducer= makeTypeReducer(['function']);

  var objectFunctionReducer= makeTypeReducer(['object', 'function']);

  function makeCancelablePromise(Promise, executor, options) {
    var isCancelable;
    var callbacks;
    var timer= 0;
    var subscriptionClosed;

    var promise = new Promise(function (resolve, reject, onCancel) {
      options= resolveOptions(options, {
        timeout: 0,
        overload: false
      }, {
        timeout: function(value, reject){
          value*= 1;
          if (typeof value !== 'number' || value < 0 || !Number.isFinite(value)) {
            reject('timeout must be a positive number');
          }
          return value;
        }
      });

      isCancelable = !options.overload && typeof Promise.prototype.cancel === 'function' && typeof onCancel === 'function';

      function cleanup() {
        if (callbacks) {
          callbacks = null;
        }
        if (timer) {
          clearTimeout(timer);
          timer = 0;
        }
      }

      var _resolve= function(value){
        cleanup();
        resolve(value);
      };

      var _reject= function(err){
        cleanup();
        reject(err);
      };

      if (isCancelable) {
        executor(_resolve, _reject, onCancel);
      } else {
        callbacks = [function(reason){
          _reject(reason || Error('canceled'));
        }];
        executor(_resolve, _reject, function (cb) {
          if (subscriptionClosed) {
            throw Error('Unable to subscribe on cancel event asynchronously')
          }
          if (typeof cb !== 'function') {
            throw TypeError('onCancel callback must be a function');
          }
          callbacks.push(cb);
        });
        subscriptionClosed= true;
      }

      if (options.timeout > 0) {
        timer= setTimeout(function(){
          var reason= Error('timeout');
          reason.code = 'ETIMEDOUT'
          timer= 0;
          promise.cancel(reason);
          reject(reason);
        }, options.timeout);
      }
    });

    if (!isCancelable) {
      promise.cancel = function (reason) {
        if (!callbacks) {
          return;
        }
        var length = callbacks.length;
        for (var i = 1; i < length; i++) {
          callbacks[i](reason);
        }
        // internal callback to reject the promise
        callbacks[0](reason);
        callbacks = null;
      };
    }

    return promise;
  }

  function findTargetIndex(observer) {
    var observers = this._observers;
    if(!observers){
      return -1;
    }
    var len = observers.length;
    for (var i = 0; i < len; i++) {
      if (observers[i]._target === observer) return i;
    }
    return -1;
  }

  // Attention, function return type now is array, always !
  // It has zero elements if no any matches found and one or more
  // elements (leafs) if there are matches
  //
  function searchListenerTree(handlers, type, tree, i, typeLength) {
    if (!tree) {
      return null;
    }

    if (i === 0) {
      var kind = typeof type;
      if (kind === 'string') {
        var ns, n, l = 0, j = 0, delimiter = this.delimiter, dl = delimiter.length;
        if ((n = type.indexOf(delimiter)) !== -1) {
          ns = new Array(5);
          do {
            ns[l++] = type.slice(j, n);
            j = n + dl;
          } while ((n = type.indexOf(delimiter, j)) !== -1);

          ns[l++] = type.slice(j);
          type = ns;
          typeLength = l;
        } else {
          type = [type];
          typeLength = 1;
        }
      } else if (kind === 'object') {
        typeLength = type.length;
      } else {
        type = [type];
        typeLength = 1;
      }
    }

    var listeners= null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i],
        nextType = type[i + 1], branches, _listeners;

    if (i === typeLength) {
      //
      // If at the end of the event(s) list and the tree has listeners
      // invoke those listeners.
      //

      if(tree._listeners) {
        if (typeof tree._listeners === 'function') {
          handlers && handlers.push(tree._listeners);
          listeners = [tree];
        } else {
          handlers && handlers.push.apply(handlers, tree._listeners);
          listeners = [tree];
        }
      }
    } else {

      if (currentType === '*') {
        //
        // If the event emitted is '*' at this part
        // or there is a concrete match at this patch
        //
        branches = ownKeys(tree);
        n = branches.length;
        while (n-- > 0) {
          branch = branches[n];
          if (branch !== '_listeners') {
            _listeners = searchListenerTree(handlers, type, tree[branch], i + 1, typeLength);
            if (_listeners) {
              if (listeners) {
                listeners.push.apply(listeners, _listeners);
              } else {
                listeners = _listeners;
              }
            }
          }
        }
        return listeners;
      } else if (currentType === '**') {
        endReached = (i + 1 === typeLength || (i + 2 === typeLength && nextType === '*'));
        if (endReached && tree._listeners) {
          // The next element has a _listeners, add it to the handlers.
          listeners = searchListenerTree(handlers, type, tree, typeLength, typeLength);
        }

        branches = ownKeys(tree);
        n = branches.length;
        while (n-- > 0) {
          branch = branches[n];
          if (branch !== '_listeners') {
            if (branch === '*' || branch === '**') {
              if (tree[branch]._listeners && !endReached) {
                _listeners = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);
                if (_listeners) {
                  if (listeners) {
                    listeners.push.apply(listeners, _listeners);
                  } else {
                    listeners = _listeners;
                  }
                }
              }
              _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);
            } else if (branch === nextType) {
              _listeners = searchListenerTree(handlers, type, tree[branch], i + 2, typeLength);
            } else {
              // No match on this one, shift into the tree but not in the type array.
              _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);
            }
            if (_listeners) {
              if (listeners) {
                listeners.push.apply(listeners, _listeners);
              } else {
                listeners = _listeners;
              }
            }
          }
        }
        return listeners;
      } else if (tree[currentType]) {
        listeners = searchListenerTree(handlers, type, tree[currentType], i + 1, typeLength);
      }
    }

      xTree = tree['*'];
    if (xTree) {
      //
      // If the listener tree will allow any match for this part,
      // then recursively explore all branches of the tree
      //
      searchListenerTree(handlers, type, xTree, i + 1, typeLength);
    }

    xxTree = tree['**'];
    if (xxTree) {
      if (i < typeLength) {
        if (xxTree._listeners) {
          // If we have a listener on a '**', it will catch all, so add its handler.
          searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
        }

        // Build arrays of matching next branches and others.
        branches= ownKeys(xxTree);
        n= branches.length;
        while(n-->0){
          branch= branches[n];
          if (branch !== '_listeners') {
            if (branch === nextType) {
              // We know the next element will match, so jump twice.
              searchListenerTree(handlers, type, xxTree[branch], i + 2, typeLength);
            } else if (branch === currentType) {
              // Current node matches, move into the tree.
              searchListenerTree(handlers, type, xxTree[branch], i + 1, typeLength);
            } else {
              isolatedBranch = {};
              isolatedBranch[branch] = xxTree[branch];
              searchListenerTree(handlers, type, {'**': isolatedBranch}, i + 1, typeLength);
            }
          }
        }
      } else if (xxTree._listeners) {
        // We have reached the end and still on a '**'
        searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
      } else if (xxTree['*'] && xxTree['*']._listeners) {
        searchListenerTree(handlers, type, xxTree['*'], typeLength, typeLength);
      }
    }

    return listeners;
  }

  function growListenerTree(type, listener, prepend) {
    var len = 0, j = 0, i, delimiter = this.delimiter, dl= delimiter.length, ns;

    if(typeof type==='string') {
      if ((i = type.indexOf(delimiter)) !== -1) {
        ns = new Array(5);
        do {
          ns[len++] = type.slice(j, i);
          j = i + dl;
        } while ((i = type.indexOf(delimiter, j)) !== -1);

        ns[len++] = type.slice(j);
      }else{
        ns= [type];
        len= 1;
      }
    }else{
      ns= type;
      len= type.length;
    }

    //
    // Looks for two consecutive '**', if so, don't add the event at all.
    //
    if (len > 1) {
      for (i = 0; i + 1 < len; i++) {
        if (ns[i] === '**' && ns[i + 1] === '**') {
          return;
        }
      }
    }



    var tree = this.listenerTree, name;

    for (i = 0; i < len; i++) {
      name = ns[i];

      tree = tree[name] || (tree[name] = {});

      if (i === len - 1) {
        if (!tree._listeners) {
          tree._listeners = listener;
        } else {
          if (typeof tree._listeners === 'function') {
            tree._listeners = [tree._listeners];
          }

          if (prepend) {
            tree._listeners.unshift(listener);
          } else {
            tree._listeners.push(listener);
          }

          if (
              !tree._listeners.warned &&
              this._maxListeners > 0 &&
              tree._listeners.length > this._maxListeners
          ) {
            tree._listeners.warned = true;
            logPossibleMemoryLeak.call(this, tree._listeners.length, name);
          }
        }
        return true;
      }
    }

    return true;
  }

  function collectTreeEvents(tree, events, root, asArray){
     var branches= ownKeys(tree);
     var i= branches.length;
     var branch, branchName, path;
     var hasListeners= tree['_listeners'];
     var isArrayPath;

     while(i-->0){
         branchName= branches[i];

         branch= tree[branchName];

         if(branchName==='_listeners'){
             path= root;
         }else {
             path = root ? root.concat(branchName) : [branchName];
         }

         isArrayPath= asArray || typeof branchName==='symbol';

         hasListeners && events.push(isArrayPath? path : path.join(this.delimiter));

         if(typeof branch==='object'){
             collectTreeEvents.call(this, branch, events, path, isArrayPath);
         }
     }

     return events;
  }

  function recursivelyGarbageCollect(root) {
    var keys = ownKeys(root);
    var i= keys.length;
    var obj, key, flag;
    while(i-->0){
      key = keys[i];
      obj = root[key];

      if(obj){
          flag= true;
          if(key !== '_listeners' && !recursivelyGarbageCollect(obj)){
             delete root[key];
          }
      }
    }

    return flag;
  }

  function Listener(emitter, event, listener){
    this.emitter= emitter;
    this.event= event;
    this.listener= listener;
  }

  Listener.prototype.off= function(){
    this.emitter.off(this.event, this.listener);
    return this;
  };

  function setupListener(event, listener, options){
      if (options === true) {
        promisify = true;
      } else if (options === false) {
        async = true;
      } else {
        if (!options || typeof options !== 'object') {
          throw TypeError('options should be an object or true');
        }
        var async = options.async;
        var promisify = options.promisify;
        var nextTick = options.nextTick;
        var objectify = options.objectify;
      }

      if (async || nextTick || promisify) {
        var _listener = listener;
        var _origin = listener._origin || listener;

        if (nextTick && !nextTickSupported) {
          throw Error('process.nextTick is not supported');
        }

        if (promisify === undefined) {
          promisify = listener.constructor.name === 'AsyncFunction';
        }

        listener = function () {
          var args = arguments;
          var context = this;
          var event = this.event;

          return promisify ? (nextTick ? Promise.resolve() : new Promise(function (resolve) {
            _setImmediate(resolve);
          }).then(function () {
            context.event = event;
            return _listener.apply(context, args)
          })) : (nextTick ? process.nextTick : _setImmediate)(function () {
            context.event = event;
            _listener.apply(context, args)
          });
        };

        listener._async = true;
        listener._origin = _origin;
      }

    return [listener, objectify? new Listener(this, event, listener): this];
  }

  function EventEmitter(conf) {
    this._events = {};
    this._newListener = false;
    this._removeListener = false;
    this.verboseMemoryLeak = false;
    configure.call(this, conf);
  }

  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property

  EventEmitter.prototype.listenTo= function(target, events, options){
    if(typeof target!=='object'){
      throw TypeError('target musts be an object');
    }

    var emitter= this;

    options = resolveOptions(options, {
      on: undefined,
      off: undefined,
      reducers: undefined
    }, {
      on: functionReducer,
      off: functionReducer,
      reducers: objectFunctionReducer
    });

    function listen(events){
      if(typeof events!=='object'){
        throw TypeError('events must be an object');
      }

      var reducers= options.reducers;
      var index= findTargetIndex.call(emitter, target);
      var observer;

      if(index===-1){
        observer= new TargetObserver(emitter, target, options);
      }else{
        observer= emitter._observers[index];
      }

      var keys= ownKeys(events);
      var len= keys.length;
      var event;
      var isSingleReducer= typeof reducers==='function';

      for(var i=0; i<len; i++){
        event= keys[i];
        observer.subscribe(
            event,
            events[event] || event,
            isSingleReducer ? reducers : reducers && reducers[event]
        );
      }
    }

    isArray(events)?
        listen(toObject(events)) :
        (typeof events==='string'? listen(toObject(events.split(/\s+/))): listen(events));

    return this;
  };

  EventEmitter.prototype.stopListeningTo = function (target, event) {
    var observers = this._observers;

    if(!observers){
      return false;
    }

    var i = observers.length;
    var observer;
    var matched= false;

    if(target && typeof target!=='object'){
      throw TypeError('target should be an object');
    }

    while (i-- > 0) {
      observer = observers[i];
      if (!target || observer._target === target) {
        observer.unsubscribe(event);
        matched= true;
      }
    }

    return matched;
  };

  // By default EventEmitters will print a warning if more than
  // 10 listeners are added to it. This is a useful default which
  // helps finding memory leaks.
  //
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.

  EventEmitter.prototype.delimiter = '.';

  EventEmitter.prototype.setMaxListeners = function(n) {
    if (n !== undefined) {
      this._maxListeners = n;
      if (!this._conf) this._conf = {};
      this._conf.maxListeners = n;
    }
  };

  EventEmitter.prototype.getMaxListeners = function() {
    return this._maxListeners;
  };

  EventEmitter.prototype.event = '';

  EventEmitter.prototype.once = function(event, fn, options) {
    return this._once(event, fn, false, options);
  };

  EventEmitter.prototype.prependOnceListener = function(event, fn, options) {
    return this._once(event, fn, true, options);
  };

  EventEmitter.prototype._once = function(event, fn, prepend, options) {
    return this._many(event, 1, fn, prepend, options);
  };

  EventEmitter.prototype.many = function(event, ttl, fn, options) {
    return this._many(event, ttl, fn, false, options);
  };

  EventEmitter.prototype.prependMany = function(event, ttl, fn, options) {
    return this._many(event, ttl, fn, true, options);
  };

  EventEmitter.prototype._many = function(event, ttl, fn, prepend, options) {
    var self = this;

    if (typeof fn !== 'function') {
      throw new Error('many only accepts instances of Function');
    }

    function listener() {
      if (--ttl === 0) {
        self.off(event, listener);
      }
      return fn.apply(this, arguments);
    }

    listener._origin = fn;

    return this._on(event, listener, prepend, options);
  };

  EventEmitter.prototype.emit = function() {
    if (!this._events && !this._all) {
      return false;
    }

    this._events || init.call(this);

    var type = arguments[0], ns, wildcard= this.wildcard;
    var args,l,i,j, containsSymbol;

    if (type === 'newListener' && !this._newListener) {
      if (!this._events.newListener) {
        return false;
      }
    }

    if (wildcard) {
      ns= type;
      if(type!=='newListener' && type!=='removeListener'){
        if (typeof type === 'object') {
          l = type.length;
          if (symbolsSupported) {
            for (i = 0; i < l; i++) {
              if (typeof type[i] === 'symbol') {
                containsSymbol = true;
                break;
              }
            }
          }
          if (!containsSymbol) {
            type = type.join(this.delimiter);
          }
        }
      }
    }

    var al = arguments.length;
    var handler;

    if (this._all && this._all.length) {
      handler = this._all.slice();

      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this, type);
          break;
        case 2:
          handler[i].call(this, type, arguments[1]);
          break;
        case 3:
          handler[i].call(this, type, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, arguments);
        }
      }
    }

    if (wildcard) {
      handler = [];
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0, l);
    } else {
      handler = this._events[type];
      if (typeof handler === 'function') {
        this.event = type;
        switch (al) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
          handler.apply(this, args);
        }
        return true;
      } else if (handler) {
        // need to make copy of handlers because list can change in the middle
        // of emit call
        handler = handler.slice();
      }
    }

    if (handler && handler.length) {
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this);
          break;
        case 2:
          handler[i].call(this, arguments[1]);
          break;
        case 3:
          handler[i].call(this, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, args);
        }
      }
      return true;
    } else if (!this.ignoreErrors && !this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
    }

    return !!this._all;
  };

  EventEmitter.prototype.emitAsync = function() {
    if (!this._events && !this._all) {
      return false;
    }

    this._events || init.call(this);

    var type = arguments[0], wildcard= this.wildcard, ns, containsSymbol;
    var args,l,i,j;

    if (type === 'newListener' && !this._newListener) {
        if (!this._events.newListener) { return Promise.resolve([false]); }
    }

    if (wildcard) {
      ns= type;
      if(type!=='newListener' && type!=='removeListener'){
        if (typeof type === 'object') {
          l = type.length;
          if (symbolsSupported) {
            for (i = 0; i < l; i++) {
              if (typeof type[i] === 'symbol') {
                containsSymbol = true;
                break;
              }
            }
          }
          if (!containsSymbol) {
            type = type.join(this.delimiter);
          }
        }
      }
    }

    var promises= [];

    var al = arguments.length;
    var handler;

    if (this._all) {
      for (i = 0, l = this._all.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(this._all[i].call(this, type));
          break;
        case 2:
          promises.push(this._all[i].call(this, type, arguments[1]));
          break;
        case 3:
          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));
          break;
        default:
          promises.push(this._all[i].apply(this, arguments));
        }
      }
    }

    if (wildcard) {
      handler = [];
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
    } else {
      handler = this._events[type];
    }

    if (typeof handler === 'function') {
      this.event = type;
      switch (al) {
      case 1:
        promises.push(handler.call(this));
        break;
      case 2:
        promises.push(handler.call(this, arguments[1]));
        break;
      case 3:
        promises.push(handler.call(this, arguments[1], arguments[2]));
        break;
      default:
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
        promises.push(handler.apply(this, args));
      }
    } else if (handler && handler.length) {
      handler = handler.slice();
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(handler[i].call(this));
          break;
        case 2:
          promises.push(handler[i].call(this, arguments[1]));
          break;
        case 3:
          promises.push(handler[i].call(this, arguments[1], arguments[2]));
          break;
        default:
          promises.push(handler[i].apply(this, args));
        }
      }
    } else if (!this.ignoreErrors && !this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        return Promise.reject(arguments[1]); // Unhandled 'error' event
      } else {
        return Promise.reject("Uncaught, unspecified 'error' event.");
      }
    }

    return Promise.all(promises);
  };

  EventEmitter.prototype.on = function(type, listener, options) {
    return this._on(type, listener, false, options);
  };

  EventEmitter.prototype.prependListener = function(type, listener, options) {
    return this._on(type, listener, true, options);
  };

  EventEmitter.prototype.onAny = function(fn) {
    return this._onAny(fn, false);
  };

  EventEmitter.prototype.prependAny = function(fn) {
    return this._onAny(fn, true);
  };

  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  EventEmitter.prototype._onAny = function(fn, prepend){
    if (typeof fn !== 'function') {
      throw new Error('onAny only accepts instances of Function');
    }

    if (!this._all) {
      this._all = [];
    }

    // Add the function to the event listener collection.
    if(prepend){
      this._all.unshift(fn);
    }else{
      this._all.push(fn);
    }

    return this;
  };

  EventEmitter.prototype._on = function(type, listener, prepend, options) {
    if (typeof type === 'function') {
      this._onAny(type, listener);
      return this;
    }

    if (typeof listener !== 'function') {
      throw new Error('on only accepts instances of Function');
    }
    this._events || init.call(this);

    var returnValue= this, temp;

    if (options !== undefined) {
      temp = setupListener.call(this, type, listener, options);
      listener = temp[0];
      returnValue = temp[1];
    }

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    if (this._newListener) {
      this.emit('newListener', type, listener);
    }

    if (this.wildcard) {
      growListenerTree.call(this, type, listener, prepend);
      return returnValue;
    }

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    } else {
      if (typeof this._events[type] === 'function') {
        // Change to array.
        this._events[type] = [this._events[type]];
      }

      // If we've already got an array, just add
      if(prepend){
        this._events[type].unshift(listener);
      }else{
        this._events[type].push(listener);
      }

      // Check for listener leak
      if (
        !this._events[type].warned &&
        this._maxListeners > 0 &&
        this._events[type].length > this._maxListeners
      ) {
        this._events[type].warned = true;
        logPossibleMemoryLeak.call(this, this._events[type].length, type);
      }
    }

    return returnValue;
  };

  EventEmitter.prototype.off = function(type, listener) {
    if (typeof listener !== 'function') {
      throw new Error('removeListener only takes instances of Function');
    }

    var handlers,leafs=[];

    if(this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
      if(!leafs) return this;
    } else {
      // does not use listeners(), so no side effect of creating _events[type]
      if (!this._events[type]) return this;
      handlers = this._events[type];
      leafs.push({_listeners:handlers});
    }

    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
      var leaf = leafs[iLeaf];
      handlers = leaf._listeners;
      if (isArray(handlers)) {

        var position = -1;

        for (var i = 0, length = handlers.length; i < length; i++) {
          if (handlers[i] === listener ||
            (handlers[i].listener && handlers[i].listener === listener) ||
            (handlers[i]._origin && handlers[i]._origin === listener)) {
            position = i;
            break;
          }
        }

        if (position < 0) {
          continue;
        }

        if(this.wildcard) {
          leaf._listeners.splice(position, 1);
        }
        else {
          this._events[type].splice(position, 1);
        }

        if (handlers.length === 0) {
          if(this.wildcard) {
            delete leaf._listeners;
          }
          else {
            delete this._events[type];
          }
        }
        if (this._removeListener)
          this.emit("removeListener", type, listener);

        return this;
      }
      else if (handlers === listener ||
        (handlers.listener && handlers.listener === listener) ||
        (handlers._origin && handlers._origin === listener)) {
        if(this.wildcard) {
          delete leaf._listeners;
        }
        else {
          delete this._events[type];
        }
        if (this._removeListener)
          this.emit("removeListener", type, listener);
      }
    }

    this.listenerTree && recursivelyGarbageCollect(this.listenerTree);

    return this;
  };

  EventEmitter.prototype.offAny = function(fn) {
    var i = 0, l = 0, fns;
    if (fn && this._all && this._all.length > 0) {
      fns = this._all;
      for(i = 0, l = fns.length; i < l; i++) {
        if(fn === fns[i]) {
          fns.splice(i, 1);
          if (this._removeListener)
            this.emit("removeListenerAny", fn);
          return this;
        }
      }
    } else {
      fns = this._all;
      if (this._removeListener) {
        for(i = 0, l = fns.length; i < l; i++)
          this.emit("removeListenerAny", fns[i]);
      }
      this._all = [];
    }
    return this;
  };

  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

  EventEmitter.prototype.removeAllListeners = function (type) {
    if (type === undefined) {
      !this._events || init.call(this);
      return this;
    }

    if (this.wildcard) {
      var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i;
      if (!leafs) return this;
      for (i = 0; i < leafs.length; i++) {
        leaf = leafs[i];
        leaf._listeners = null;
      }
      this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
    } else if (this._events) {
      this._events[type] = null;
    }
    return this;
  };

  EventEmitter.prototype.listeners = function (type) {
    var _events = this._events;
    var keys, listeners, allListeners;
    var i;
    var listenerTree;

    if (type === undefined) {
      if (this.wildcard) {
        throw Error('event name required for wildcard emitter');
      }

      if (!_events) {
        return [];
      }

      keys = ownKeys(_events);
      i = keys.length;
      allListeners = [];
      while (i-- > 0) {
        listeners = _events[keys[i]];
        if (typeof listeners === 'function') {
          allListeners.push(listeners);
        } else {
          allListeners.push.apply(allListeners, listeners);
        }
      }
      return allListeners;
    } else {
      if (this.wildcard) {
        listenerTree= this.listenerTree;
        if(!listenerTree) return [];
        var handlers = [];
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handlers, ns, listenerTree, 0);
        return handlers;
      }

      if (!_events) {
        return [];
      }

      listeners = _events[type];

      if (!listeners) {
        return [];
      }
      return typeof listeners === 'function' ? [listeners] : listeners;
    }
  };

  EventEmitter.prototype.eventNames = function(nsAsArray){
    var _events= this._events;
    return this.wildcard? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : (_events? ownKeys(_events) : []);
  };

  EventEmitter.prototype.listenerCount = function(type) {
    return this.listeners(type).length;
  };

  EventEmitter.prototype.hasListeners = function (type) {
    if (this.wildcard) {
      var handlers = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
      return handlers.length > 0;
    }

    var _events = this._events;
    var _all = this._all;

    return !!(_all && _all.length || _events && (type === undefined ? ownKeys(_events).length : _events[type]));
  };

  EventEmitter.prototype.listenersAny = function() {

    if(this._all) {
      return this._all;
    }
    else {
      return [];
    }

  };

  EventEmitter.prototype.waitFor = function (event, options) {
    var self = this;
    var type = typeof options;
    if (type === 'number') {
      options = {timeout: options};
    } else if (type === 'function') {
      options = {filter: options};
    }

    options= resolveOptions(options, {
      timeout: 0,
      filter: undefined,
      handleError: false,
      Promise: Promise,
      overload: false
    }, {
      filter: functionReducer,
      Promise: constructorReducer
    });

    return makeCancelablePromise(options.Promise, function (resolve, reject, onCancel) {
      function listener() {
        var filter= options.filter;
        if (filter && !filter.apply(self, arguments)) {
          return;
        }
        self.off(event, listener);
        if (options.handleError) {
          var err = arguments[0];
          err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
        } else {
          resolve(toArray.apply(null, arguments));
        }
      }

      onCancel(function(){
        self.off(event, listener);
      });

      self._on(event, listener, false);
    }, {
      timeout: options.timeout,
      overload: options.overload
    })
  };

  function once(emitter, name, options) {
    options= resolveOptions(options, {
      Promise: Promise,
      timeout: 0,
      overload: false
    }, {
      Promise: constructorReducer
    });

    var _Promise= options.Promise;

    return makeCancelablePromise(_Promise, function(resolve, reject, onCancel){
      var handler;
      if (typeof emitter.addEventListener === 'function') {
        handler=  function () {
          resolve(toArray.apply(null, arguments));
        };

        onCancel(function(){
          emitter.removeEventListener(name, handler);
        });

        emitter.addEventListener(
            name,
            handler,
            {once: true}
        );
        return;
      }

      var eventListener = function(){
        errorListener && emitter.removeListener('error', errorListener);
        resolve(toArray.apply(null, arguments));
      };

      var errorListener;

      if (name !== 'error') {
        errorListener = function (err){
          emitter.removeListener(name, eventListener);
          reject(err);
        };

        emitter.once('error', errorListener);
      }

      onCancel(function(){
        errorListener && emitter.removeListener('error', errorListener);
        emitter.removeListener(name, eventListener);
      });

      emitter.once(name, eventListener);
    }, {
      timeout: options.timeout,
      overload: options.overload
    });
  }

  var prototype= EventEmitter.prototype;

  Object.defineProperties(EventEmitter, {
    defaultMaxListeners: {
      get: function () {
        return prototype._maxListeners;
      },
      set: function (n) {
        if (typeof n !== 'number' || n < 0 || Number.isNaN(n)) {
          throw TypeError('n must be a non-negative number')
        }
        prototype._maxListeners = n;
      },
      enumerable: true
    },
    once: {
      value: once,
      writable: true,
      configurable: true
    }
  });

  Object.defineProperties(prototype, {
      _maxListeners: {
          value: defaultMaxListeners,
          writable: true,
          configurable: true
      },
      _observers: {value: null, writable: true, configurable: true}
  });

  if (typeof define === 'function' && define.amd) {
     // AMD. Register as an anonymous module.
    define(function() {
      return EventEmitter;
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = EventEmitter;
  }
  else {
    // global for any kind of environment.
    var _global= new Function('','return this')();
    _global.EventEmitter2 = EventEmitter;
  }
}();

},{"process":"g5IB"}],"VF80":[function(require,module,exports) {
var grammar = module.exports = {
  v: [{
    name: 'version',
    reg: /^(\d*)$/
  }],
  o: [{
    // o=- 20518 0 IN IP4 203.0.113.1
    // NB: sessionId will be a String in most cases because it is huge
    name: 'origin',
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
    format: '%s %s %d %s IP%d %s'
  }],
  // default parsing of these only (though some of these feel outdated)
  s: [{ name: 'name' }],
  i: [{ name: 'description' }],
  u: [{ name: 'uri' }],
  e: [{ name: 'email' }],
  p: [{ name: 'phone' }],
  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
  // k: [{}], // outdated thing ignored
  t: [{
    // t=0 0
    name: 'timing',
    reg: /^(\d*) (\d*)/,
    names: ['start', 'stop'],
    format: '%d %d'
  }],
  c: [{
    // c=IN IP4 10.47.197.26
    name: 'connection',
    reg: /^IN IP(\d) (\S*)/,
    names: ['version', 'ip'],
    format: 'IN IP%d %s'
  }],
  b: [{
    // b=AS:4000
    push: 'bandwidth',
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ['type', 'limit'],
    format: '%s:%s'
  }],
  m: [{
    // m=video 51744 RTP/AVP 126 97 98 34 31
    // NB: special - pushes to session
    // TODO: rtp/fmtp should be filtered by the payloads found here?
    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
    names: ['type', 'port', 'protocol', 'payloads'],
    format: '%s %d %s %s'
  }],
  a: [
    {
      // a=rtpmap:110 opus/48000/2
      push: 'rtp',
      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
      names: ['payload', 'codec', 'rate', 'encoding'],
      format: function (o) {
        return (o.encoding)
          ? 'rtpmap:%d %s/%s/%s'
          : o.rate
            ? 'rtpmap:%d %s/%s'
            : 'rtpmap:%d %s';
      }
    },
    {
      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
      // a=fmtp:111 minptime=10; useinbandfec=1
      push: 'fmtp',
      reg: /^fmtp:(\d*) ([\S| ]*)/,
      names: ['payload', 'config'],
      format: 'fmtp:%d %s'
    },
    {
      // a=control:streamid=0
      name: 'control',
      reg: /^control:(.*)/,
      format: 'control:%s'
    },
    {
      // a=rtcp:65179 IN IP4 193.84.77.194
      name: 'rtcp',
      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
      names: ['port', 'netType', 'ipVer', 'address'],
      format: function (o) {
        return (o.address != null)
          ? 'rtcp:%d %s IP%d %s'
          : 'rtcp:%d';
      }
    },
    {
      // a=rtcp-fb:98 trr-int 100
      push: 'rtcpFbTrrInt',
      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
      names: ['payload', 'value'],
      format: 'rtcp-fb:%s trr-int %d'
    },
    {
      // a=rtcp-fb:98 nack rpsi
      push: 'rtcpFb',
      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
      names: ['payload', 'type', 'subtype'],
      format: function (o) {
        return (o.subtype != null)
          ? 'rtcp-fb:%s %s %s'
          : 'rtcp-fb:%s %s';
      }
    },
    {
      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
      // a=extmap:1/recvonly URI-gps-string
      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
      push: 'ext',
      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
      format: function (o) {
        return (
          'extmap:%d' +
          (o.direction ? '/%s' : '%v') +
          (o['encrypt-uri'] ? ' %s' : '%v') +
          ' %s' +
          (o.config ? ' %s' : '')
        );
      }
    },
    {
      // a=extmap-allow-mixed
      name: 'extmapAllowMixed',
      reg: /^(extmap-allow-mixed)/
    },
    {
      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
      push: 'crypto',
      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
      names: ['id', 'suite', 'config', 'sessionConfig'],
      format: function (o) {
        return (o.sessionConfig != null)
          ? 'crypto:%d %s %s %s'
          : 'crypto:%d %s %s';
      }
    },
    {
      // a=setup:actpass
      name: 'setup',
      reg: /^setup:(\w*)/,
      format: 'setup:%s'
    },
    {
      // a=connection:new
      name: 'connectionType',
      reg: /^connection:(new|existing)/,
      format: 'connection:%s'
    },
    {
      // a=mid:1
      name: 'mid',
      reg: /^mid:([^\s]*)/,
      format: 'mid:%s'
    },
    {
      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
      name: 'msid',
      reg: /^msid:(.*)/,
      format: 'msid:%s'
    },
    {
      // a=ptime:20
      name: 'ptime',
      reg: /^ptime:(\d*(?:\.\d*)*)/,
      format: 'ptime:%d'
    },
    {
      // a=maxptime:60
      name: 'maxptime',
      reg: /^maxptime:(\d*(?:\.\d*)*)/,
      format: 'maxptime:%d'
    },
    {
      // a=sendrecv
      name: 'direction',
      reg: /^(sendrecv|recvonly|sendonly|inactive)/
    },
    {
      // a=ice-lite
      name: 'icelite',
      reg: /^(ice-lite)/
    },
    {
      // a=ice-ufrag:F7gI
      name: 'iceUfrag',
      reg: /^ice-ufrag:(\S*)/,
      format: 'ice-ufrag:%s'
    },
    {
      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
      name: 'icePwd',
      reg: /^ice-pwd:(\S*)/,
      format: 'ice-pwd:%s'
    },
    {
      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
      name: 'fingerprint',
      reg: /^fingerprint:(\S*) (\S*)/,
      names: ['type', 'hash'],
      format: 'fingerprint:%s %s'
    },
    {
      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
      push:'candidates',
      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
      format: function (o) {
        var str = 'candidate:%s %d %s %d %s %d typ %s';

        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

        // NB: candidate has three optional chunks, so %void middles one if it's missing
        str += (o.tcptype != null) ? ' tcptype %s' : '%v';

        if (o.generation != null) {
          str += ' generation %d';
        }

        str += (o['network-id'] != null) ? ' network-id %d' : '%v';
        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
        return str;
      }
    },
    {
      // a=end-of-candidates (keep after the candidates line for readability)
      name: 'endOfCandidates',
      reg: /^(end-of-candidates)/
    },
    {
      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
      name: 'remoteCandidates',
      reg: /^remote-candidates:(.*)/,
      format: 'remote-candidates:%s'
    },
    {
      // a=ice-options:google-ice
      name: 'iceOptions',
      reg: /^ice-options:(\S*)/,
      format: 'ice-options:%s'
    },
    {
      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
      push: 'ssrcs',
      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
      names: ['id', 'attribute', 'value'],
      format: function (o) {
        var str = 'ssrc:%d';
        if (o.attribute != null) {
          str += ' %s';
          if (o.value != null) {
            str += ':%s';
          }
        }
        return str;
      }
    },
    {
      // a=ssrc-group:FEC 1 2
      // a=ssrc-group:FEC-FR 3004364195 1080772241
      push: 'ssrcGroups',
      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
      names: ['semantics', 'ssrcs'],
      format: 'ssrc-group:%s %s'
    },
    {
      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
      name: 'msidSemantic',
      reg: /^msid-semantic:\s?(\w*) (\S*)/,
      names: ['semantic', 'token'],
      format: 'msid-semantic: %s %s' // space after ':' is not accidental
    },
    {
      // a=group:BUNDLE audio video
      push: 'groups',
      reg: /^group:(\w*) (.*)/,
      names: ['type', 'mids'],
      format: 'group:%s %s'
    },
    {
      // a=rtcp-mux
      name: 'rtcpMux',
      reg: /^(rtcp-mux)/
    },
    {
      // a=rtcp-rsize
      name: 'rtcpRsize',
      reg: /^(rtcp-rsize)/
    },
    {
      // a=sctpmap:5000 webrtc-datachannel 1024
      name: 'sctpmap',
      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
      names: ['sctpmapNumber', 'app', 'maxMessageSize'],
      format: function (o) {
        return (o.maxMessageSize != null)
          ? 'sctpmap:%s %s %s'
          : 'sctpmap:%s %s';
      }
    },
    {
      // a=x-google-flag:conference
      name: 'xGoogleFlag',
      reg: /^x-google-flag:([^\s]*)/,
      format: 'x-google-flag:%s'
    },
    {
      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
      push: 'rids',
      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
      names: ['id', 'direction', 'params'],
      format: function (o) {
        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
      }
    },
    {
      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
      // a=imageattr:* send [x=800,y=640] recv *
      // a=imageattr:100 recv [x=320,y=240]
      push: 'imageattrs',
      reg: new RegExp(
        // a=imageattr:97
        '^imageattr:(\\d+|\\*)' +
        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
        '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
        // recv [x=330,y=250]
        '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
      ),
      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
      format: function (o) {
        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    {
      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
      // a=simulcast:recv 1;4,5 send 6;7
      name: 'simulcast',
      reg: new RegExp(
        // a=simulcast:
        '^simulcast:' +
        // send 1,2,3;~4,~5
        '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
        // space + recv 6;~7,~8
        '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
        // end
        '$'
      ),
      names: ['dir1', 'list1', 'dir2', 'list2'],
      format: function (o) {
        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    {
      // old simulcast draft 03 (implemented by Firefox)
      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
      // a=simulcast: recv pt=97;98 send pt=97
      // a=simulcast: send rid=5;6;7 paused=6,7
      name: 'simulcast_03',
      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
      names: ['value'],
      format: 'simulcast: %s'
    },
    {
      // a=framerate:25
      // a=framerate:29.97
      name: 'framerate',
      reg: /^framerate:(\d+(?:$|\.\d+))/,
      format: 'framerate:%s'
    },
    {
      // RFC4570
      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
      name: 'sourceFilter',
      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
      format: 'source-filter: %s %s %s %s %s'
    },
    {
      // a=bundle-only
      name: 'bundleOnly',
      reg: /^(bundle-only)/
    },
    {
      // a=label:1
      name: 'label',
      reg: /^label:(.+)/,
      format: 'label:%s'
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
      name: 'sctpPort',
      reg: /^sctp-port:(\d+)$/,
      format: 'sctp-port:%s'
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
      name: 'maxMessageSize',
      reg: /^max-message-size:(\d+)$/,
      format: 'max-message-size:%s'
    },
    {
      // RFC7273
      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
      push:'tsRefClocks',
      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
      names: ['clksrc', 'clksrcExt'],
      format: function (o) {
        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
      }
    },
    {
      // RFC7273
      // a=mediaclk:direct=963214424
      name:'mediaClk',
      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],
      format: function (o) {
        var str = 'mediaclk:';
        str += (o.id != null ? 'id=%s %s' : '%v%s');
        str += (o.mediaClockValue != null ? '=%s' : '');
        str += (o.rateNumerator != null ? ' rate=%s' : '');
        str += (o.rateDenominator != null ? '/%s' : '');
        return str;
      }
    },
    {
      // a=keywds:keywords
      name: 'keywords',
      reg: /^keywds:(.+)$/,
      format: 'keywds:%s'
    },
    {
      // a=content:main
      name: 'content',
      reg: /^content:(.+)/,
      format: 'content:%s'
    },
    // BFCP https://tools.ietf.org/html/rfc4583
    {
      // a=floorctrl:c-s
      name: 'bfcpFloorCtrl',
      reg: /^floorctrl:(c-only|s-only|c-s)/,
      format: 'floorctrl:%s'
    },
    {
      // a=confid:1
      name: 'bfcpConfId',
      reg: /^confid:(\d+)/,
      format: 'confid:%s'
    },
    {
      // a=userid:1
      name: 'bfcpUserId',
      reg: /^userid:(\d+)/,
      format: 'userid:%s'
    },
    {
      // a=floorid:1
      name: 'bfcpFloorId',
      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
      names: ['id', 'mStream'],
      format: 'floorid:%s mstrm:%s'
    },
    {
      // any a= that we don't understand is kept verbatim on media.invalid
      push: 'invalid',
      names: ['value']
    }
  ]
};

// set sensible defaults to avoid polluting the grammar with boring details
Object.keys(grammar).forEach(function (key) {
  var objs = grammar[key];
  objs.forEach(function (obj) {
    if (!obj.reg) {
      obj.reg = /(.*)/;
    }
    if (!obj.format) {
      obj.format = '%s';
    }
  });
});

},{}],"pJ4u":[function(require,module,exports) {
var toIntIfInt = function (v) {
  return String(Number(v)) === v ? Number(v) : v;
};

var attachProperties = function (match, location, names, rawName) {
  if (rawName && !names) {
    location[rawName] = toIntIfInt(match[1]);
  }
  else {
    for (var i = 0; i < names.length; i += 1) {
      if (match[i+1] != null) {
        location[names[i]] = toIntIfInt(match[i+1]);
      }
    }
  }
};

var parseReg = function (obj, location, content) {
  var needsBlank = obj.name && obj.names;
  if (obj.push && !location[obj.push]) {
    location[obj.push] = [];
  }
  else if (needsBlank && !location[obj.name]) {
    location[obj.name] = {};
  }
  var keyLocation = obj.push ?
    {} :  // blank object that will be pushed
    needsBlank ? location[obj.name] : location; // otherwise, named location or root

  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

  if (obj.push) {
    location[obj.push].push(keyLocation);
  }
};

var grammar = require('./grammar');
var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

exports.parse = function (sdp) {
  var session = {}
    , media = []
    , location = session; // points at where properties go under (one of the above)

  // parse lines we understand
  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
    var type = l[0];
    var content = l.slice(2);
    if (type === 'm') {
      media.push({rtp: [], fmtp: []});
      location = media[media.length-1]; // point at latest media line
    }

    for (var j = 0; j < (grammar[type] || []).length; j += 1) {
      var obj = grammar[type][j];
      if (obj.reg.test(content)) {
        return parseReg(obj, location, content);
      }
    }
  });

  session.media = media; // link it up
  return session;
};

var paramReducer = function (acc, expr) {
  var s = expr.split(/=(.+)/, 2);
  if (s.length === 2) {
    acc[s[0]] = toIntIfInt(s[1]);
  } else if (s.length === 1 && expr.length > 1) {
    acc[s[0]] = undefined;
  }
  return acc;
};

exports.parseParams = function (str) {
  return str.split(/;\s?/).reduce(paramReducer, {});
};

// For backward compatibility - alias will be removed in 3.0.0
exports.parseFmtpConfig = exports.parseParams;

exports.parsePayloads = function (str) {
  return str.toString().split(' ').map(Number);
};

exports.parseRemoteCandidates = function (str) {
  var candidates = [];
  var parts = str.split(' ').map(toIntIfInt);
  for (var i = 0; i < parts.length; i += 3) {
    candidates.push({
      component: parts[i],
      ip: parts[i + 1],
      port: parts[i + 2]
    });
  }
  return candidates;
};

exports.parseImageAttributes = function (str) {
  return str.split(' ').map(function (item) {
    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
  });
};

exports.parseSimulcastStreamList = function (str) {
  return str.split(';').map(function (stream) {
    return stream.split(',').map(function (format) {
      var scid, paused = false;

      if (format[0] !== '~') {
        scid = toIntIfInt(format);
      } else {
        scid = toIntIfInt(format.substring(1, format.length));
        paused = true;
      }

      return {
        scid: scid,
        paused: paused
      };
    });
  });
};

},{"./grammar":"VF80"}],"dFSN":[function(require,module,exports) {
var grammar = require('./grammar');

// customized util.format - discards excess arguments and can void middle ones
var formatRegExp = /%[sdv%]/g;
var format = function (formatStr) {
  var i = 1;
  var args = arguments;
  var len = args.length;
  return formatStr.replace(formatRegExp, function (x) {
    if (i >= len) {
      return x; // missing argument
    }
    var arg = args[i];
    i += 1;
    switch (x) {
    case '%%':
      return '%';
    case '%s':
      return String(arg);
    case '%d':
      return Number(arg);
    case '%v':
      return '';
    }
  });
  // NB: we discard excess arguments - they are typically undefined from makeLine
};

var makeLine = function (type, obj, location) {
  var str = obj.format instanceof Function ?
    (obj.format(obj.push ? location : location[obj.name])) :
    obj.format;

  var args = [type + '=' + str];
  if (obj.names) {
    for (var i = 0; i < obj.names.length; i += 1) {
      var n = obj.names[i];
      if (obj.name) {
        args.push(location[obj.name][n]);
      }
      else { // for mLine and push attributes
        args.push(location[obj.names[i]]);
      }
    }
  }
  else {
    args.push(location[obj.name]);
  }
  return format.apply(null, args);
};

// RFC specified order
// TODO: extend this with all the rest
var defaultOuterOrder = [
  'v', 'o', 's', 'i',
  'u', 'e', 'p', 'c',
  'b', 't', 'r', 'z', 'a'
];
var defaultInnerOrder = ['i', 'c', 'b', 'a'];


module.exports = function (session, opts) {
  opts = opts || {};
  // ensure certain properties exist
  if (session.version == null) {
    session.version = 0; // 'v=0' must be there (only defined version atm)
  }
  if (session.name == null) {
    session.name = ' '; // 's= ' must be there if no meaningful name set
  }
  session.media.forEach(function (mLine) {
    if (mLine.payloads == null) {
      mLine.payloads = '';
    }
  });

  var outerOrder = opts.outerOrder || defaultOuterOrder;
  var innerOrder = opts.innerOrder || defaultInnerOrder;
  var sdp = [];

  // loop through outerOrder for matching properties on session
  outerOrder.forEach(function (type) {
    grammar[type].forEach(function (obj) {
      if (obj.name in session && session[obj.name] != null) {
        sdp.push(makeLine(type, obj, session));
      }
      else if (obj.push in session && session[obj.push] != null) {
        session[obj.push].forEach(function (el) {
          sdp.push(makeLine(type, obj, el));
        });
      }
    });
  });

  // then for each media line, follow the innerOrder
  session.media.forEach(function (mLine) {
    sdp.push(makeLine('m', grammar.m[0], mLine));

    innerOrder.forEach(function (type) {
      grammar[type].forEach(function (obj) {
        if (obj.name in mLine && mLine[obj.name] != null) {
          sdp.push(makeLine(type, obj, mLine));
        }
        else if (obj.push in mLine && mLine[obj.push] != null) {
          mLine[obj.push].forEach(function (el) {
            sdp.push(makeLine(type, obj, el));
          });
        }
      });
    });
  });

  return sdp.join('\r\n') + '\r\n';
};

},{"./grammar":"VF80"}],"CfIM":[function(require,module,exports) {
var parser = require('./parser');
var writer = require('./writer');

exports.write = writer;
exports.parse = parser.parse;
exports.parseParams = parser.parseParams;
exports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().
exports.parsePayloads = parser.parsePayloads;
exports.parseRemoteCandidates = parser.parseRemoteCandidates;
exports.parseImageAttributes = parser.parseImageAttributes;
exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;

},{"./parser":"pJ4u","./writer":"dFSN"}],"ZYu2":[function(require,module,exports) {
var define;
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAnalyticsDeviceId = exports.HMSWebrtcStats = exports.HMSWebrtcInternals = exports.HMSVideoTrack = exports.HMSVideoPluginsManager = exports.HMSVideoPluginType = exports.HMSVideoPluginCanvasContextType = exports.HMSVideoCodec = exports.HMSTrackUpdate = exports.HMSTrackType = exports.HMSTrack = exports.HMSSimulcastLayer = exports.HMSSdk = exports.HMSRoomUpdate = exports.HMSRemoteVideoTrack = exports.HMSRemoteAudioTrack = exports.HMSPluginUnsupportedTypes = exports.HMSPlaylistType = exports.HMSPeerUpdate = exports.HMSLogLevel = exports.HMSLocalVideoTrack = exports.HMSLocalAudioTrack = exports.HMSFacingMode = exports.HMSException = exports.HMSAudioTrack = exports.HMSAudioPluginsManager = exports.HMSAudioPluginType = exports.HMSAudioContextHandler = exports.HMSAudioCodec = exports.ENV = exports.DeviceType = void 0;
exports.getLocalDevices = On;
exports.getLocalScreen = Nn;
exports.getLocalStream = Li;
exports.simulcastMapping = exports.parsedUserAgent = exports.isSupported = exports.isPageHidden = exports.isNode = exports.isMobile = exports.isIOS = exports.isBrowser = void 0;
exports.validateDeviceAV = pg;
var _webrtcAdapter = _interopRequireDefault(require("webrtc-adapter"));
var _uaParserJs = require("ua-parser-js");
var _uuid = require("uuid");
var _eventemitter = _interopRequireWildcard(require("eventemitter2"));
var _sdpTransform = require("sdp-transform");
var _Ue, _er;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e8) { throw _e8; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e9) { didErr = true; err = _e9; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var mr = Object.defineProperty,
  gr = Object.defineProperties;
var vr = Object.getOwnPropertyDescriptors;
var qe = Object.getOwnPropertySymbols;
var Si = Object.prototype.hasOwnProperty,
  Ti = Object.prototype.propertyIsEnumerable;
var fi = function fi(n, e, t) {
    return e in n ? mr(n, e, {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: t
    }) : n[e] = t;
  },
  S = function S(n, e) {
    for (var t in e || (e = {})) Si.call(e, t) && fi(n, t, e[t]);
    if (qe) {
      var _iterator = _createForOfIteratorHelper(qe(e)),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var t = _step.value;
          Ti.call(e, t) && fi(n, t, e[t]);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  },
  D = function D(n, e) {
    return gr(n, vr(e));
  };
var Rt = function Rt(n, e) {
  var t = {};
  for (var i in n) Si.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && qe) {
    var _iterator2 = _createForOfIteratorHelper(qe(n)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var i = _step2.value;
        e.indexOf(i) < 0 && Ti.call(n, i) && (t[i] = n[i]);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  return t;
};
var Sr = function Sr(n, e) {
  return function () {
    return e || n((e = {
      exports: {}
    }).exports, e), e.exports;
  };
};
var c = function c(n, e, t) {
  return new Promise(function (i, r) {
    var s = function s(l) {
        try {
          d(t.next(l));
        } catch (u) {
          r(u);
        }
      },
      a = function a(l) {
        try {
          d(t.throw(l));
        } catch (u) {
          r(u);
        }
      },
      d = function d(l) {
        return l.done ? i(l.value) : Promise.resolve(l.value).then(s, a);
      };
    d((t = t.apply(n, e)).next());
  });
};
var bi = Sr(function (ws, Ar) {
  Ar.exports = {
    name: "@100mslive/hms-video",
    version: "0.9.2",
    license: "MIT",
    main: "dist/index.cjs.js",
    typings: "dist/index.d.ts",
    module: "dist/index.js",
    files: ["dist", "src"],
    engines: {
      node: ">=10"
    },
    exports: {
      ".": {
        require: "./dist/index.cjs.js",
        import: "./dist/index.js",
        default: "./dist/index.js"
      }
    },
    scripts: {
      prestart: "rm -rf dist && yarn types:build",
      start: 'concurrently "yarn dev" "yarn types"',
      dev: "node ../../scripts/dev",
      "build:only": "node ../../scripts/build",
      build: "yarn build:only && yarn types:build",
      types: "tsc -w",
      "types:build": "tsc -p tsconfig.json",
      test: "jest --maxWorkers=1",
      lint: "eslint -c ../../.eslintrc .",
      "lint:fix": "yarn lint --fix",
      prepare: "yarn build",
      size: "size-limit",
      analyze: "size-limit --why",
      format: "prettier --write src/**/*.ts"
    },
    author: "100ms <tech-common@100ms.live>",
    devDependencies: {
      "@types/dom-screen-wake-lock": "^1.0.1",
      "@types/sdp-transform": "^2.4.4",
      "@types/ua-parser-js": "^0.7.36",
      "@types/uuid": "^8.3.0",
      "jest-canvas-mock": "^2.3.1",
      tslib: "^2.2.0"
    },
    dependencies: {
      eventemitter2: "^6.4.7",
      "sdp-transform": "^2.14.1",
      "ua-parser-js": "^1.0.1",
      uuid: "^8.3.2",
      "webrtc-adapter": "^8.0.0"
    },
    gitHead: "4e000fbf8980a6815e2b0c50e0b287472ee22fd5"
  };
});
var ie = /*#__PURE__*/function () {
  function ie(e) {
    _classCallCheck(this, ie);
    this.key = e;
    this.storage = null;
  }
  _createClass(ie, [{
    key: "getStorage",
    value: function getStorage() {
      return B && !this.storage && (Ei(), this.storage = window.localStorage), this.storage;
    }
  }, {
    key: "get",
    value: function get() {
      var i;
      var e = (i = this.getStorage()) == null ? void 0 : i.getItem(this.key);
      return e ? JSON.parse(e) : void 0;
    }
  }, {
    key: "set",
    value: function set(e) {
      var i;
      var t = JSON.stringify(e);
      (i = this.getStorage()) == null || i.setItem(this.key, t);
    }
  }, {
    key: "clear",
    value: function clear() {
      var e;
      (e = this.getStorage()) == null || e.removeItem(this.key);
    }
  }]);
  return ie;
}();
var ve = new _uaParserJs.UAParser(),
  Ai,
  Se = typeof window == "undefined" && !((Ai = ve.getBrowser().name) == null ? void 0 : Ai.toLowerCase().includes("electron")),
  B = typeof window != "undefined",
  q;
exports.ENV = q;
exports.isBrowser = B;
exports.isNode = Se;
exports.parsedUserAgent = ve;
(function (i) {
  i.PROD = "prod", i.QA = "qa", i.DEV = "dev";
})(q || (exports.ENV = q = {}));
var Er = function Er() {
    return !Se;
  },
  as = Er(),
  ki = function ki() {
    return ve.getDevice().type === "mobile";
  },
  yi = function yi() {
    var n,
      e = new ie("hms-analytics-deviceId"),
      t = e.get();
    return t ? n = t : (n = (0, _uuid.v4)(), e.set(n)), n;
  },
  Mi = function Mi() {
    return typeof document != "undefined" && document.hidden;
  },
  Ct = function Ct() {
    var n;
    return ((n = ve.getOS().name) == null ? void 0 : n.toLowerCase()) === "ios";
  };
exports.isIOS = Ct;
exports.isPageHidden = Mi;
exports.getAnalyticsDeviceId = yi;
exports.isMobile = ki;
exports.isSupported = as;
var Pi = /*#__PURE__*/function () {
    function Pi() {
      _classCallCheck(this, Pi);
      this.valuesMap = new Map();
    }
    _createClass(Pi, [{
      key: "getItem",
      value: function getItem(e) {
        return this.valuesMap.has(e) ? String(this.valuesMap.get(e)) : null;
      }
    }, {
      key: "setItem",
      value: function setItem(e, t) {
        this.valuesMap.set(e, t);
      }
    }, {
      key: "removeItem",
      value: function removeItem(e) {
        this.valuesMap.delete(e);
      }
    }, {
      key: "clear",
      value: function clear() {
        this.valuesMap.clear();
      }
    }, {
      key: "key",
      value: function key(e) {
        if (arguments.length === 0) throw new TypeError("Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.");
        return Array.from(this.valuesMap.keys())[e];
      }
    }, {
      key: "length",
      get: function get() {
        return this.valuesMap.size;
      }
    }]);
    return Pi;
  }(),
  Ei = function Ei() {
    B && !localStorage && (window.localStorage = new Pi());
  };
var V;
exports.HMSLogLevel = V;
(function (l) {
  l[l.VERBOSE = 0] = "VERBOSE", l[l.DEBUG = 1] = "DEBUG", l[l.INFO = 2] = "INFO", l[l.WARN = 3] = "WARN", l[l.TIME = 4] = "TIME", l[l.TIMEEND = 5] = "TIMEEND", l[l.ERROR = 6] = "ERROR", l[l.NONE = 7] = "NONE";
})(V || (exports.HMSLogLevel = V = {}));
var kr = typeof window != "undefined" && typeof window.expect != "undefined",
  o = /*#__PURE__*/function () {
    function o() {
      _classCallCheck(this, o);
    }
    _createClass(o, null, [{
      key: "v",
      value: function v(e) {
        for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          t[_key - 1] = arguments[_key];
        }
        this.log.apply(this, [0, e].concat(t));
      }
    }, {
      key: "d",
      value: function d(e) {
        for (var _len2 = arguments.length, t = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          t[_key2 - 1] = arguments[_key2];
        }
        this.log.apply(this, [1, e].concat(t));
      }
    }, {
      key: "i",
      value: function i(e) {
        for (var _len3 = arguments.length, t = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          t[_key3 - 1] = arguments[_key3];
        }
        this.log.apply(this, [2, e].concat(t));
      }
    }, {
      key: "w",
      value: function w(e) {
        for (var _len4 = arguments.length, t = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          t[_key4 - 1] = arguments[_key4];
        }
        this.log.apply(this, [3, e].concat(t));
      }
    }, {
      key: "e",
      value: function e(_e2) {
        for (var _len5 = arguments.length, t = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          t[_key5 - 1] = arguments[_key5];
        }
        this.log.apply(this, [6, _e2].concat(t));
      }
    }, {
      key: "time",
      value: function time(e) {
        this.log(4, "[HMSPerformanceTiming]", e);
      }
    }, {
      key: "timeEnd",
      value: function timeEnd(e) {
        this.log(5, "[HMSPerformanceTiming]", e, e);
      }
    }, {
      key: "cleanUp",
      value: function cleanUp() {
        performance.clearMarks(), performance.clearMeasures();
      }
    }, {
      key: "log",
      value: function log(e, t) {
        for (var _len6 = arguments.length, i = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
          i[_key6 - 2] = arguments[_key6];
        }
        if (!(this.level.valueOf() > e.valueOf())) switch (e) {
          case 0:
            {
              var _console;
              (_console = console).log.apply(_console, [t].concat(i));
              break;
            }
          case 1:
            {
              var _console2;
              (_console2 = console).debug.apply(_console2, [t].concat(i));
              break;
            }
          case 2:
            {
              var _console3;
              (_console3 = console).info.apply(_console3, [t].concat(i));
              break;
            }
          case 3:
            {
              var _console4;
              (_console4 = console).warn.apply(_console4, [t].concat(i));
              break;
            }
          case 6:
            {
              var _console5;
              (_console5 = console).error.apply(_console5, [t].concat(i));
              break;
            }
          case 4:
            {
              performance.mark(i[0]);
              break;
            }
          case 5:
            {
              var r = i[0];
              try {
                var s = performance.measure(r, r);
                this.log(1, t, r, s == null ? void 0 : s.duration), performance.clearMarks(r), performance.clearMeasures(r);
              } catch (s) {
                this.log(1, t, r, s);
              }
              break;
            }
        }
      }
    }]);
    return o;
  }();
o.level = kr ? 7 : 0;
var Ae = /*#__PURE__*/function () {
  function Ae(_ref) {
    var e = _ref.sender,
      t = _ref.message,
      _ref$type = _ref.type,
      i = _ref$type === void 0 ? "chat" : _ref$type,
      r = _ref.recipientPeer,
      s = _ref.recipientRoles,
      a = _ref.time;
    _classCallCheck(this, Ae);
    this.sender = e, this.message = t, this.type = i, this.recipientPeer = r, this.recipientRoles = s, this.time = a;
  }
  _createClass(Ae, [{
    key: "toSignalParams",
    value: function toSignalParams() {
      var r, s;
      var e = (r = this.recipientRoles) == null ? void 0 : r.map(function (a) {
          return a.name;
        }),
        t = (s = this.recipientPeer) == null ? void 0 : s.peerId,
        i = {
          info: {
            message: this.message,
            type: this.type
          }
        };
      return (e == null ? void 0 : e.length) && (i.roles = e), t && (i.peer_id = t), i;
    }
  }, {
    key: "toString",
    value: function toString() {
      var e;
      return "{\n      sender: ".concat(this.sender, ";\n      recipientPeer: ").concat(this.recipientPeer, ";\n      recipientRoles: ").concat((e = this.recipientRoles) == null ? void 0 : e.map(function (t) {
        return t.name;
      }), ";\n      message: ").concat(this.message, ";\n      time: ").concat(this.time, ";\n      type: ").concat(this.type, ";\n    }");
    }
  }]);
  return Ae;
}();
var je = /*#__PURE__*/function () {
  function je(e, t) {
    _classCallCheck(this, je);
    this.id = e;
    this.store = t;
    this.recording = {
      server: {
        running: !1
      },
      browser: {
        running: !1
      },
      hls: {
        running: !1
      }
    };
    this.rtmp = {
      running: !1
    };
    this.hls = {
      running: !1,
      variants: []
    };
  }
  _createClass(je, [{
    key: "localPeer",
    get: function get() {
      return this.store.getLocalPeer();
    }
  }, {
    key: "peers",
    get: function get() {
      return this.store.getPeers();
    }
  }]);
  return je;
}();
var de = /*#__PURE__*/function () {
  function de(_ref2) {
    var e = _ref2.peerId,
      t = _ref2.name,
      i = _ref2.isLocal,
      r = _ref2.customerUserId,
      s = _ref2.metadata,
      a = _ref2.role,
      d = _ref2.joinedAt;
    _classCallCheck(this, de);
    this.customerUserId = "";
    this.metadata = "";
    this.auxiliaryTracks = [];
    this.name = t, this.peerId = e, this.isLocal = i, this.customerUserId = r, this.metadata = s, this.joinedAt = d, a && (this.role = a);
  }
  _createClass(de, [{
    key: "updateRole",
    value: function updateRole(e) {
      this.role = e;
    }
  }, {
    key: "updateName",
    value: function updateName(e) {
      this.name = e;
    }
  }, {
    key: "updateMetadata",
    value: function updateMetadata(e) {
      this.metadata = e;
    }
  }, {
    key: "toString",
    value: function toString() {
      var e, t, i;
      return "{\n      name: ".concat(this.name, ";\n      role: ").concat((e = this.role) == null ? void 0 : e.name, ";\n      peerId: ").concat(this.peerId, ";\n      customerUserId: ").concat(this.customerUserId, ";\n      ").concat(this.audioTrack ? "audioTrack: ".concat((t = this.audioTrack) == null ? void 0 : t.trackId, ";") : "", "\n      ").concat(this.videoTrack ? "videoTrack: ".concat((i = this.videoTrack) == null ? void 0 : i.trackId, ";") : "", "\n    }");
    }
  }]);
  return de;
}();
var Oe = /*#__PURE__*/_createClass(function Oe() {
  _classCallCheck(this, Oe);
});
Oe.makePeerId = function () {
  return (0, _uuid.v4)();
};
var Je = /*#__PURE__*/function (_de) {
  _inherits(Je, _de);
  var _super = _createSuper(Je);
  function Je(e) {
    var _this;
    _classCallCheck(this, Je);
    _this = _super.call(this, D(S({}, e), {
      peerId: Oe.makePeerId(),
      isLocal: !0
    }));
    _this.isLocal = !0;
    _this.auxiliaryTracks = [];
    _this.asRole = e.asRole;
    return _this;
  }
  _createClass(Je, [{
    key: "isInPreview",
    value: function isInPreview() {
      return !!this.asRole;
    }
  }, {
    key: "toString",
    value: function toString() {
      var e, t, i;
      return "{\n      name: ".concat(this.name, ";\n      role: ").concat((e = this.role) == null ? void 0 : e.name, ";\n      peerId: ").concat(this.peerId, ";\n      customerUserId: ").concat(this.customerUserId, ";\n      ").concat(this.asRole ? "asRole: ".concat(this.asRole.name, ";") : "", "\n      ").concat(this.audioTrack ? "audioTrack: ".concat((t = this.audioTrack) == null ? void 0 : t.trackId, ";") : "", "\n      ").concat(this.videoTrack ? "videoTrack: ".concat((i = this.videoTrack) == null ? void 0 : i.trackId, ";") : "", "\n    }");
    }
  }]);
  return Je;
}(de);
var ze = /*#__PURE__*/function (_de2) {
  _inherits(ze, _de2);
  var _super2 = _createSuper(ze);
  function ze(e) {
    var _this2;
    _classCallCheck(this, ze);
    _this2 = _super2.call(this, D(S({}, e), {
      isLocal: !1
    }));
    _this2.isLocal = !1;
    _this2.auxiliaryTracks = [];
    _this2.fromRoomState = !1;
    _this2.fromRoomState = !!e.fromRoomState;
    return _this2;
  }
  return _createClass(ze);
}(de);
var re;
(function (i) {
  i.CUSTOM = "CUSTOM", i.LOCAL = "LOCAL", i.HMS = "HMS";
})(re || (re = {}));
function Mr() {
  if (B && window) {
    var n = window.location.hostname;
    return n === "localhost" || n === "127.0.0.1" ? re.LOCAL : n.includes("app.100ms.live") ? re.HMS : re.CUSTOM;
  }
  return re.CUSTOM;
}
var Pe = Mr();
var Ii = bi().version;
function xe() {
  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : q.PROD;
  var e = arguments.length > 1 ? arguments[1] : undefined;
  var t = "web",
    i = Pe !== re.LOCAL && n === q.PROD ? "prod" : "debug";
  if (Se) return Ri({
    os: "web_nodejs",
    os_version: process.version,
    sdk: t,
    sdk_version: Ii,
    env: i,
    domain: Pe,
    framework: "node",
    framework_version: process.version,
    framework_sdk_version: e == null ? void 0 : e.sdkVersion
  });
  var r = ve.getOS(),
    s = ve.getDevice(),
    a = ve.getBrowser(),
    d = wt("web_".concat(r.name)),
    l = r.version || "",
    u = wt("".concat(a.name, "_").concat(a.version)),
    h = u;
  return s.type && (h = "".concat(wt("".concat(s.vendor, "_").concat(s.type)), "/").concat(u)), Ri({
    os: d,
    os_version: l,
    sdk: t,
    sdk_version: Ii,
    device_model: h,
    env: i,
    domain: Pe,
    framework: e == null ? void 0 : e.type,
    framework_version: e == null ? void 0 : e.version,
    framework_sdk_version: e == null ? void 0 : e.sdkVersion
  });
}
function wt(n) {
  return n.replace(/ /g, "_");
}
var Ri = function Ri(n) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ",";
  return Object.keys(n).filter(function (t) {
    return !!n[t];
  }).map(function (t) {
    return "".concat(t, ":").concat(n[t]);
  }).join(e);
};
var O = /*#__PURE__*/function () {
  function O(_ref3) {
    var e = _ref3.name,
      t = _ref3.level,
      i = _ref3.properties,
      r = _ref3.includesPII,
      s = _ref3.timestamp;
    _classCallCheck(this, O);
    this.metadata = {
      peer: {},
      userAgent: xe()
    };
    this.name = e, this.level = t, this.includesPII = r || !1, this.properties = i || {}, this.timestamp = s || new Date().getTime(), this.event_id = (0, _uuid.v4)(), this.device_id = yi();
  }
  _createClass(O, [{
    key: "toSignalParams",
    value: function toSignalParams() {
      return {
        name: this.name,
        info: D(S({}, this.properties), {
          timestamp: this.timestamp,
          domain: Pe
        }),
        timestamp: new Date().getTime()
      };
    }
  }]);
  return O;
}();
var Qe;
(function (r) {
  r[r.VERBOSE = 0] = "VERBOSE", r[r.INFO = 1] = "INFO", r[r.ERROR = 2] = "ERROR", r[r.OFF = 3] = "OFF";
})(Qe || (Qe = {}));
var _;
(function (r) {
  r[r.VERBOSE = 0] = "VERBOSE", r[r.INFO = 1] = "INFO", r[r.ERROR = 2] = "ERROR", r[r.OFF = 3] = "OFF";
})(_ || (_ = {}));
var T = /*#__PURE__*/function (_Error) {
  _inherits(T, _Error);
  var _super3 = _createSuper(T);
  function T(e, t, i, r, s) {
    var _this3;
    var a = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;
    _classCallCheck(this, T);
    _this3 = _super3.call(this, r);
    _this3.code = e;
    _this3.name = t;
    _this3.message = r;
    _this3.description = s;
    _this3.isTerminal = a;
    Object.setPrototypeOf(_assertThisInitialized(_this3), T.prototype), _this3.action = i.toString();
    return _this3;
  }
  _createClass(T, [{
    key: "toAnalyticsProperties",
    value: function toAnalyticsProperties() {
      return {
        error_name: this.name,
        error_code: this.code,
        error_message: this.message,
        error_description: this.description,
        action: this.action,
        is_terminal: this.isTerminal
      };
    }
  }, {
    key: "addNativeError",
    value: function addNativeError(e) {
      this.nativeError = e;
    }
  }, {
    key: "toString",
    value: function toString() {
      var e;
      return "{\n      code: ".concat(this.code, ";\n      name: ").concat(this.name, ";\n      action: ").concat(this.action, ";\n      message: ").concat(this.message, ";\n      description: ").concat(this.description, ";\n      isTerminal: ").concat(this.isTerminal, ";\n      nativeError: ").concat((e = this.nativeError) == null ? void 0 : e.message, ";\n    }");
    }
  }]);
  return T;
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.HMSException = T;
var w = /*#__PURE__*/function () {
  function w() {
    _classCallCheck(this, w);
  }
  _createClass(w, null, [{
    key: "connect",
    value: function connect(e, t) {
      var _D;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Date();
      var s = arguments.length > 4 ? arguments[4] : undefined;
      var a = this.eventNameFor("connect", e === void 0),
        d = e ? _.ERROR : _.INFO,
        l = this.getPropertiesWithError(D(S({}, t), (_D = {}, _defineProperty(_D, this.KEY_REQUESTED_AT, i == null ? void 0 : i.getTime()), _defineProperty(_D, this.KEY_RESPONDED_AT, r == null ? void 0 : r.getTime()), _defineProperty(_D, "endpoint", s), _D)), e);
      return new O({
        name: a,
        level: d,
        properties: l
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect(e, t) {
      var i = "disconnected",
        r = e ? _.ERROR : _.INFO,
        s = this.getPropertiesWithError(t, e);
      return new O({
        name: i,
        level: r,
        properties: s
      });
    }
  }, {
    key: "preview",
    value: function preview(i) {
      var r = i,
        e = r.error,
        t = Rt(r, ["error"]);
      var s = this.eventNameFor("preview", e === void 0),
        a = e ? _.ERROR : _.INFO,
        d = this.getPropertiesWithError(t, e);
      return new O({
        name: s,
        level: a,
        properties: d
      });
    }
  }, {
    key: "join",
    value: function join(i) {
      var r = i,
        e = r.error,
        t = Rt(r, ["error"]);
      var s = this.eventNameFor("join", e === void 0),
        a = e ? _.ERROR : _.INFO,
        d = this.getPropertiesWithError(D(S({}, t), {
          is_preview_called: !!t.is_preview_called
        }), e);
      return new O({
        name: s,
        level: a,
        properties: d
      });
    }
  }, {
    key: "publish",
    value: function publish(_ref4) {
      var e = _ref4.devices,
        t = _ref4.settings,
        i = _ref4.error;
      var r = this.eventNameFor("publish", i === void 0),
        s = i ? _.ERROR : _.INFO,
        a = this.getPropertiesWithError({
          devices: e,
          audio: t == null ? void 0 : t.audio,
          video: t == null ? void 0 : t.video
        }, i);
      return new O({
        name: r,
        level: s,
        properties: a
      });
    }
  }, {
    key: "hlsPlayerError",
    value: function hlsPlayerError(e) {
      return new O({
        name: "hlsPlayerError",
        level: _.ERROR,
        properties: this.getErrorProperties(e)
      });
    }
  }, {
    key: "subscribeFail",
    value: function subscribeFail(e) {
      var t = this.eventNameFor("subscribe", !1),
        i = _.ERROR,
        r = this.getErrorProperties(e);
      return new O({
        name: t,
        level: i,
        properties: r
      });
    }
  }, {
    key: "leave",
    value: function leave() {
      return new O({
        name: "leave",
        level: _.INFO
      });
    }
  }, {
    key: "autoplayError",
    value: function autoplayError() {
      return new O({
        name: "autoplayError",
        level: _.ERROR
      });
    }
  }, {
    key: "audioPlaybackError",
    value: function audioPlaybackError(e) {
      return new O({
        name: "audioPlaybackError",
        level: _.ERROR,
        properties: this.getErrorProperties(e)
      });
    }
  }, {
    key: "deviceChange",
    value: function deviceChange(_ref5) {
      var e = _ref5.selection,
        t = _ref5.type,
        i = _ref5.devices,
        r = _ref5.error;
      var s = this.eventNameFor(r ? "publish" : "device.".concat(t), r === void 0),
        a = r ? _.ERROR : _.INFO,
        d = this.getPropertiesWithError({
          selection: e,
          devices: i
        }, r);
      return new O({
        name: s,
        level: a,
        properties: d
      });
    }
  }, {
    key: "performance",
    value: function performance(e) {
      var t = "perf.stats",
        i = _.INFO,
        r = e.toAnalyticsProperties();
      return new O({
        name: t,
        level: i,
        properties: r
      });
    }
  }, {
    key: "rtcStats",
    value: function rtcStats(e) {
      var t = "rtc.stats",
        i = _.INFO,
        r = e.toAnalyticsProperties();
      return new O({
        name: t,
        level: i,
        properties: r
      });
    }
  }, {
    key: "degradationStats",
    value: function degradationStats(e, t) {
      var i = "video.degradation.stats",
        r = _.INFO,
        s = {
          degradedAt: e.degradedAt,
          trackId: e.trackId
        };
      if (!t && e.degradedAt instanceof Date) {
        var a = new Date(),
          d = a.valueOf() - e.degradedAt.valueOf();
        s = D(S({}, s), {
          duration: d,
          restoredAt: a
        });
      }
      return new O({
        name: i,
        level: r,
        properties: s
      });
    }
  }, {
    key: "audioDetectionFail",
    value: function audioDetectionFail(e, t) {
      var i = this.getPropertiesWithError({
          device: t
        }, e),
        r = _.ERROR,
        s = "audiopresence.failed";
      return new O({
        name: s,
        level: r,
        properties: i
      });
    }
  }, {
    key: "previewNetworkQuality",
    value: function previewNetworkQuality(e) {
      return new O({
        name: "perf.networkquality.preview",
        level: e.error ? _.ERROR : _.INFO,
        properties: e
      });
    }
  }, {
    key: "eventNameFor",
    value: function eventNameFor(e, t) {
      return "".concat(e, ".").concat(t ? "success" : "failed");
    }
  }, {
    key: "getPropertiesWithError",
    value: function getPropertiesWithError(e, t) {
      var i = this.getErrorProperties(t);
      return e = S(S({}, i), e), e;
    }
  }, {
    key: "getErrorProperties",
    value: function getErrorProperties(e) {
      return e ? e instanceof T ? e.toAnalyticsProperties() : {
        error_name: e.name,
        error_message: e.message,
        error_description: e.cause
      } : {};
    }
  }]);
  return w;
}();
w.KEY_REQUESTED_AT = "requested_at", w.KEY_RESPONDED_AT = "responded_at";
var M;
(function (p) {
  p.INIT = "init_response_time", p.WEBSOCKET_CONNECT = "ws_connect_time", p.ON_POLICY_CHANGE = "on_policy_change_time", p.LOCAL_AUDIO_TRACK = "local_audio_track_time", p.LOCAL_VIDEO_TRACK = "local_video_track_time", p.JOIN = "join_time", p.PREVIEW = "preview_time", p.PEER_LIST = "peer_list_time", p.ROOM_STATE = "room_state_time", p.JOIN_RESPONSE = "join_response_time", p.GET_TOKEN = "GET_TOKEN";
})(M || (M = {}));
var br = [M.INIT, M.WEBSOCKET_CONNECT, M.ON_POLICY_CHANGE, M.LOCAL_AUDIO_TRACK, M.LOCAL_VIDEO_TRACK, M.PEER_LIST, M.ROOM_STATE, M.JOIN_RESPONSE],
  Ht = /*#__PURE__*/function () {
    function Ht() {
      _classCallCheck(this, Ht);
      this.eventPerformanceMeasures = {};
    }
    _createClass(Ht, [{
      key: "start",
      value: function start(e) {
        performance.mark(e);
      }
    }, {
      key: "end",
      value: function end(e) {
        var t;
        try {
          this.eventPerformanceMeasures[e] = performance.measure(e, e), o.d("[HMSPerformanceTiming]", e, (t = this.eventPerformanceMeasures[e]) == null ? void 0 : t.duration);
        } catch (i) {
          o.w("[AnalyticsTimer]", "Error in measuring performance for event ".concat(e), {
            error: i
          });
        }
      }
    }, {
      key: "getTimeTaken",
      value: function getTimeTaken(e) {
        var t;
        return (t = this.eventPerformanceMeasures[e]) == null ? void 0 : t.duration;
      }
    }, {
      key: "getTimes",
      value: function getTimes() {
        var _this4 = this;
        for (var _len7 = arguments.length, e = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          e[_key7] = arguments[_key7];
        }
        return [].concat(br, e).reduce(function (t, i) {
          return D(S({}, t), _defineProperty({}, i, _this4.getTimeTaken(i)));
        }, {});
      }
    }, {
      key: "cleanUp",
      value: function cleanUp() {
        this.eventPerformanceMeasures = {};
      }
    }]);
    return Ht;
  }();
var E = {
  WebSocketConnectionErrors: {
    FAILED_TO_CONNECT: 1e3,
    WEBSOCKET_CONNECTION_LOST: 1003,
    ABNORMAL_CLOSE: 1006
  },
  APIErrors: {
    SERVER_ERRORS: 2e3,
    INIT_CONFIG_NOT_AVAILABLE: 2002,
    ENDPOINT_UNREACHABLE: 2003,
    INVALID_TOKEN_FORMAT: 2004
  },
  TracksErrors: {
    GENERIC_TRACK: 3e3,
    CANT_ACCESS_CAPTURE_DEVICE: 3001,
    DEVICE_NOT_AVAILABLE: 3002,
    DEVICE_IN_USE: 3003,
    DEVICE_LOST_MIDWAY: 3008,
    NOTHING_TO_RETURN: 3005,
    INVALID_VIDEO_SETTINGS: 3006,
    CODEC_CHANGE_NOT_PERMITTED: 3007,
    AUTOPLAY_ERROR: 3008,
    OVER_CONSTRAINED: 3009,
    NO_AUDIO_DETECTED: 3010,
    SYSTEM_DENIED_PERMISSION: 3011,
    CURRENT_TAB_NOT_SHARED: 3012,
    AUDIO_PLAYBACK_ERROR: 3013
  },
  WebrtcErrors: {
    CREATE_OFFER_FAILED: 4001,
    CREATE_ANSWER_FAILED: 4002,
    SET_LOCAL_DESCRIPTION_FAILED: 4003,
    SET_REMOTE_DESCRIPTION_FAILED: 4004,
    ICE_FAILURE: 4005,
    ICE_DISCONNECTED: 4006
  },
  WebsocketMethodErrors: {
    SERVER_ERRORS: 5e3,
    ALREADY_JOINED: 5001,
    CANNOT_JOIN_PREVIEW_IN_PROGRESS: 5002
  },
  GenericErrors: {
    NOT_CONNECTED: 6e3,
    SIGNALLING: 6001,
    UNKNOWN: 6002,
    NOT_READY: 6003,
    JSON_PARSING_FAILED: 6004,
    TRACK_METADATA_MISSING: 6005,
    RTC_TRACK_MISSING: 6006,
    PEER_METADATA_MISSING: 6007,
    INVALID_ROLE: 6008,
    PREVIEW_IN_PROGRESS: 6009,
    MISSING_MEDIADEVICES: 6010,
    MISSING_RTCPEERCONNECTION: 6011
  },
  PlaylistErrors: {
    NO_ENTRY_TO_PLAY: 8001,
    NO_ENTRY_IS_PLAYING: 8002
  }
};
var b;
(function (k) {
  k.JOIN = "join", k.OFFER = "offer", k.ANSWER = "answer", k.TRICKLE = "trickle", k.TRACK_UPDATE = "track-update", k.BROADCAST = "broadcast", k.ANALYTICS = "analytics", k.SERVER_ERROR = "on-error", k.SERVER_WARNING = "on-warning", k.SDK_NOTIFICATION = "sdk-notification", k.LEAVE = "leave", k.END_ROOM = "end-room", k.PING = "ping", k.ROLE_CHANGE_REQUEST = "role-change-request", k.ROLE_CHANGE = "role-change", k.TRACK_UPDATE_REQUEST = "track-update-request", k.PEER_LEAVE_REQUEST = "peer-leave-request", k.CHANGE_TRACK_MUTE_STATE_REQUEST = "change-track-mute-state-request", k.START_RTMP_OR_RECORDING_REQUEST = "rtmp-start", k.STOP_RTMP_AND_RECORDING_REQUEST = "rtmp-stop", k.UPDATE_PEER_METADATA = "peer-update", k.START_HLS_STREAMING = "hls-start", k.STOP_HLS_STREAMING = "hls-stop", k.HLS_TIMED_METADATA = "hls-timed-metadata", k.SET_METADATA = "set-metadata", k.GET_METADATA = "get-metadata", k.LISTEN_METADATA_CHANGE = "listen-metadata-change";
})(b || (b = {}));
function Lt(n) {
  switch (n) {
    case b.JOIN:
      return m.JOIN;
    case b.OFFER:
      return m.PUBLISH;
    case b.ANSWER:
      return m.SUBSCRIBE;
    case b.TRACK_UPDATE:
      return m.TRACK;
    default:
      return m.NONE;
  }
}
var m;
(function (C) {
  C.NONE = "NONE", C.TRACK = "TRACK", C.INIT = "INIT", C.GET_TOKEN = "GET_TOKEN", C.PUBLISH = "PUBLISH", C.UNPUBLISH = "UNPUBLISH", C.JOIN = "JOIN", C.SUBSCRIBE = "SUBSCRIBE", C.DATA_CHANNEL_SEND = "DATA_CHANNEL_SEND", C.RESTART_ICE = "RESTART_ICE", C.VIDEO_PLUGINS = "VIDEO_PLUGINS", C.AUDIO_PLUGINS = "AUDIO_PLUGINS", C.AUTOPLAY = "AUTOPLAY", C.RECONNECT_SIGNAL = "RECONNECT_SIGNAL", C.VALIDATION = "VALIDATION", C.PLAYLIST = "PLAYLIST", C.PREVIEW = "PREVIEW";
})(m || (m = {}));
var Ir = [b.JOIN, b.OFFER, b.ANSWER, b.TRICKLE, m.JOIN],
  g = {
    WebSocketConnectionErrors: {
      FailedToConnect: function FailedToConnect(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebSocketConnectionErrors.FAILED_TO_CONNECT, "WebsocketFailedToConnect", n, "[WS]: ".concat(e), "[WS]: ".concat(e));
      },
      WebSocketConnectionLost: function WebSocketConnectionLost(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, "WebSocketConnectionLost", n, "Network connection lost ", e);
      },
      AbnormalClose: function AbnormalClose(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebSocketConnectionErrors.ABNORMAL_CLOSE, "WebSocketAbnormalClose", n, "Websocket closed abnormally", e);
      }
    },
    APIErrors: {
      ServerErrors: function ServerErrors(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;
        return new T(n, "ServerErrors", e, "[".concat(e, "]: Server error ").concat(t), t, i);
      },
      EndpointUnreachable: function EndpointUnreachable(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.APIErrors.ENDPOINT_UNREACHABLE, "EndpointUnreachable", n, "Endpoint is not reachable - ".concat(e), e);
      },
      InvalidTokenFormat: function InvalidTokenFormat(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.APIErrors.INVALID_TOKEN_FORMAT, "InvalidTokenFormat", n, "Token is not in proper JWT format - ".concat(e), e, !0);
      },
      InitConfigNotAvailable: function InitConfigNotAvailable(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.APIErrors.INIT_CONFIG_NOT_AVAILABLE, "InitError", n, "[INIT]: ".concat(e), "[INIT]: ".concat(e));
      }
    },
    TracksErrors: {
      GenericTrack: function GenericTrack(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.TracksErrors.GENERIC_TRACK, "GenericTrack", n, "[TRACK]: ".concat(e), "[TRACK]: ".concat(e));
      },
      CantAccessCaptureDevice: function CantAccessCaptureDevice(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, "CantAccessCaptureDevice", n, "User denied permission to access capture device - ".concat(e), t);
      },
      DeviceNotAvailable: function DeviceNotAvailable(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.DEVICE_NOT_AVAILABLE, "DeviceNotAvailable", n, "[TRACK]: Capture device is no longer available - ".concat(e), t);
      },
      DeviceInUse: function DeviceInUse(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.DEVICE_IN_USE, "DeviceInUse", n, "[TRACK]: Capture device is in use by another application - ".concat(e), t);
      },
      DeviceLostMidway: function DeviceLostMidway(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.DEVICE_LOST_MIDWAY, "DeviceLostMidway", n, "Lost access to capture device midway - ".concat(e), t);
      },
      NothingToReturn: function NothingToReturn(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "There is no media to return. Please select either video or audio or both.";
        return new T(E.TracksErrors.NOTHING_TO_RETURN, "NothingToReturn", n, t, e);
      },
      InvalidVideoSettings: function InvalidVideoSettings(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.TracksErrors.INVALID_VIDEO_SETTINGS, "InvalidVideoSettings", n, "Cannot enable simulcast when no video settings are provided", e);
      },
      AutoplayBlocked: function AutoplayBlocked(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.TracksErrors.AUTOPLAY_ERROR, "AutoplayBlocked", n, "Autoplay blocked because the user didn't interact with the document first", e);
      },
      CodecChangeNotPermitted: function CodecChangeNotPermitted(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.TracksErrors.CODEC_CHANGE_NOT_PERMITTED, "CodecChangeNotPermitted", n, "Codec can't be changed mid call.", e);
      },
      OverConstrained: function OverConstrained(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.OVER_CONSTRAINED, "OverConstrained", n, "[TRACK]: Requested constraints cannot be satisfied with the device hardware - ".concat(e), t);
      },
      NoAudioDetected: function NoAudioDetected(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Please check the mic or use another audio input";
        return new T(E.TracksErrors.NO_AUDIO_DETECTED, "NoAudioDetected", n, "No audio input detected from microphone", e);
      },
      SystemDeniedPermission: function SystemDeniedPermission(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.TracksErrors.SYSTEM_DENIED_PERMISSION, "SystemDeniedPermission", n, "Operating System denied permission to access capture device - ".concat(e), t);
      },
      CurrentTabNotShared: function CurrentTabNotShared() {
        return new T(E.TracksErrors.CURRENT_TAB_NOT_SHARED, "CurrentTabNotShared", m.TRACK, "The app requires you to share the current tab", "You must screen share the current tab in order to proceed");
      },
      AudioPlaybackError: function AudioPlaybackError(n) {
        return new T(E.TracksErrors.AUDIO_PLAYBACK_ERROR, "Audio playback error", m.TRACK, n, n);
      }
    },
    WebrtcErrors: {
      CreateOfferFailed: function CreateOfferFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.CREATE_OFFER_FAILED, "CreateOfferFailed", n, "[".concat(n.toString(), "]: Failed to create offer. "), e);
      },
      CreateAnswerFailed: function CreateAnswerFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.CREATE_ANSWER_FAILED, "CreateAnswerFailed", n, "[".concat(n.toString(), "]: Failed to create answer. "), e);
      },
      SetLocalDescriptionFailed: function SetLocalDescriptionFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.SET_LOCAL_DESCRIPTION_FAILED, "SetLocalDescriptionFailed", n, "[".concat(n.toString(), "]: Failed to set offer. "), e);
      },
      SetRemoteDescriptionFailed: function SetRemoteDescriptionFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.SET_REMOTE_DESCRIPTION_FAILED, "SetRemoteDescriptionFailed", n, "[".concat(n.toString(), "]: Failed to set answer. "), e, !0);
      },
      ICEFailure: function ICEFailure(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.ICE_FAILURE, "ICEFailure", n, "[".concat(n.toString(), "]: Ice connection state FAILED"), e);
      },
      ICEDisconnected: function ICEDisconnected(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebrtcErrors.ICE_DISCONNECTED, "ICEDisconnected", n, "[".concat(n.toString(), "]: Ice connection state DISCONNECTED"), e);
      }
    },
    WebsocketMethodErrors: {
      ServerErrors: function ServerErrors(n, e, t) {
        return new T(n, "ServerErrors", e, t, t, Ir.includes(e));
      },
      AlreadyJoined: function AlreadyJoined(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebsocketMethodErrors.ALREADY_JOINED, "AlreadyJoined", n, "[JOIN]: You have already joined this room.", e);
      },
      CannotJoinPreviewInProgress: function CannotJoinPreviewInProgress(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.WebsocketMethodErrors.CANNOT_JOIN_PREVIEW_IN_PROGRESS, "CannotJoinPreviewInProgress", n, "[JOIN]: Cannot join if preview is in progress", e);
      }
    },
    GenericErrors: {
      NotConnected: function NotConnected(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.NOT_CONNECTED, "NotConnected", n, "Client is not connected", e);
      },
      Signalling: function Signalling(n, e) {
        return new T(E.GenericErrors.SIGNALLING, "Signalling", n, "Unknown signalling error: ".concat(n.toString(), " ").concat(e, " "), e);
      },
      Unknown: function Unknown(n, e) {
        return new T(E.GenericErrors.UNKNOWN, "Unknown", n, "Unknown exception: ".concat(e), e);
      },
      NotReady: function NotReady(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.NOT_READY, "NotReady", n, e, e);
      },
      JsonParsingFailed: function JsonParsingFailed(n, e) {
        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return new T(E.GenericErrors.JSON_PARSING_FAILED, "JsonParsingFailed", n, "Failed to parse JSON message - ".concat(e), t);
      },
      TrackMetadataMissing: function TrackMetadataMissing(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.TRACK_METADATA_MISSING, "TrackMetadataMissing", n, "Track Metadata Missing", e);
      },
      RTCTrackMissing: function RTCTrackMissing(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.RTC_TRACK_MISSING, "RTCTrackMissing", n, "RTC Track missing", e);
      },
      PeerMetadataMissing: function PeerMetadataMissing(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.PEER_METADATA_MISSING, "PeerMetadataMissing", n, "Peer Metadata Missing", e);
      },
      ValidationFailed: function ValidationFailed(n, e) {
        return new T(E.GenericErrors.INVALID_ROLE, "ValidationFailed", m.VALIDATION, n, e ? JSON.stringify(e) : "");
      },
      InvalidRole: function InvalidRole(n, e) {
        return new T(E.GenericErrors.INVALID_ROLE, "InvalidRole", n, "Invalid role. Join with valid role", e, !0);
      },
      PreviewAlreadyInProgress: function PreviewAlreadyInProgress(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(E.GenericErrors.PREVIEW_IN_PROGRESS, "PreviewAlreadyInProgress", n, "[Preview]: Cannot join if preview is in progress", e);
      },
      MissingMediaDevices: function MissingMediaDevices() {
        return new T(E.GenericErrors.MISSING_MEDIADEVICES, "MissingMediaDevices", m.JOIN, "navigator.mediaDevices is undefined. 100ms SDK won't work on this website as WebRTC is not supported on HTTP endpoints(missing navigator.mediaDevices). Please ensure you're using the SDK either on localhost or a valid HTTPS endpoint.", "", !0);
      },
      MissingRTCPeerConnection: function MissingRTCPeerConnection() {
        return new T(E.GenericErrors.MISSING_RTCPEERCONNECTION, "MissingRTCPeerConnection", m.JOIN, "RTCPeerConnection which is a core requirement for WebRTC call was not found, this could be due to an unsupported browser or browser extensions blocking WebRTC", "", !0);
      }
    },
    MediaPluginErrors: {
      PlatformNotSupported: function PlatformNotSupported(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(7001, "PlatformNotSupported", n, "Check HMS Docs to see the list of supported platforms", e);
      },
      InitFailed: function InitFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(7002, "InitFailed", n, "Plugin init failed", e);
      },
      ProcessingFailed: function ProcessingFailed(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(7003, "ProcessingFailed", n, "Plugin processing failed", e);
      },
      AddAlreadyInProgress: function AddAlreadyInProgress(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(7004, "AddAlreadyInProgress", n, "Plugin add already in progress", e);
      },
      DeviceNotSupported: function DeviceNotSupported(n) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        return new T(7005, "DeviceNotSupported", n, "Check HMS Docs to see the list of supported devices", e);
      }
    },
    PlaylistErrors: {
      NoEntryToPlay: function NoEntryToPlay(n, e) {
        return new T(E.PlaylistErrors.NO_ENTRY_TO_PLAY, "NoEntryToPlay", n, "Reached end of playlist", e);
      },
      NoEntryPlaying: function NoEntryPlaying(n, e) {
        return new T(E.PlaylistErrors.NO_ENTRY_IS_PLAYING, "NoEntryIsPlaying", n, "No entry is playing at this time", e);
      }
    }
  };
var J;
(function (s) {
  s.UNKNOWN = "unknown(video or audio)", s.AUDIO = "audio", s.VIDEO = "video", s.AV = "audio, video", s.SCREEN = "screen";
})(J || (J = {}));
function Rr(n, e) {
  var t = n.toLowerCase();
  return t.includes("device not found") ? g.TracksErrors.DeviceNotAvailable(m.TRACK, e, n) : t.includes("permission denied") ? g.TracksErrors.CantAccessCaptureDevice(m.TRACK, e, n) : g.TracksErrors.GenericTrack(m.TRACK, n);
}
function Cr(n) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  if (_webrtcAdapter.default.browserDetails.browser === "chrome" && n.name === "NotAllowedError" && n.message.includes("denied by system")) return g.TracksErrors.SystemDeniedPermission(m.TRACK, e, n.message);
  if (_webrtcAdapter.default.browserDetails.browser === "firefox" && n.name === "NotFoundError") {
    var i = g.TracksErrors.SystemDeniedPermission(m.TRACK, e, n.message);
    return i.description = "Capture device is either blocked at Operating System level or not available - ".concat(e), i;
  }
  switch (n.name) {
    case "OverconstrainedError":
      return g.TracksErrors.OverConstrained(m.TRACK, e, n.constraint);
    case "NotAllowedError":
      return g.TracksErrors.CantAccessCaptureDevice(m.TRACK, e, n.message);
    case "NotFoundError":
      return g.TracksErrors.DeviceNotAvailable(m.TRACK, e, n.message);
    case "NotReadableError":
      return g.TracksErrors.DeviceInUse(m.TRACK, e, n.message);
    case "TypeError":
      return g.TracksErrors.NothingToReturn(m.TRACK, n.message);
    default:
      return Rr(n.message, e);
  }
}
function te(n, e) {
  var t = Cr(n, e);
  return t.addNativeError(n), t;
}
var le;
exports.HMSRoomUpdate = le;
(function (s) {
  s.RECORDING_STATE_UPDATED = "RECORDING_STATE_UPDATED", s.BROWSER_RECORDING_STATE_UPDATED = "BROWSER_RECORDING_STATE_UPDATED", s.SERVER_RECORDING_STATE_UPDATED = "SERVER_RECORDING_STATE_UPDATED", s.RTMP_STREAMING_STATE_UPDATED = "RTMP_STREAMING_STATE_UPDATED", s.HLS_STREAMING_STATE_UPDATED = "HLS_STREAMING_STATE_UPDATED";
})(le || (exports.HMSRoomUpdate = le = {}));
var z;
exports.HMSPeerUpdate = z;
(function (v) {
  v[v.PEER_JOINED = 0] = "PEER_JOINED", v[v.PEER_LEFT = 1] = "PEER_LEFT", v[v.AUDIO_TOGGLED = 2] = "AUDIO_TOGGLED", v[v.VIDEO_TOGGLED = 3] = "VIDEO_TOGGLED", v[v.BECAME_DOMINANT_SPEAKER = 4] = "BECAME_DOMINANT_SPEAKER", v[v.RESIGNED_DOMINANT_SPEAKER = 5] = "RESIGNED_DOMINANT_SPEAKER", v[v.STARTED_SPEAKING = 6] = "STARTED_SPEAKING", v[v.STOPPED_SPEAKING = 7] = "STOPPED_SPEAKING", v[v.ROLE_UPDATED = 8] = "ROLE_UPDATED", v[v.PEER_LIST = 9] = "PEER_LIST", v[v.NAME_UPDATED = 10] = "NAME_UPDATED", v[v.METADATA_UPDATED = 11] = "METADATA_UPDATED";
})(z || (exports.HMSPeerUpdate = z = {}));
var N;
exports.HMSTrackUpdate = N;
(function (d) {
  d[d.TRACK_ADDED = 0] = "TRACK_ADDED", d[d.TRACK_REMOVED = 1] = "TRACK_REMOVED", d[d.TRACK_MUTED = 2] = "TRACK_MUTED", d[d.TRACK_UNMUTED = 3] = "TRACK_UNMUTED", d[d.TRACK_DESCRIPTION_CHANGED = 4] = "TRACK_DESCRIPTION_CHANGED", d[d.TRACK_DEGRADED = 5] = "TRACK_DEGRADED", d[d.TRACK_RESTORED = 6] = "TRACK_RESTORED";
})(N || (exports.HMSTrackUpdate = N = {}));
var F;
exports.HMSSimulcastLayer = F;
(function (r) {
  r.NONE = "none", r.LOW = "low", r.MEDIUM = "medium", r.HIGH = "high";
})(F || (exports.HMSSimulcastLayer = F = {}));
var _t = {
  f: F.HIGH,
  h: F.MEDIUM,
  q: F.LOW
};
exports.simulcastMapping = _t;
var Ye;
exports.HMSVideoCodec = Ye;
(function (i) {
  i.VP8 = "vp8", i.VP9 = "vp9", i.H264 = "h264";
})(Ye || (exports.HMSVideoCodec = Ye = {}));
var Xe;
exports.HMSAudioCodec = Xe;
(function (e) {
  e.OPUS = "opus";
})(Xe || (exports.HMSAudioCodec = Xe = {}));
var be;
exports.HMSFacingMode = be;
(function (r) {
  r.USER = "user", r.ENVIRONMENT = "environment", r.LEFT = "left", r.RIGHT = "right";
})(be || (exports.HMSFacingMode = be = {}));
var wi;
exports.DeviceType = wi;
(function (i) {
  i.videoInput = "videoInput", i.audioInput = "audioInput", i.audioOutput = "audioOutput";
})(wi || (exports.DeviceType = wi = {}));
var I;
exports.HMSPlaylistType = I;
(function (t) {
  t.audio = "audio", t.video = "video";
})(I || (exports.HMSPlaylistType = I = {}));
var Z = /*#__PURE__*/function () {
    function Z() {
      _classCallCheck(this, Z);
      this._volume = 1;
      this._codec = Xe.OPUS;
      this._maxBitrate = 32;
      this._deviceId = "default";
      this._advanced = [{
        googEchoCancellation: {
          exact: !0
        }
      }, {
        googExperimentalEchoCancellation: {
          exact: !0
        }
      }, {
        autoGainControl: {
          exact: !0
        }
      }, {
        noiseSuppression: {
          exact: !0
        }
      }, {
        googHighpassFilter: {
          exact: !0
        }
      }, {
        googAudioMirroring: {
          exact: !0
        }
      }];
    }
    _createClass(Z, [{
      key: "volume",
      value: function volume(e) {
        if (!(0 <= e && e <= 1)) throw Error("volume can only be in range [0.0, 1.0]");
        return this._volume = e, this;
      }
    }, {
      key: "codec",
      value: function codec(e) {
        return this._codec = e, this;
      }
    }, {
      key: "maxBitrate",
      value: function maxBitrate(e) {
        if (e && e <= 0) throw Error("maxBitrate should be >= 1");
        return this._maxBitrate = e, this;
      }
    }, {
      key: "deviceId",
      value: function deviceId(e) {
        return this._deviceId = e, this;
      }
    }, {
      key: "advanced",
      value: function advanced(e) {
        return this._advanced = e, this;
      }
    }, {
      key: "build",
      value: function build() {
        return new Ie(this._volume, this._codec, this._maxBitrate, this._deviceId, this._advanced);
      }
    }]);
    return Z;
  }(),
  Ie = /*#__PURE__*/function () {
    function Ie(e, t, i, r, s) {
      _classCallCheck(this, Ie);
      this.volume = e, this.codec = t, this.maxBitrate = i, this.deviceId = r, this.advanced = s;
    }
    _createClass(Ie, [{
      key: "toConstraints",
      value: function toConstraints() {
        return {
          deviceId: this.deviceId,
          advanced: this.advanced
        };
      }
    }, {
      key: "toAnalyticsProperties",
      value: function toAnalyticsProperties() {
        return {
          audio_bitrate: this.maxBitrate,
          audio_codec: this.codec
        };
      }
    }]);
    return Ie;
  }();
var Y = /*#__PURE__*/function () {
    function Y() {
      _classCallCheck(this, Y);
      this._width = 320;
      this._height = 180;
      this._codec = Ye.VP8;
      this._maxFramerate = 30;
      this._maxBitrate = 150;
      this._advanced = [];
    }
    _createClass(Y, [{
      key: "setWidth",
      value: function setWidth(e) {
        return this._width = e, this;
      }
    }, {
      key: "setHeight",
      value: function setHeight(e) {
        return this._height = e, this;
      }
    }, {
      key: "codec",
      value: function codec(e) {
        return this._codec = e, this;
      }
    }, {
      key: "maxFramerate",
      value: function maxFramerate(e) {
        if (e && e <= 0) throw Error("maxFramerate should be >= 1");
        return this._maxFramerate = e, this;
      }
    }, {
      key: "maxBitrate",
      value: function maxBitrate(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        if (typeof e == "number" && e <= 0) throw Error("maxBitrate should be >= 1");
        return this._maxBitrate = e, !this._maxBitrate && t && (this._maxBitrate = 15e4), this;
      }
    }, {
      key: "deviceId",
      value: function deviceId(e) {
        return this._deviceId = e, this;
      }
    }, {
      key: "advanced",
      value: function advanced(e) {
        return this._advanced = e, this;
      }
    }, {
      key: "facingMode",
      value: function facingMode(e) {
        return this._facingMode = e, this;
      }
    }, {
      key: "build",
      value: function build() {
        return new Re(this._width, this._height, this._codec, this._maxFramerate, this._deviceId, this._advanced, this._maxBitrate, this._facingMode);
      }
    }]);
    return Y;
  }(),
  Re = /*#__PURE__*/function () {
    function Re(e, t, i, r, s, a, d, l) {
      _classCallCheck(this, Re);
      this.width = e, this.height = t, this.codec = i, this.maxFramerate = r, this.maxBitrate = d, this.deviceId = s, this.advanced = a, this.facingMode = l;
    }
    _createClass(Re, [{
      key: "toConstraints",
      value: function toConstraints(e) {
        var t = "ideal";
        return e && (t = "max"), {
          width: _defineProperty({}, t, this.width),
          height: _defineProperty({}, t, this.height),
          frameRate: this.maxFramerate,
          deviceId: this.deviceId,
          facingMode: this.facingMode
        };
      }
    }, {
      key: "toAnalyticsProperties",
      value: function toAnalyticsProperties() {
        return {
          width: this.width,
          height: this.height,
          video_bitrate: this.maxBitrate,
          framerate: this.maxFramerate,
          video_codec: this.codec,
          facingMode: this.facingMode
        };
      }
    }]);
    return Re;
  }();
var Ze = /*#__PURE__*/function () {
    function Ze() {
      _classCallCheck(this, Ze);
      this._video = new Y().build();
      this._audio = new Z().build();
      this._screen = new Y().build();
      this._simulcast = !1;
    }
    _createClass(Ze, [{
      key: "video",
      value: function video(e) {
        return this._video = e, this;
      }
    }, {
      key: "audio",
      value: function audio(e) {
        return this._audio = e, this;
      }
    }, {
      key: "screen",
      value: function screen(e) {
        return this._screen = e, this;
      }
    }, {
      key: "simulcast",
      value: function simulcast(e) {
        return this._simulcast = e, this;
      }
    }, {
      key: "build",
      value: function build() {
        if (this._audio === null && this._video === null) throw g.TracksErrors.NothingToReturn(m.TRACK);
        if (this._video === null && this._simulcast) throw g.TracksErrors.InvalidVideoSettings(m.TRACK, "Cannot enable simulcast when no video settings are provided");
        return new Fe(this._video, this._audio, this._simulcast, this._screen || void 0);
      }
    }]);
    return Ze;
  }(),
  Fe = /*#__PURE__*/function () {
    function Fe(e, t, i) {
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      _classCallCheck(this, Fe);
      this.video = e, this.audio = t, this.simulcast = i, this.screen = r;
    }
    _createClass(Fe, [{
      key: "toAnalyticsProperties",
      value: function toAnalyticsProperties() {
        var e = {
          audio_enabled: this.audio !== null,
          video_enabled: this.video !== null
        };
        return this.audio && (e = S(S({}, this.audio.toAnalyticsProperties()), e)), this.video && (e = S(S({}, this.video.toAnalyticsProperties()), e)), e;
      }
    }]);
    return Fe;
  }();
var Ce = /*#__PURE__*/_createClass(function Ce(e) {
  _classCallCheck(this, Ce);
  this.tracks = new Array();
  this.nativeStream = e, this.id = e.id;
});
var ue = function ue(n) {
  return n ? "{\n    trackId: ".concat(n.id, ";\n    kind: ").concat(n.kind, ";\n    enabled: ").concat(n.enabled, ";\n    muted: ").concat(n.muted, ";\n    readyState: ").concat(n.readyState, ";\n  }") : "";
};
var Te = /*#__PURE__*/function () {
  function Te(e, t, i) {
    _classCallCheck(this, Te);
    this.logIdentifier = "";
    this.stream = e, this.nativeTrack = t, this.source = i;
  }
  _createClass(Te, [{
    key: "enabled",
    get: function get() {
      return this.nativeTrack.enabled;
    }
  }, {
    key: "trackId",
    get: function get() {
      return this.firstTrackId || this.sdpTrackId || this.nativeTrack.id;
    }
  }, {
    key: "getMediaTrackSettings",
    value: function getMediaTrackSettings() {
      return this.nativeTrack.getSettings();
    }
  }, {
    key: "setEnabled",
    value: function setEnabled(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.nativeTrack.enabled = e;
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "setSdpTrackId",
    value: function setSdpTrackId(e) {
      this.sdpTrackId = e;
    }
  }, {
    key: "setFirstTrackId",
    value: function setFirstTrackId(e) {
      this.firstTrackId = e;
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      var e;
      o.d("[HMSTrack]", "Stopping track", this.toString()), (e = this.nativeTrack) == null || e.stop();
    }
  }, {
    key: "toString",
    value: function toString() {
      var e;
      return "{\n      streamId: ".concat(this.stream.id, ";\n      peerId: ").concat(this.peerId, ";\n      trackId: ").concat(this.trackId, ";\n      mid: ").concat(((e = this.transceiver) == null ? void 0 : e.mid) || "-", ";\n      logIdentifier: ").concat(this.logIdentifier, ";\n      source: ").concat(this.source, ";\n      enabled: ").concat(this.enabled, ";\n      nativeTrack: ").concat(ue(this.nativeTrack), ";\n    }");
    }
  }]);
  return Te;
}();
exports.HMSTrack = Te;
var x;
exports.HMSTrackType = x;
(function (t) {
  t.AUDIO = "audio", t.VIDEO = "video";
})(x || (exports.HMSTrackType = x = {}));
var we = /*#__PURE__*/function (_Ce) {
  _inherits(we, _Ce);
  var _super4 = _createSuper(we);
  function we(e, t) {
    var _this5;
    _classCallCheck(this, we);
    _this5 = _super4.call(this, e);
    _this5.audio = !0;
    _this5.video = F.NONE;
    _this5.connection = t;
    return _this5;
  }
  _createClass(we, [{
    key: "setAudio",
    value: function setAudio(e, t, i) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = this.audio !== e;
              if (!_context2.t0) {
                _context2.next = 6;
                break;
              }
              this.audio = e;
              o.d("[Remote stream] ".concat(i || "", " \n    streamId=").concat(this.id, "\n    trackId=").concat(t, "\n    subscribing audio - ").concat(this.audio));
              _context2.next = 6;
              return this.connection.sendOverApiDataChannelWithResponse({
                params: {
                  subscribed: this.audio,
                  track_id: t
                },
                method: "prefer-audio-track-state"
              });
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "setVideoLayerLocally",
    value: function setVideoLayerLocally(e, t, i) {
      this.video = e, o.d("[Remote stream] ".concat(t, "\n    streamId=").concat(this.id, "\n    source: ").concat(i, "\n    Setting layer field to=").concat(e));
    }
  }, {
    key: "setVideoLayer",
    value: function setVideoLayer(e, t, i, r) {
      return o.d("[Remote stream] ".concat(i, " \n      streamId=").concat(this.id, "\n      trackId=").concat(t, " \n      source: ").concat(r, " request ").concat(e, " layer")), this.setVideoLayerLocally(e, i, r), this.connection.sendOverApiDataChannelWithResponse({
        params: {
          max_spatial_layer: this.video,
          track_id: t
        },
        method: "prefer-video-track-state"
      });
    }
  }, {
    key: "getSimulcastLayer",
    value: function getSimulcastLayer() {
      return this.video;
    }
  }, {
    key: "getVideoLayer",
    value: function getVideoLayer() {
      return this.video;
    }
  }, {
    key: "isAudioSubscribed",
    value: function isAudioSubscribed() {
      return this.audio;
    }
  }]);
  return we;
}(Ce);
var Ve = /*#__PURE__*/function (_Te) {
  _inherits(Ve, _Te);
  var _super5 = _createSuper(Ve);
  function Ve(e, t, i) {
    var _this6;
    _classCallCheck(this, Ve);
    _this6 = _super5.call(this, e, t, i);
    _this6.type = x.AUDIO;
    _this6.audioElement = null;
    if (t.kind !== "audio") throw new Error("Expected 'track' kind = 'audio'");
    return _this6;
  }
  _createClass(Ve, [{
    key: "getVolume",
    value: function getVolume() {
      return this.audioElement ? this.audioElement.volume * 100 : null;
    }
  }, {
    key: "setVolume",
    value: function setVolume(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(e < 0 || e > 100)) {
                _context3.next = 2;
                break;
              }
              throw Error("Please pass a valid number between 0-100");
            case 2:
              _context3.next = 4;
              return this.subscribeToAudio(e === 0 ? !1 : this.enabled);
            case 4:
              this.audioElement && (this.audioElement.volume = e / 100);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
    }
  }, {
    key: "setAudioElement",
    value: function setAudioElement(e) {
      o.d("[HMSAudioTrack]", this.logIdentifier, "adding audio element", "".concat(this), e), this.audioElement = e;
    }
  }, {
    key: "getAudioElement",
    value: function getAudioElement() {
      return this.audioElement;
    }
  }, {
    key: "getOutputDevice",
    value: function getOutputDevice() {
      return this.outputDevice;
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      _get(_getPrototypeOf(Ve.prototype), "cleanup", this).call(this), this.audioElement && (this.audioElement.srcObject = null, this.audioElement.remove(), this.audioElement = null);
    }
  }, {
    key: "setOutputDevice",
    value: function setOutputDevice(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var t;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (e) {
                _context4.next = 3;
                break;
              }
              o.d("[HMSAudioTrack]", this.logIdentifier, "device is null", "".concat(this));
              return _context4.abrupt("return");
            case 3:
              if (this.audioElement) {
                _context4.next = 6;
                break;
              }
              o.d("[HMSAudioTrack]", this.logIdentifier, "no audio element to set output", "".concat(this)), this.outputDevice = e;
              return _context4.abrupt("return");
            case 6:
              _context4.prev = 6;
              _context4.t0 = typeof this.audioElement.setSinkId == "function";
              if (!_context4.t0) {
                _context4.next = 12;
                break;
              }
              _context4.next = 11;
              return (t = this.audioElement) == null ? void 0 : t.setSinkId(e.deviceId);
            case 11:
              this.outputDevice = e;
            case 12:
              _context4.next = 17;
              break;
            case 14:
              _context4.prev = 14;
              _context4.t1 = _context4["catch"](6);
              o.d("[HMSAudioTrack]", "error in setSinkId", _context4.t1);
            case 17:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[6, 14]]);
      }));
    }
  }, {
    key: "subscribeToAudio",
    value: function subscribeToAudio(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = this.stream instanceof we;
              if (!_context5.t0) {
                _context5.next = 4;
                break;
              }
              _context5.next = 4;
              return this.stream.setAudio(e, this.trackId, this.logIdentifier);
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
    }
  }]);
  return Ve;
}(Te);
exports.HMSAudioTrack = Ve;
var Hi = /*#__PURE__*/function () {
    function Hi() {
      _classCallCheck(this, Hi);
      this.storage = new ie("hms-device-selection");
      this.remember = !1;
      this.TAG = "[HMSDeviceStorage]";
    }
    _createClass(Hi, [{
      key: "setDevices",
      value: function setDevices(e) {
        this.devices = e;
      }
    }, {
      key: "rememberDevices",
      value: function rememberDevices(e) {
        this.remember = e;
      }
    }, {
      key: "updateSelection",
      value: function updateSelection(e, _ref6) {
        var _this7 = this;
        var t = _ref6.deviceId,
          i = _ref6.groupId;
        if (!this.devices || !this.remember) return;
        var r = this.devices[e].find(function (a) {
          return _this7.isSame({
            deviceId: t,
            groupId: i
          }, a);
        });
        if (!r) {
          o.w(this.TAG, "Could not find device with deviceId: ".concat(t, ", groupId: ").concat(i));
          return;
        }
        var s = this.storage.get() || {};
        s[e] = r, this.storage.set(s);
      }
    }, {
      key: "getSelection",
      value: function getSelection() {
        if (!!this.remember) return this.storage.get();
      }
    }, {
      key: "cleanup",
      value: function cleanup() {
        this.remember = !1, this.devices = void 0;
      }
    }, {
      key: "isSame",
      value: function isSame(e, t) {
        return e.deviceId === t.deviceId && (e.groupId === t.groupId || !e.groupId);
      }
    }]);
    return Hi;
  }(),
  Q = new Hi();
var Dt;
exports.HMSAudioPluginType = Dt;
(function (t) {
  t.TRANSFORM = "TRANSFORM", t.ANALYZE = "ANALYZE";
})(Dt || (exports.HMSAudioPluginType = Dt = {}));
var se;
exports.HMSPluginUnsupportedTypes = se;
(function (t) {
  t.PLATFORM_NOT_SUPPORTED = "PLATFORM_NOT_SUPPORTED", t.DEVICE_NOT_SUPPORTED = "DEVICE_NOT_SUPPORTED";
})(se || (exports.HMSPluginUnsupportedTypes = se = {}));
var he = /*#__PURE__*/function () {
  function he() {
    _classCallCheck(this, he);
  }
  _createClass(he, null, [{
    key: "failure",
    value: function failure(e, t) {
      var i = "mediaPlugin.failed",
        r = _.ERROR,
        s = S({
          plugin_name: e
        }, t.toAnalyticsProperties());
      return new O({
        name: i,
        level: r,
        properties: s
      });
    }
  }, {
    key: "audioPluginFailure",
    value: function audioPluginFailure(e, t, i) {
      var r = "mediaPlugin.failed",
        s = _.ERROR,
        a = S({
          plugin_name: e,
          sampleRate: t
        }, i.toAnalyticsProperties());
      return new O({
        name: r,
        level: s,
        properties: a
      });
    }
  }, {
    key: "audioPluginStats",
    value: function audioPluginStats(_ref7) {
      var e = _ref7.pluginName,
        t = _ref7.duration,
        i = _ref7.loadTime,
        r = _ref7.sampleRate;
      var s = "mediaPlugin.stats",
        a = _.INFO,
        d = {
          plugin_name: e,
          duration: t,
          load_time: i,
          sampleRate: r
        };
      return new O({
        name: s,
        level: a,
        properties: d
      });
    }
  }, {
    key: "stats",
    value: function stats(_ref8) {
      var e = _ref8.pluginName,
        t = _ref8.duration,
        i = _ref8.loadTime,
        r = _ref8.avgPreProcessingTime,
        s = _ref8.avgProcessingTime,
        a = _ref8.inputFrameRate,
        d = _ref8.pluginFrameRate;
      var l = "mediaPlugin.stats",
        u = _.INFO,
        h = {
          plugin_name: e,
          duration: t,
          load_time: i,
          avg_preprocessing_time: r,
          avg_processing_time: s,
          input_frame_rate: a,
          plugin_frame_rate: d
        };
      return new O({
        name: l,
        level: u,
        properties: h
      });
    }
  }]);
  return he;
}();
var Nt = /*#__PURE__*/function () {
  function Nt(e) {
    _classCallCheck(this, Nt);
    this.eventBus = e;
    this.TAG = "[AudioPluginsAnalytics]";
    this.initTime = {}, this.addedTimestamps = {}, this.pluginAdded = {}, this.pluginSampleRate = {};
  }
  _createClass(Nt, [{
    key: "added",
    value: function added(e, t) {
      this.pluginAdded[e] = !0, this.addedTimestamps[e] = Date.now(), this.initTime[e] = 0, this.pluginSampleRate[e] = t;
    }
  }, {
    key: "removed",
    value: function removed(e) {
      if (this.pluginAdded[e]) {
        var t = {
          pluginName: e,
          duration: Math.floor((Date.now() - this.addedTimestamps[e]) / 1e3),
          loadTime: this.initTime[e],
          sampleRate: this.pluginSampleRate[e]
        };
        this.eventBus.analytics.publish(he.audioPluginStats(t)), this.clean(e);
      }
    }
  }, {
    key: "failure",
    value: function failure(e, t) {
      this.pluginAdded[e] && (this.eventBus.analytics.publish(he.audioPluginFailure(e, this.pluginSampleRate[e], t)), this.clean(e));
    }
  }, {
    key: "initWithTime",
    value: function initWithTime(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var i, s;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!this.initTime[e]) {
                _context6.next = 3;
                break;
              }
              o.i(this.TAG, "Plugin Already loaded ".concat(e, ", time it took: ").concat(this.initTime[e]));
              return _context6.abrupt("return");
            case 3:
              _context6.prev = 3;
              _context6.next = 6;
              return this.timeInMs(t);
            case 6:
              i = _context6.sent;
              o.i(this.TAG, "Time taken for Plugin ".concat(e, " initialization : ").concat(i));
              _context6.next = 14;
              break;
            case 10:
              _context6.prev = 10;
              _context6.t0 = _context6["catch"](3);
              s = g.MediaPluginErrors.InitFailed(m.AUDIO_PLUGINS, "failed during initialization of plugin".concat(_context6.t0.message || _context6.t0));
              throw o.e(this.TAG, s), this.failure(e, s), s;
            case 14:
              i && (this.initTime[e] = i);
            case 15:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[3, 10]]);
      }));
    }
  }, {
    key: "timeInMs",
    value: function timeInMs(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var t;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              t = Date.now();
              _context7.next = 3;
              return e();
            case 3:
              return _context7.abrupt("return", Math.floor(Date.now() - t));
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
    }
  }, {
    key: "clean",
    value: function clean(e) {
      delete this.addedTimestamps[e], delete this.initTime[e], delete this.pluginAdded[e], delete this.pluginSampleRate[e];
    }
  }]);
  return Nt;
}();
var wr = 48e3,
  Hr = function Hr() {
    return navigator.userAgent.indexOf("Firefox") !== -1;
  },
  et = /*#__PURE__*/function () {
    function et(e, t) {
      _classCallCheck(this, et);
      this.TAG = "[AudioPluginsManager]";
      this.pluginAddInProgress = !1;
      this.hmsTrack = e, this.pluginsMap = new Map(), this.analytics = new Nt(t), this.createAudioContext();
    }
    _createClass(et, [{
      key: "getPlugins",
      value: function getPlugins() {
        return Array.from(this.pluginsMap.keys());
      }
    }, {
      key: "addPlugin",
      value: function addPlugin(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          var i, t, r;
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                t = (i = e.getName) == null ? void 0 : i.call(e);
                if (t) {
                  _context8.next = 4;
                  break;
                }
                o.w("no name provided by the plugin");
                return _context8.abrupt("return");
              case 4:
                if (!this.pluginAddInProgress) {
                  _context8.next = 7;
                  break;
                }
                r = g.MediaPluginErrors.AddAlreadyInProgress(m.AUDIO_PLUGINS, "Add Plugin is already in Progress");
                throw this.analytics.added(t, this.audioContext.sampleRate), this.analytics.failure(t, r), o.w("can't add another plugin when previous add is in progress"), r;
              case 7:
                this.pluginAddInProgress = !0;
                _context8.prev = 8;
                _context8.next = 11;
                return this.addPluginInternal(e);
              case 11:
                _context8.prev = 11;
                this.pluginAddInProgress = !1;
                return _context8.finish(11);
              case 14:
              case "end":
                return _context8.stop();
            }
          }, _callee8, this, [[8,, 11, 14]]);
        }));
      }
    }, {
      key: "addPluginInternal",
      value: function addPluginInternal(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          var _this8 = this;
          var i, t;
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                t = (i = e.getName) == null ? void 0 : i.call(e);
                if (!this.pluginsMap.get(t)) {
                  _context10.next = 4;
                  break;
                }
                o.w(this.TAG, "plugin - ".concat(t, " already added."));
                return _context10.abrupt("return");
              case 4:
                _context10.next = 6;
                return this.validateAndThrow(t, e);
              case 6:
                _context10.prev = 6;
                if (!(this.pluginsMap.size === 0)) {
                  _context10.next = 12;
                  break;
                }
                _context10.next = 10;
                return this.initAudioNodes();
              case 10:
                _context10.next = 13;
                break;
              case 12:
                this.prevAudioNode && this.prevAudioNode.disconnect();
              case 13:
                this.analytics.added(t, this.audioContext.sampleRate);
                _context10.next = 16;
                return this.analytics.initWithTime(t, function () {
                  return c(_this8, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                      while (1) switch (_context9.prev = _context9.next) {
                        case 0:
                          return _context9.abrupt("return", e.init());
                        case 1:
                        case "end":
                          return _context9.stop();
                      }
                    }, _callee9);
                  }));
                });
              case 16:
                this.pluginsMap.set(t, e);
                _context10.next = 19;
                return this.processPlugin(e);
              case 19:
                _context10.next = 21;
                return this.connectToDestination();
              case 21:
                _context10.next = 26;
                break;
              case 23:
                _context10.prev = 23;
                _context10.t0 = _context10["catch"](6);
                throw o.e(this.TAG, "failed to add plugin", _context10.t0), _context10.t0;
              case 26:
              case "end":
                return _context10.stop();
            }
          }, _callee10, this, [[6, 23]]);
        }));
      }
    }, {
      key: "validatePlugin",
      value: function validatePlugin(e) {
        return e.checkSupport(this.audioContext);
      }
    }, {
      key: "validateAndThrow",
      value: function validateAndThrow(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          var i, r, _r2;
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                i = this.validatePlugin(t);
                if (!i.isSupported) {
                  _context11.next = 5;
                  break;
                }
                o.i(this.TAG, "plugin is supported,- ".concat(t.getName()));
                _context11.next = 19;
                break;
              case 5:
                if (!(this.analytics.added(e, this.audioContext.sampleRate), i.errType === se.PLATFORM_NOT_SUPPORTED)) {
                  _context11.next = 13;
                  break;
                }
                r = g.MediaPluginErrors.PlatformNotSupported(m.AUDIO_PLUGINS, "platform not supported, see docs");
                this.analytics.failure(e, r);
                _context11.next = 10;
                return this.cleanup();
              case 10:
                throw r;
              case 13:
                if (!(i.errType === se.DEVICE_NOT_SUPPORTED)) {
                  _context11.next = 19;
                  break;
                }
                _r2 = g.MediaPluginErrors.DeviceNotSupported(m.AUDIO_PLUGINS, "audio device not supported, see docs");
                this.analytics.failure(e, _r2);
                _context11.next = 18;
                return this.cleanup();
              case 18:
                throw _r2;
              case 19:
              case "end":
                return _context11.stop();
            }
          }, _callee11, this);
        }));
      }
    }, {
      key: "removePlugin",
      value: function removePlugin(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.removePluginInternal(e);
              case 2:
                if (!(this.pluginsMap.size === 0)) {
                  _context12.next = 10;
                  break;
                }
                _context12.next = 5;
                return this.cleanup();
              case 5:
                o.i(this.TAG, "No plugins left, stopping plugins loop");
                _context12.next = 8;
                return this.hmsTrack.setProcessedTrack(void 0);
              case 8:
                _context12.next = 12;
                break;
              case 10:
                _context12.next = 12;
                return this.reprocessPlugins();
              case 12:
              case "end":
                return _context12.stop();
            }
          }, _callee12, this);
        }));
      }
    }, {
      key: "cleanup",
      value: function cleanup() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
          var e, t, i, _iterator3, _step3, r;
          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                _iterator3 = _createForOfIteratorHelper(this.pluginsMap.values());
                _context13.prev = 1;
                _iterator3.s();
              case 3:
                if ((_step3 = _iterator3.n()).done) {
                  _context13.next = 9;
                  break;
                }
                r = _step3.value;
                _context13.next = 7;
                return this.removePluginInternal(r);
              case 7:
                _context13.next = 3;
                break;
              case 9:
                _context13.next = 14;
                break;
              case 11:
                _context13.prev = 11;
                _context13.t0 = _context13["catch"](1);
                _iterator3.e(_context13.t0);
              case 14:
                _context13.prev = 14;
                _iterator3.f();
                return _context13.finish(14);
              case 17:
                _context13.next = 19;
                return this.hmsTrack.setProcessedTrack(void 0);
              case 19:
                (e = this.sourceNode) == null || e.disconnect();
                (t = this.prevAudioNode) == null || t.disconnect();
                (i = this.outputTrack) == null || i.stop();
                this.sourceNode = void 0;
                this.destinationNode = void 0;
                this.prevAudioNode = void 0;
                this.outputTrack = void 0;
              case 26:
              case "end":
                return _context13.stop();
            }
          }, _callee13, this, [[1, 11, 14, 17]]);
        }));
      }
    }, {
      key: "closeContext",
      value: function closeContext() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
          var e;
          return _regeneratorRuntime().wrap(function _callee14$(_context14) {
            while (1) switch (_context14.prev = _context14.next) {
              case 0:
                (e = this.audioContext) == null || e.close(), this.audioContext = void 0;
              case 1:
              case "end":
                return _context14.stop();
            }
          }, _callee14, this);
        }));
      }
    }, {
      key: "reprocessPlugins",
      value: function reprocessPlugins() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
          var e, _i2, _e3, t;
          return _regeneratorRuntime().wrap(function _callee15$(_context15) {
            while (1) switch (_context15.prev = _context15.next) {
              case 0:
                if (!(this.pluginsMap.size === 0 || !this.sourceNode)) {
                  _context15.next = 2;
                  break;
                }
                return _context15.abrupt("return");
              case 2:
                e = Array.from(this.pluginsMap.values());
                _context15.next = 5;
                return this.cleanup();
              case 5:
                _context15.next = 7;
                return this.initAudioNodes();
              case 7:
                _i2 = 0, _e3 = e;
              case 8:
                if (!(_i2 < _e3.length)) {
                  _context15.next = 15;
                  break;
                }
                t = _e3[_i2];
                _context15.next = 12;
                return this.addPlugin(t);
              case 12:
                _i2++;
                _context15.next = 8;
                break;
              case 15:
              case "end":
                return _context15.stop();
            }
          }, _callee15, this);
        }));
      }
    }, {
      key: "initAudioNodes",
      value: function initAudioNodes() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
          var e;
          return _regeneratorRuntime().wrap(function _callee16$(_context16) {
            while (1) switch (_context16.prev = _context16.next) {
              case 0:
                if (!this.audioContext) {
                  _context16.next = 12;
                  break;
                }
                if (!this.sourceNode) {
                  e = new MediaStream([this.hmsTrack.nativeTrack]);
                  this.sourceNode = this.audioContext.createMediaStreamSource(e);
                }
                if (this.destinationNode) {
                  _context16.next = 12;
                  break;
                }
                this.destinationNode = this.audioContext.createMediaStreamDestination(), this.outputTrack = this.destinationNode.stream.getAudioTracks()[0];
                _context16.prev = 4;
                _context16.next = 7;
                return this.hmsTrack.setProcessedTrack(this.outputTrack);
              case 7:
                _context16.next = 12;
                break;
              case 9:
                _context16.prev = 9;
                _context16.t0 = _context16["catch"](4);
                throw o.e(this.TAG, "error in setting processed track", _context16.t0), _context16.t0;
              case 12:
              case "end":
                return _context16.stop();
            }
          }, _callee16, this, [[4, 9]]);
        }));
      }
    }, {
      key: "processPlugin",
      value: function processPlugin(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
          var t, i;
          return _regeneratorRuntime().wrap(function _callee17$(_context17) {
            while (1) switch (_context17.prev = _context17.next) {
              case 0:
                _context17.prev = 0;
                _context17.next = 3;
                return e.processAudioTrack(this.audioContext, this.prevAudioNode || this.sourceNode);
              case 3:
                t = _context17.sent;
                this.prevAudioNode && this.prevAudioNode.connect(t), this.prevAudioNode = t;
                _context17.next = 13;
                break;
              case 7:
                _context17.prev = 7;
                _context17.t0 = _context17["catch"](0);
                i = e.getName();
                o.e(this.TAG, "error in processing plugin ".concat(i), _context17.t0);
                _context17.next = 13;
                return this.removePluginInternal(e);
              case 13:
              case "end":
                return _context17.stop();
            }
          }, _callee17, this, [[0, 7]]);
        }));
      }
    }, {
      key: "connectToDestination",
      value: function connectToDestination() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
          return _regeneratorRuntime().wrap(function _callee18$(_context18) {
            while (1) switch (_context18.prev = _context18.next) {
              case 0:
                try {
                  this.prevAudioNode && this.destinationNode && this.prevAudioNode.context === this.destinationNode.context && this.prevAudioNode.connect(this.destinationNode);
                } catch (e) {
                  o.e(this.TAG, "error in connecting to destination node", e);
                }
              case 1:
              case "end":
                return _context18.stop();
            }
          }, _callee18, this);
        }));
      }
    }, {
      key: "removePluginInternal",
      value: function removePluginInternal(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
          var i, t;
          return _regeneratorRuntime().wrap(function _callee19$(_context19) {
            while (1) switch (_context19.prev = _context19.next) {
              case 0:
                t = (i = e.getName) == null ? void 0 : i.call(e);
                if (this.pluginsMap.get(t)) {
                  _context19.next = 4;
                  break;
                }
                o.w(this.TAG, "plugin - ".concat(t, " not found to remove."));
                return _context19.abrupt("return");
              case 4:
                o.i(this.TAG, "removing plugin ".concat(t)), this.pluginsMap.delete(t), e.stop(), this.analytics.removed(t);
              case 5:
              case "end":
                return _context19.stop();
            }
          }, _callee19, this);
        }));
      }
    }, {
      key: "createAudioContext",
      value: function createAudioContext() {
        this.audioContext || (Hr() ? this.audioContext = new AudioContext() : this.audioContext = new AudioContext({
          sampleRate: wr
        }));
      }
    }]);
    return et;
  }();
exports.HMSAudioPluginsManager = et;
function tt(n) {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
    return _regeneratorRuntime().wrap(function _callee20$(_context20) {
      while (1) switch (_context20.prev = _context20.next) {
        case 0:
          _context20.prev = 0;
          _context20.next = 3;
          return navigator.mediaDevices.getUserMedia({
            audio: n ? n.toConstraints() : !1
          });
        case 3:
          return _context20.abrupt("return", _context20.sent.getAudioTracks()[0]);
        case 6:
          _context20.prev = 6;
          _context20.t0 = _context20["catch"](0);
          throw te(_context20.t0, J.AUDIO);
        case 9:
        case "end":
          return _context20.stop();
      }
    }, _callee20, null, [[0, 6]]);
  }));
}
function it(n) {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
    return _regeneratorRuntime().wrap(function _callee21$(_context21) {
      while (1) switch (_context21.prev = _context21.next) {
        case 0:
          _context21.prev = 0;
          _context21.next = 3;
          return navigator.mediaDevices.getUserMedia({
            video: n ? n.toConstraints() : !1
          });
        case 3:
          return _context21.abrupt("return", _context21.sent.getVideoTracks()[0]);
        case 6:
          _context21.prev = 6;
          _context21.t0 = _context21["catch"](0);
          throw te(_context21.t0, J.VIDEO);
        case 9:
        case "end":
          return _context21.stop();
      }
    }, _callee21, null, [[0, 6]]);
  }));
}
function rt(n) {
  return "canvas" in n || n.label === "MediaStreamAudioDestinationNode" || n.label === "";
}
function Li(n) {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
    return _regeneratorRuntime().wrap(function _callee22$(_context22) {
      while (1) switch (_context22.prev = _context22.next) {
        case 0:
          _context22.prev = 0;
          _context22.next = 3;
          return navigator.mediaDevices.getUserMedia(n);
        case 3:
          return _context22.abrupt("return", _context22.sent);
        case 6:
          _context22.prev = 6;
          _context22.t0 = _context22["catch"](0);
          throw te(_context22.t0, J.AV);
        case 9:
        case "end":
          return _context22.stop();
      }
    }, _callee22, null, [[0, 6]]);
  }));
}
function Nn(n) {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
    return _regeneratorRuntime().wrap(function _callee23$(_context23) {
      while (1) switch (_context23.prev = _context23.next) {
        case 0:
          _context23.prev = 0;
          _context23.next = 3;
          return navigator.mediaDevices.getDisplayMedia({
            video: n,
            audio: !1
          });
        case 3:
          return _context23.abrupt("return", _context23.sent);
        case 6:
          _context23.prev = 6;
          _context23.t0 = _context23["catch"](0);
          throw te(_context23.t0, J.SCREEN);
        case 9:
        case "end":
          return _context23.stop();
      }
    }, _callee23, null, [[0, 6]]);
  }));
}
function On() {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
    var n, e;
    return _regeneratorRuntime().wrap(function _callee24$(_context24) {
      while (1) switch (_context24.prev = _context24.next) {
        case 0:
          _context24.prev = 0;
          _context24.next = 3;
          return navigator.mediaDevices.enumerateDevices();
        case 3:
          n = _context24.sent;
          e = {
            audioinput: [],
            audiooutput: [],
            videoinput: []
          };
          return _context24.abrupt("return", (n.forEach(function (t) {
            return e[t.kind].push(t);
          }), e));
        case 8:
          _context24.prev = 8;
          _context24.t0 = _context24["catch"](0);
          throw te(_context24.t0, J.AV);
        case 11:
        case "end":
          return _context24.stop();
      }
    }, _callee24, null, [[0, 8]]);
  }));
}
var pe = {
  audioContext: null,
  getAudioContext: function getAudioContext() {
    return this.audioContext || (this.audioContext = new AudioContext()), this.audioContext;
  },
  resumeContext: function resumeContext() {
    return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            _context25.prev = 0;
            _context25.next = 3;
            return this.getAudioContext().resume();
          case 3:
            return _context25.abrupt("return", _context25.sent);
          case 6:
            _context25.prev = 6;
            _context25.t0 = _context25["catch"](0);
            o.e("AudioContext", _context25.t0);
          case 9:
          case "end":
            return _context25.stop();
        }
      }, _callee25, this, [[0, 6]]);
    }));
  }
};
exports.HMSAudioContextHandler = pe;
var fe = /*#__PURE__*/function () {
  function fe() {
    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1 / 0;
    _classCallCheck(this, fe);
    this.capacity = e;
    this.storage = [];
  }
  _createClass(fe, [{
    key: "size",
    value: function size() {
      return this.storage.length;
    }
  }, {
    key: "toList",
    value: function toList() {
      return this.storage.slice(0);
    }
  }, {
    key: "enqueue",
    value: function enqueue(e) {
      this.size() === this.capacity && this.dequeue(), this.storage.push(e);
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      return this.storage.shift();
    }
  }, {
    key: "aggregate",
    value: function aggregate(e) {
      return e(this.storage);
    }
  }]);
  return fe;
}();
function $(n) {
  if (n < 0) throw Error("`ms` should be a positive integer");
  return new Promise(function (e) {
    return setTimeout(e, n);
  });
}
function st(n) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  var t;
  return function () {
    for (var _len8 = arguments.length, i = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      i[_key8] = arguments[_key8];
    }
    clearTimeout(t), t = void 0;
    var r = this;
    t = setTimeout(function () {
      n.apply(r, i);
    }, e);
  };
}
var Lr = 35,
  _r = 5,
  Ot = /*#__PURE__*/function () {
    function Ot(e, t, i) {
      var _this9 = this;
      _classCallCheck(this, Ot);
      this.track = e;
      this.audioLevelEvent = t;
      this.silenceEvent = i;
      this.TAG = "[TrackAudioLevelMonitor]";
      this.audioLevel = 0;
      this.isMonitored = !1;
      this.interval = 100;
      this.historyInterval = 700;
      this.history = new fe(this.historyInterval / this.interval);
      this.detectSilence = function () {
        return c(_this9, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
          var e, t, i;
          return _regeneratorRuntime().wrap(function _callee26$(_context26) {
            while (1) switch (_context26.prev = _context26.next) {
              case 0:
                e = 20, t = 50, i = 0;
              case 1:
                if (!this.isMonitored) {
                  _context26.next = 14;
                  break;
                }
                if (!this.track.enabled) {
                  _context26.next = 10;
                  break;
                }
                if (!this.isSilentThisInstant()) {
                  _context26.next = 9;
                  break;
                }
                if (!(i++, i > t)) {
                  _context26.next = 7;
                  break;
                }
                this.silenceEvent.publish({
                  track: this.track
                });
                return _context26.abrupt("break", 14);
              case 7:
                _context26.next = 10;
                break;
              case 9:
                return _context26.abrupt("break", 14);
              case 10:
                _context26.next = 12;
                return $(e);
              case 12:
                _context26.next = 1;
                break;
              case 14:
              case "end":
                return _context26.stop();
            }
          }, _callee26, this);
        }));
      };
      try {
        var r = new MediaStream([this.track.nativeTrack]);
        this.analyserNode = this.createAnalyserNodeForStream(r);
      } catch (r) {
        o.w(this.TAG, "Unable to initialize AudioContext", r);
      }
    }
    _createClass(Ot, [{
      key: "start",
      value: function start() {
        var _this10 = this;
        this.stop(), this.isMonitored = !0, o.d(this.TAG, "Starting track Monitor", "".concat(this.track)), this.loop().then(function () {
          return o.d(_this10.TAG, "Stopping track Monitor", "".concat(_this10.track));
        });
      }
    }, {
      key: "stop",
      value: function stop() {
        if (!this.analyserNode) {
          o.d(this.TAG, "AudioContext not initialized");
          return;
        }
        this.sendAudioLevel(0), this.isMonitored = !1;
      }
    }, {
      key: "loop",
      value: function loop() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
          return _regeneratorRuntime().wrap(function _callee27$(_context27) {
            while (1) switch (_context27.prev = _context27.next) {
              case 0:
                if (!this.isMonitored) {
                  _context27.next = 6;
                  break;
                }
                this.sendAudioLevel(this.getMaxAudioLevelOverPeriod());
                _context27.next = 4;
                return $(this.interval);
              case 4:
                _context27.next = 0;
                break;
              case 6:
              case "end":
                return _context27.stop();
            }
          }, _callee27, this);
        }));
      }
    }, {
      key: "sendAudioLevel",
      value: function sendAudioLevel() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (e = e > Lr ? e : 0, Math.abs(this.audioLevel - e) > _r) {
          this.audioLevel = e;
          var i = {
            track: this.track,
            audioLevel: this.audioLevel
          };
          this.audioLevelEvent.publish(i);
        }
      }
    }, {
      key: "getMaxAudioLevelOverPeriod",
      value: function getMaxAudioLevelOverPeriod() {
        if (!this.analyserNode) {
          o.d(this.TAG, "AudioContext not initialized");
          return;
        }
        var e = this.calculateAudioLevel();
        return e !== void 0 && this.history.enqueue(e), this.history.aggregate(function (t) {
          return Math.max.apply(Math, _toConsumableArray(t));
        });
      }
    }, {
      key: "calculateAudioLevel",
      value: function calculateAudioLevel() {
        if (!this.analyserNode) {
          o.d(this.TAG, "AudioContext not initialized");
          return;
        }
        var e = new Uint8Array(this.analyserNode.fftSize);
        this.analyserNode.getByteTimeDomainData(e);
        var t = .009,
          i = t;
        var _iterator4 = _createForOfIteratorHelper(e),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var a = _step4.value;
            i = Math.max(i, (a - 128) / 128);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        var r = (Math.log(t) - Math.log(i)) / Math.log(t);
        return Math.ceil(Math.min(Math.max(r * 100, 0), 100));
      }
    }, {
      key: "isSilentThisInstant",
      value: function isSilentThisInstant() {
        if (!this.analyserNode) {
          o.d(this.TAG, "AudioContext not initialized");
          return;
        }
        var e = new Uint8Array(this.analyserNode.fftSize);
        return this.analyserNode.getByteTimeDomainData(e), !e.some(function (t) {
          return t !== 128 && t !== 0;
        });
      }
    }, {
      key: "createAnalyserNodeForStream",
      value: function createAnalyserNodeForStream(e) {
        var t = pe.getAudioContext(),
          i = t.createAnalyser();
        return t.createMediaStreamSource(e).connect(i), i;
      }
    }]);
    return Ot;
  }();
function _i(n, e) {
  return function (i) {
    return i in n && n[i] !== e[i];
  };
}
var He = /*#__PURE__*/function (_Ve) {
  _inherits(He, _Ve);
  var _super6 = _createSuper(He);
  function He(e, t, i, r) {
    var _this11;
    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Z().build();
    _classCallCheck(this, He);
    _this11 = _super6.call(this, e, t, i);
    _this11.eventBus = r;
    _this11.TAG = "[HMSLocalAudioTrack]";
    _this11.isPublished = !1;
    _this11.handleVisibilityChange = function () {
      return c(_assertThisInitialized(_this11), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              _context28.t0 = document.visibilityState === "visible";
              if (!_context28.t0) {
                _context28.next = 4;
                break;
              }
              _context28.next = 4;
              return this.replaceTrackWith(this.settings);
            case 4:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
    };
    _this11.handleSettingsChange = function (e) {
      return c(_assertThisInitialized(_this11), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              t = this.stream, i = _i(e, this.settings);
              _context29.t0 = i("maxBitrate") && e.maxBitrate;
              if (!_context29.t0) {
                _context29.next = 5;
                break;
              }
              _context29.next = 5;
              return t.setMaxBitrateAndFramerate(this);
            case 5:
              _context29.t1 = i("advanced");
              if (!_context29.t1) {
                _context29.next = 9;
                break;
              }
              _context29.next = 9;
              return this.replaceTrackWith(e);
            case 9:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this);
      }));
    };
    _this11.handleDeviceChange = function (e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      return c(_assertThisInitialized(_this11), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              _context30.t0 = _i(e, this.settings)("deviceId");
              if (!_context30.t0) {
                _context30.next = 5;
                break;
              }
              _context30.next = 4;
              return this.replaceTrackWith(e);
            case 4:
              t || Q.updateSelection("audioInput", {
                deviceId: e.deviceId,
                groupId: this.nativeTrack.getSettings().groupId
              });
            case 5:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
    };
    e.tracks.push(_assertThisInitialized(_this11)), _this11.settings = s, s.deviceId !== t.getSettings().deviceId && !rt(t) && (_this11.settings = _this11.buildNewSettings({
      deviceId: t.getSettings().deviceId
    })), _this11.pluginsManager = new et(_assertThisInitialized(_this11), r), _this11.setFirstTrackId(t.id), Ct() && B && document.addEventListener("visibilitychange", _this11.handleVisibilityChange);
    return _this11;
  }
  _createClass(He, [{
    key: "replaceTrackWith",
    value: function replaceTrackWith(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        var t, i, r, s;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              t = this.nativeTrack;
              t == null || t.stop();
              i = Boolean(this.audioLevelMonitor);
              _context31.next = 5;
              return tt(e);
            case 5:
              r = _context31.sent;
              r.enabled = this.enabled, o.d(this.TAG, "replaceTrack, Previous track stopped", t, "newTrack", r);
              s = this.stream;
              _context31.next = 10;
              return s.replaceSenderTrack(t, this.processedTrack || r);
            case 10:
              _context31.next = 12;
              return s.replaceStreamTrack(t, r);
            case 12:
              this.nativeTrack = r;
              i && this.initAudioLevelMonitor();
              _context31.prev = 14;
              _context31.next = 17;
              return this.pluginsManager.reprocessPlugins();
            case 17:
              _context31.next = 22;
              break;
            case 19:
              _context31.prev = 19;
              _context31.t0 = _context31["catch"](14);
              this.eventBus.audioPluginFailed.publish(_context31.t0);
            case 22:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this, [[14, 19]]);
      }));
    }
  }, {
    key: "setEnabled",
    value: function setEnabled(e) {
      var _this12 = this;
      var t = function t(i) {
        return _get(_getPrototypeOf(He.prototype), i, _this12);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.t0 = e !== this.enabled;
              if (!_context32.t0) {
                _context32.next = 10;
                break;
              }
              _context32.t1 = e && rt(this.nativeTrack);
              if (!_context32.t1) {
                _context32.next = 6;
                break;
              }
              _context32.next = 6;
              return this.replaceTrackWith(this.settings);
            case 6:
              _context32.next = 8;
              return t("setEnabled").call(this, e);
            case 8:
              e && (this.settings = this.buildNewSettings({
                deviceId: this.nativeTrack.getSettings().deviceId
              }));
              this.eventBus.localAudioEnabled.publish({
                enabled: e,
                track: this
              });
            case 10:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
    }
  }, {
    key: "isPublishedTrackId",
    value: function isPublishedTrackId(e) {
      return this.publishedTrackId === e;
    }
  }, {
    key: "setSettings",
    value: function setSettings(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
        var i;
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              i = this.buildNewSettings(e);
              if (!rt(this.nativeTrack)) {
                _context33.next = 4;
                break;
              }
              this.settings = i;
              return _context33.abrupt("return");
            case 4:
              _context33.next = 6;
              return this.handleDeviceChange(i, t);
            case 6:
              _context33.next = 8;
              return this.handleSettingsChange(i);
            case 8:
              this.settings = i;
            case 9:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
    }
  }, {
    key: "getPlugins",
    value: function getPlugins() {
      return this.pluginsManager.getPlugins();
    }
  }, {
    key: "addPlugin",
    value: function addPlugin(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
        return _regeneratorRuntime().wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", this.pluginsManager.addPlugin(e));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
    }
  }, {
    key: "removePlugin",
    value: function removePlugin(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", this.pluginsManager.removePlugin(e));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
    }
  }, {
    key: "validatePlugin",
    value: function validatePlugin(e) {
      return this.pluginsManager.validatePlugin(e);
    }
  }, {
    key: "setProcessedTrack",
    value: function setProcessedTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
        return _regeneratorRuntime().wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              if (e) {
                _context36.next = 7;
                break;
              }
              _context36.t0 = this.processedTrack;
              if (!_context36.t0) {
                _context36.next = 5;
                break;
              }
              _context36.next = 5;
              return this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack);
            case 5:
              this.processedTrack = void 0;
              return _context36.abrupt("return");
            case 7:
              _context36.t1 = e !== this.processedTrack;
              if (!_context36.t1) {
                _context36.next = 17;
                break;
              }
              if (!this.processedTrack) {
                _context36.next = 14;
                break;
              }
              _context36.next = 12;
              return this.stream.replaceSenderTrack(this.processedTrack, e);
            case 12:
              _context36.next = 16;
              break;
            case 14:
              _context36.next = 16;
              return this.stream.replaceSenderTrack(this.nativeTrack, e);
            case 16:
              this.processedTrack = e;
            case 17:
            case "end":
              return _context36.stop();
          }
        }, _callee36, this);
      }));
    }
  }, {
    key: "initAudioLevelMonitor",
    value: function initAudioLevelMonitor() {
      this.audioLevelMonitor && this.destroyAudioLevelMonitor(), o.d(this.TAG, "Monitor Audio Level for", this, this.getMediaTrackSettings().deviceId), this.audioLevelMonitor = new Ot(this, this.eventBus.trackAudioLevelUpdate, this.eventBus.localAudioSilence), this.audioLevelMonitor.start(), this.audioLevelMonitor.detectSilence();
    }
  }, {
    key: "destroyAudioLevelMonitor",
    value: function destroyAudioLevelMonitor() {
      var e;
      (e = this.audioLevelMonitor) == null || e.stop(), this.audioLevelMonitor = void 0;
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      var _this13 = this;
      var e = function e(t) {
        return _get(_getPrototypeOf(He.prototype), t, _this13);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
        var i;
        return _regeneratorRuntime().wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              e("cleanup").call(this);
              _context37.next = 3;
              return this.pluginsManager.cleanup();
            case 3:
              _context37.next = 5;
              return this.pluginsManager.closeContext();
            case 5:
              this.transceiver = void 0;
              (i = this.processedTrack) == null || i.stop();
              this.isPublished = !1;
              this.destroyAudioLevelMonitor();
              Ct() && B && document.removeEventListener("visibilitychange", this.handleVisibilityChange);
            case 10:
            case "end":
              return _context37.stop();
          }
        }, _callee37, this);
      }));
    }
  }, {
    key: "getTrackIDBeingSent",
    value: function getTrackIDBeingSent() {
      return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;
    }
  }, {
    key: "getTrackBeingSent",
    value: function getTrackBeingSent() {
      return this.processedTrack || this.nativeTrack;
    }
  }, {
    key: "buildNewSettings",
    value: function buildNewSettings(e) {
      var _S = S(S({}, this.settings), e),
        t = _S.volume,
        i = _S.codec,
        r = _S.maxBitrate,
        s = _S.deviceId,
        a = _S.advanced;
      return new Ie(t, i, r, s, a);
    }
  }]);
  return He;
}(Ve);
exports.HMSLocalAudioTrack = He;
var Ee = /*#__PURE__*/function (_Ve2) {
  _inherits(Ee, _Ve2);
  var _super7 = _createSuper(Ee);
  function Ee() {
    _classCallCheck(this, Ee);
    return _super7.apply(this, arguments);
  }
  _createClass(Ee, [{
    key: "setEnabled",
    value: function setEnabled(e) {
      var _this14 = this;
      var t = function t(i) {
        return _get(_getPrototypeOf(Ee.prototype), i, _this14);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
        return _regeneratorRuntime().wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              _context38.t0 = e !== this.enabled;
              if (!_context38.t0) {
                _context38.next = 6;
                break;
              }
              _context38.next = 4;
              return t("setEnabled").call(this, e);
            case 4:
              _context38.next = 6;
              return this.subscribeToAudio(e);
            case 6:
            case "end":
              return _context38.stop();
          }
        }, _callee38, this);
      }));
    }
  }]);
  return Ee;
}(Ve);
exports.HMSRemoteAudioTrack = Ee;
var Ge = /*#__PURE__*/function (_Te2) {
  _inherits(Ge, _Te2);
  var _super8 = _createSuper(Ge);
  function Ge(e, t, i) {
    var _this15;
    _classCallCheck(this, Ge);
    _this15 = _super8.call(this, e, t, i);
    _this15.type = x.VIDEO;
    _this15.sinkCount = 0;
    if (t.kind !== "video") throw new Error("Expected 'track' kind = 'video'");
    return _this15;
  }
  _createClass(Ge, [{
    key: "setVideoHandler",
    value: function setVideoHandler(e) {
      this.videoHandler = e;
    }
  }, {
    key: "hasSinks",
    value: function hasSinks() {
      return this.sinkCount > 0;
    }
  }, {
    key: "getSinks",
    value: function getSinks() {
      return this.videoHandler.getVideoElements() || [];
    }
  }, {
    key: "attach",
    value: function attach(e) {
      this.videoHandler.addVideoElement(e);
    }
  }, {
    key: "detach",
    value: function detach(e) {
      this.videoHandler.removeVideoElement(e);
    }
  }, {
    key: "addSink",
    value: function addSink(e) {
      this.addSinkInternal(e, this.nativeTrack);
    }
  }, {
    key: "removeSink",
    value: function removeSink(e) {
      o.d("[HMSVideoTrack] removing sink video element - ".concat(e)), e.srcObject !== null && (e.srcObject = null, this.sinkCount > 0 && this.sinkCount--);
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      _get(_getPrototypeOf(Ge.prototype), "cleanup", this).call(this), this.videoHandler.cleanup();
    }
  }, {
    key: "addSinkInternal",
    value: function addSinkInternal(e, t) {
      var r;
      o.d("[HMSVideoTrack] adding sink internal video - ".concat(e, " track - ").concat(t));
      var i = e.srcObject;
      i !== null && i instanceof MediaStream && ((r = i.getVideoTracks()[0]) == null ? void 0 : r.id) === t.id || (e.srcObject = new MediaStream([t]), this.sinkCount++);
    }
  }]);
  return Ge;
}(Te);
exports.HMSVideoTrack = Ge;
var Ue = (_Ue = {}, _defineProperty(_Ue, F.NONE, -1), _defineProperty(_Ue, F.LOW, 0), _defineProperty(_Ue, F.MEDIUM, 1), _defineProperty(_Ue, F.HIGH, 2), _Ue),
  Dr = .5,
  Di = function Di(n, e) {
    var t = F.HIGH,
      i = e.width > e.height ? "width" : "height",
      r = _toConsumableArray(n).sort(function (a, d) {
        return Ue[a.layer] - Ue[d.layer];
      }),
      s = e[i] * ((window == null ? void 0 : window.devicePixelRatio) || 1);
    for (var a = 0; a < r.length; a++) {
      var _r$a = r[a],
        d = _r$a.resolution,
        l = _r$a.layer,
        u = d[i];
      if (s <= u) {
        t = l;
        break;
      } else {
        var h = r[a + 1],
          p = h ? h.resolution[i] : Number.POSITIVE_INFINITY;
        if ((s - u) / (p - u) < Dr) {
          t = l;
          break;
        }
      }
    }
    return t;
  };
var Ni = /*#__PURE__*/function () {
    function Ni() {
      var _this16 = this;
      _classCallCheck(this, Ni);
      this.TAG = "[HMSIntersectionObserverWrapper]";
      this.listeners = new Map();
      this.observe = function (e, t) {
        var i;
        _this16.createObserver(), _this16.unobserve(e), (i = _this16.intersectionObserver) == null || i.observe(e), _this16.listeners.set(e, t);
      };
      this.unobserve = function (e) {
        var t;
        (t = _this16.intersectionObserver) == null || t.unobserve(e), _this16.listeners.has(e) && _this16.listeners.delete(e);
      };
      this.createObserver = function () {
        _this16.isSupported() && !_this16.intersectionObserver && (_this16.intersectionObserver = new IntersectionObserver(_this16.handleIntersection));
      };
      this.handleIntersection = function (e) {
        var t;
        var _iterator5 = _createForOfIteratorHelper(e),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var i = _step5.value;
            _this16.listeners.has(i.target) && ((t = _this16.listeners.get(i.target)) == null || t(i));
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      };
      this.createObserver();
    }
    _createClass(Ni, [{
      key: "isSupported",
      value: function isSupported() {
        var e = B && typeof window.IntersectionObserver != "undefined";
        return e || o.w(this.TAG, "IntersectionObserver is not supported, fallback will be used instead"), e;
      }
    }]);
    return Ni;
  }(),
  Oi = new Ni();
var xi = /*#__PURE__*/function () {
    function xi() {
      var _this17 = this;
      _classCallCheck(this, xi);
      this.TAG = "[HMSResizeObserverWrapper]";
      this.listeners = new Map();
      this.observe = function (e, t) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          box: "border-box"
        };
        var r;
        _this17.createObserver(), _this17.unobserve(e), (r = _this17.resizeObserver) == null || r.observe(e, i), _this17.listeners.set(e, t);
      };
      this.unobserve = function (e) {
        var t;
        (t = _this17.resizeObserver) == null || t.unobserve(e), _this17.listeners.has(e) && _this17.listeners.delete(e);
      };
      this.createObserver = function () {
        _this17.isSupported() && !_this17.resizeObserver && (_this17.resizeObserver = new ResizeObserver(st(_this17.handleResize, 300)));
      };
      this.handleResize = function (e) {
        var t;
        var _iterator6 = _createForOfIteratorHelper(e),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var i = _step6.value;
            _this17.listeners.has(i.target) && ((t = _this17.listeners.get(i.target)) == null || t(i));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      };
      this.createObserver();
    }
    _createClass(xi, [{
      key: "isSupported",
      value: function isSupported() {
        var e = B && typeof window.ResizeObserver != "undefined";
        return e || o.w(this.TAG, "Resize Observer is not supported"), e;
      }
    }]);
    return xi;
  }(),
  Fi = new xi();
var Be = /*#__PURE__*/function () {
  function Be(e) {
    var _this18 = this;
    _classCallCheck(this, Be);
    this.track = e;
    this.TAG = "[VideoElementManager]";
    this.videoElements = new Set();
    this.entries = new Map();
    this.handleIntersection = function (e) {
      return c(_this18, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
        var t;
        return _regeneratorRuntime().wrap(function _callee39$(_context39) {
          while (1) switch (_context39.prev = _context39.next) {
            case 0:
              t = getComputedStyle(e.target).visibility === "visible";
              if (!(this.track.enabled && (e.isIntersecting && t || !document.contains(e.target)))) {
                _context39.next = 7;
                break;
              }
              o.d(this.TAG, "add sink intersection", this.track, this.id);
              _context39.next = 5;
              return this.track.addSink(e.target);
            case 5:
              _context39.next = 10;
              break;
            case 7:
              o.d(this.TAG, "remove sink intersection", this.track, this.id);
              _context39.next = 10;
              return this.track.removeSink(e.target);
            case 10:
              this.entries.set(e.target, e.boundingClientRect);
              _context39.next = 13;
              return this.selectMaxLayer();
            case 13:
            case "end":
              return _context39.stop();
          }
        }, _callee39, this);
      }));
    };
    this.handleResize = function (e) {
      return c(_this18, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
        return _regeneratorRuntime().wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              _context40.t0 = !this.track.enabled || !(this.track instanceof X);
              if (_context40.t0) {
                _context40.next = 5;
                break;
              }
              this.entries.set(e.target, e.contentRect);
              _context40.next = 5;
              return this.selectMaxLayer();
            case 5:
            case "end":
              return _context40.stop();
          }
        }, _callee40, this);
      }));
    };
    this.cleanup = function () {
      _this18.videoElements.forEach(function (e) {
        var t, i;
        e.srcObject = null, (t = _this18.resizeObserver) == null || t.unobserve(e), (i = _this18.intersectionObserver) == null || i.unobserve(e);
      }), _this18.videoElements.clear(), _this18.resizeObserver = void 0, _this18.intersectionObserver = void 0;
    };
    this.init(), this.id = (0, _uuid.v4)();
  }
  _createClass(Be, [{
    key: "updateSinks",
    value: function updateSinks() {
      var _iterator7 = _createForOfIteratorHelper(this.videoElements),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var e = _step7.value;
          this.track.enabled ? this.track.addSink(e) : this.track.removeSink(e);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "addVideoElement",
    value: function addVideoElement(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
        var t;
        return _regeneratorRuntime().wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              _context41.t0 = this.videoElements.has(e);
              if (_context41.t0) {
                _context41.next = 15;
                break;
              }
              this.init();
              o.d(this.TAG, "Adding video element: ".concat(e, " for ").concat(this.track), this.id);
              this.videoElements.add(e);
              this.videoElements.size >= 10 && o.w(this.TAG, "".concat(this.track), "the track is added to ".concat(this.videoElements.size, " video elements, while this may be intentional, it's likely that there is a bug leading to unnecessary creation of video elements in the UI"));
              ((t = this.intersectionObserver) == null ? void 0 : t.isSupported()) ? this.intersectionObserver.observe(e, this.handleIntersection) : B && (this.isElementInViewport(e) ? this.track.addSink(e) : this.track.removeSink(e));
              if (!this.resizeObserver) {
                _context41.next = 11;
                break;
              }
              this.resizeObserver.observe(e, this.handleResize);
              _context41.next = 15;
              break;
            case 11:
              _context41.t1 = this.track instanceof X;
              if (!_context41.t1) {
                _context41.next = 15;
                break;
              }
              _context41.next = 15;
              return this.track.setPreferredLayer(this.track.getPreferredLayer());
            case 15:
            case "end":
              return _context41.stop();
          }
        }, _callee41, this);
      }));
    }
  }, {
    key: "removeVideoElement",
    value: function removeVideoElement(e) {
      var t, i;
      this.track.removeSink(e), this.videoElements.delete(e), this.entries.delete(e), (t = this.resizeObserver) == null || t.unobserve(e), (i = this.intersectionObserver) == null || i.unobserve(e), o.d(this.TAG, "Removing video element: ".concat(e, " for ").concat(this.track));
    }
  }, {
    key: "getVideoElements",
    value: function getVideoElements() {
      return Array.from(this.videoElements);
    }
  }, {
    key: "init",
    value: function init() {
      B && (this.resizeObserver = Fi, this.intersectionObserver = Oi);
    }
  }, {
    key: "isElementInViewport",
    value: function isElementInViewport(e) {
      var t = e.offsetTop,
        i = e.offsetLeft,
        r = e.offsetWidth,
        s = e.offsetHeight,
        _e4 = e,
        a = _e4.hidden,
        _getComputedStyle = getComputedStyle(e),
        d = _getComputedStyle.opacity,
        l = _getComputedStyle.display;
      for (; e.offsetParent;) e = e.offsetParent, t += e.offsetTop, i += e.offsetLeft;
      return t < window.pageYOffset + window.innerHeight && i < window.pageXOffset + window.innerWidth && t + s > window.pageYOffset && i + r > window.pageXOffset && !a && (d !== "" ? parseFloat(d) > 0 : !0) && l !== "none";
    }
  }, {
    key: "selectMaxLayer",
    value: function selectMaxLayer() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
        var e, _iterator8, _step8, t, i, r, s;
        return _regeneratorRuntime().wrap(function _callee42$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              if (!(this.track instanceof X)) {
                _context42.next = 6;
                break;
              }
              _iterator8 = _createForOfIteratorHelper(this.entries.values());
              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  t = _step8.value;
                  i = t.width, r = t.height, s = Di(this.track.getSimulcastDefinitions(), {
                    width: i,
                    height: r
                  });
                  e ? e = Ue[s] > Ue[e] ? s : e : e = s;
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }
              o.d(this.TAG, "selecting max layer ".concat(e, " for the track"), "".concat(this.track));
              _context42.next = 6;
              return this.track.setPreferredLayer(e);
            case 6:
            case "end":
              return _context42.stop();
          }
        }, _callee42, this);
      }));
    }
  }]);
  return Be;
}();
var Le;
exports.HMSVideoPluginType = Le;
(function (t) {
  t.TRANSFORM = "TRANSFORM", t.ANALYZE = "ANALYZE";
})(Le || (exports.HMSVideoPluginType = Le = {}));
var $e;
exports.HMSVideoPluginCanvasContextType = $e;
(function (t) {
  t["2D"] = "2d", t.WEBGL = "webgl", t.WEBGL2 = "webgl2";
})($e || (exports.HMSVideoPluginCanvasContextType = $e = {}));
var at = /*#__PURE__*/function () {
  function at() {
    _classCallCheck(this, at);
    this.total = 0;
    this.count = 0;
  }
  _createClass(at, [{
    key: "add",
    value: function add(e) {
      this.count++, this.total += e;
    }
  }, {
    key: "getAvg",
    value: function getAvg() {
      return Math.floor(this.total / this.count);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.total = 0, this.count = 0;
    }
  }]);
  return at;
}();
var xt = /*#__PURE__*/function () {
  function xt(e) {
    _classCallCheck(this, xt);
    this.eventBus = e;
    this.TAG = "[VideoPluginsAnalytics]";
    this.initTime = {}, this.preProcessingAvgs = new at(), this.addedTimestamps = {}, this.processingAvgs = {}, this.pluginAdded = {}, this.pluginInputFrameRate = {}, this.pluginFrameRate = {};
  }
  _createClass(xt, [{
    key: "added",
    value: function added(e, t, i) {
      this.pluginAdded[e] = !0, this.addedTimestamps[e] = Date.now(), this.initTime[e] = 0, this.processingAvgs[e] = new at(), this.pluginInputFrameRate[e] = t, this.pluginFrameRate[e] = i || t;
    }
  }, {
    key: "removed",
    value: function removed(e) {
      var t;
      if (this.pluginAdded[e]) {
        var i = {
          pluginName: e,
          duration: Math.floor((Date.now() - this.addedTimestamps[e]) / 1e3),
          loadTime: this.initTime[e],
          avgPreProcessingTime: this.preProcessingAvgs.getAvg(),
          avgProcessingTime: (t = this.processingAvgs[e]) == null ? void 0 : t.getAvg(),
          inputFrameRate: this.pluginInputFrameRate[e],
          pluginFrameRate: this.pluginFrameRate[e]
        };
        this.eventBus.analytics.publish(he.stats(i)), this.clean(e);
      }
    }
  }, {
    key: "failure",
    value: function failure(e, t) {
      this.pluginAdded[e] && (this.eventBus.analytics.publish(he.failure(e, t)), this.clean(e));
    }
  }, {
    key: "initWithTime",
    value: function initWithTime(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
        var i, s;
        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              if (!this.initTime[e]) {
                _context43.next = 3;
                break;
              }
              o.i(this.TAG, "Plugin Already loaded ".concat(e, ", time it took: ").concat(this.initTime[e]));
              return _context43.abrupt("return");
            case 3:
              _context43.prev = 3;
              _context43.next = 6;
              return this.timeInMs(t);
            case 6:
              i = _context43.sent;
              o.i(this.TAG, "Time taken for Plugin ".concat(e, " initialization : ").concat(i));
              _context43.next = 14;
              break;
            case 10:
              _context43.prev = 10;
              _context43.t0 = _context43["catch"](3);
              s = g.MediaPluginErrors.InitFailed(m.VIDEO_PLUGINS, "failed during initialization of plugin".concat(_context43.t0.message || _context43.t0));
              throw o.e(this.TAG, s), this.failure(e, s), s;
            case 14:
              i && (this.initTime[e] = i);
            case 15:
            case "end":
              return _context43.stop();
          }
        }, _callee43, this, [[3, 10]]);
      }));
    }
  }, {
    key: "preProcessWithTime",
    value: function preProcessWithTime(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
        var t;
        return _regeneratorRuntime().wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              _context44.next = 2;
              return this.timeInMs(e);
            case 2:
              t = _context44.sent;
              this.preProcessingAvgs.add(t);
            case 4:
            case "end":
              return _context44.stop();
          }
        }, _callee44, this);
      }));
    }
  }, {
    key: "processWithTime",
    value: function processWithTime(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var r, i, a;
        return _regeneratorRuntime().wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              _context45.prev = 0;
              _context45.next = 3;
              return this.timeInMs(t);
            case 3:
              i = _context45.sent;
              _context45.next = 10;
              break;
            case 6:
              _context45.prev = 6;
              _context45.t0 = _context45["catch"](0);
              a = g.MediaPluginErrors.ProcessingFailed(m.VIDEO_PLUGINS, "Failed during processing of plugin".concat(_context45.t0.message || _context45.t0));
              throw o.e(this.TAG, a), this.failure(e, a), a;
            case 10:
              i && ((r = this.processingAvgs[e]) == null || r.add(i));
            case 11:
            case "end":
              return _context45.stop();
          }
        }, _callee45, this, [[0, 6]]);
      }));
    }
  }, {
    key: "timeInMs",
    value: function timeInMs(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
        var t;
        return _regeneratorRuntime().wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              t = Date.now();
              _context46.next = 3;
              return e();
            case 3:
              return _context46.abrupt("return", Math.floor(Date.now() - t));
            case 4:
            case "end":
              return _context46.stop();
          }
        }, _callee46);
      }));
    }
  }, {
    key: "clean",
    value: function clean(e) {
      delete this.addedTimestamps[e], delete this.initTime[e], delete this.processingAvgs[e], delete this.pluginAdded[e], delete this.pluginInputFrameRate[e], delete this.pluginFrameRate[e];
    }
  }]);
  return xt;
}();
var Vi = 24,
  Or = 320,
  xr = 240,
  nt = /*#__PURE__*/function () {
    function nt(e, t) {
      _classCallCheck(this, nt);
      this.TAG = "[VideoPluginsManager]";
      this.pluginsLoopRunning = !1;
      this.pluginsLoopState = "paused";
      this.pluginAddInProgress = !1;
      this.hmsTrack = e, this.pluginsMap = new Map(), this.pluginNumFramesToSkip = {}, this.pluginNumFramesSkipped = {}, this.analytics = new xt(t), this.canvases = new Array();
    }
    _createClass(nt, [{
      key: "getPlugins",
      value: function getPlugins() {
        return Array.from(this.pluginsMap.keys());
      }
    }, {
      key: "addPlugin",
      value: function addPlugin(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
          var i, r, s;
          return _regeneratorRuntime().wrap(function _callee47$(_context47) {
            while (1) switch (_context47.prev = _context47.next) {
              case 0:
                if (!this.pluginAddInProgress) {
                  _context47.next = 7;
                  break;
                }
                r = (i = e.getName) == null ? void 0 : i.call(e);
                if (!(!r || r === "")) {
                  _context47.next = 5;
                  break;
                }
                o.w("no name provided by the plugin");
                return _context47.abrupt("return");
              case 5:
                s = g.MediaPluginErrors.AddAlreadyInProgress(m.VIDEO_PLUGINS, "Add Plugin is already in Progress");
                throw this.analytics.failure(r, s), o.w("can't add another plugin when previous add is in progress"), s;
              case 7:
                this.pluginAddInProgress = !0;
                _context47.prev = 8;
                _context47.next = 11;
                return this.addPluginInternal(e, t);
              case 11:
                _context47.prev = 11;
                this.pluginAddInProgress = !1;
                return _context47.finish(11);
              case 14:
              case "end":
                return _context47.stop();
            }
          }, _callee47, this, [[8,, 11, 14]]);
        }));
      }
    }, {
      key: "addPluginInternal",
      value: function addPluginInternal(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
          var _this19 = this;
          var a, d, i, r, s, l;
          return _regeneratorRuntime().wrap(function _callee49$(_context49) {
            while (1) switch (_context49.prev = _context49.next) {
              case 0:
                i = (a = e.getName) == null ? void 0 : a.call(e);
                if (!(!i || i === "")) {
                  _context49.next = 4;
                  break;
                }
                o.w("no name provided by the plugin");
                return _context49.abrupt("return");
              case 4:
                if (!this.pluginsMap.has(i)) {
                  _context49.next = 7;
                  break;
                }
                o.w(this.TAG, "plugin - ".concat(e.getName(), " already added."));
                return _context49.abrupt("return");
              case 7:
                r = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, s = 0;
                t && t > 0 ? (o.i(this.TAG, "adding plugin ".concat(e.getName(), " with framerate ").concat(t)), t < r && (s = Math.ceil(r / t) - 1), this.analytics.added(i, r, t)) : (o.i(this.TAG, "adding plugin ".concat(e.getName())), this.analytics.added(i, r)), o.i(this.TAG, "numFrames to skip processing", s), this.pluginNumFramesToSkip[i] = s, this.pluginNumFramesSkipped[i] = s, this.validateAndThrow(i, e);
                _context49.prev = 9;
                _context49.next = 12;
                return this.analytics.initWithTime(i, function () {
                  return c(_this19, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
                    return _regeneratorRuntime().wrap(function _callee48$(_context48) {
                      while (1) switch (_context48.prev = _context48.next) {
                        case 0:
                          _context48.next = 2;
                          return e.init();
                        case 2:
                          return _context48.abrupt("return", _context48.sent);
                        case 3:
                        case "end":
                          return _context48.stop();
                      }
                    }, _callee48);
                  }));
                });
              case 12:
                this.pluginsMap.set(i, e);
                if (!(this.pluginsMap.size + 1 > this.canvases.length)) {
                  _context49.next = 15;
                  break;
                }
                for (l = this.canvases.length; l <= this.pluginsMap.size; l++) this.canvases[l] = document.createElement("canvas");
              case 15:
                _context49.next = 17;
                return this.startPluginsLoop((d = e.getContextType) == null ? void 0 : d.call(e));
              case 17:
                _context49.next = 25;
                break;
              case 19:
                _context49.prev = 19;
                _context49.t0 = _context49["catch"](9);
                o.e(this.TAG, "failed to add plugin", _context49.t0);
                _context49.next = 24;
                return this.removePlugin(e);
              case 24:
                throw _context49.t0;
              case 25:
              case "end":
                return _context49.stop();
            }
          }, _callee49, this, [[9, 19]]);
        }));
      }
    }, {
      key: "validatePlugin",
      value: function validatePlugin(e) {
        return e.checkSupport();
      }
    }, {
      key: "validateAndThrow",
      value: function validateAndThrow(e, t) {
        var i = this.validatePlugin(t);
        if (i.isSupported) o.i(this.TAG, "plugin is supported,- ".concat(t.getName()));else {
          var r;
          switch (i.errType) {
            case se.PLATFORM_NOT_SUPPORTED:
              throw r = g.MediaPluginErrors.PlatformNotSupported(m.VIDEO_PLUGINS, "platform not supported, see docs"), this.analytics.failure(e, r), r;
            case se.DEVICE_NOT_SUPPORTED:
              throw r = g.MediaPluginErrors.DeviceNotSupported(m.VIDEO_PLUGINS, "video device not supported, see docs"), this.analytics.failure(e, r), r;
          }
        }
      }
    }, {
      key: "removePlugin",
      value: function removePlugin(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
          var t;
          return _regeneratorRuntime().wrap(function _callee50$(_context50) {
            while (1) switch (_context50.prev = _context50.next) {
              case 0:
                t = e.getName();
                if (this.pluginsMap.get(t)) {
                  _context50.next = 4;
                  break;
                }
                o.w(this.TAG, "plugin - ".concat(t, " not found to remove."));
                return _context50.abrupt("return");
              case 4:
                o.i(this.TAG, "removing plugin ".concat(t));
                this.removePluginEntry(t);
                _context50.t0 = this.pluginsMap.size === 0;
                if (!_context50.t0) {
                  _context50.next = 11;
                  break;
                }
                o.i(this.TAG, "No plugins left, stopping plugins loop");
                _context50.next = 11;
                return this.stopPluginsLoop();
              case 11:
                e.stop();
                this.analytics.removed(t);
              case 13:
              case "end":
                return _context50.stop();
            }
          }, _callee50, this);
        }));
      }
    }, {
      key: "removePluginEntry",
      value: function removePluginEntry(e) {
        this.pluginsMap.delete(e), this.pluginNumFramesToSkip[e] && delete this.pluginNumFramesToSkip[e], this.pluginNumFramesSkipped[e] && delete this.pluginNumFramesSkipped[e];
      }
    }, {
      key: "waitForRestart",
      value: function waitForRestart() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
          return _regeneratorRuntime().wrap(function _callee51$(_context51) {
            while (1) switch (_context51.prev = _context51.next) {
              case 0:
                if (!this.pluginsLoopRunning || this.pluginsLoopState === "running") {
                  _context51.next = 6;
                  break;
                }
              case 1:
                if (!(this.pluginsLoopState === "paused")) {
                  _context51.next = 6;
                  break;
                }
                _context51.next = 4;
                return $(100);
              case 4:
                _context51.next = 1;
                break;
              case 6:
              case "end":
                return _context51.stop();
            }
          }, _callee51, this);
        }));
      }
    }, {
      key: "cleanup",
      value: function cleanup() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
          var e, _iterator9, _step9, t;
          return _regeneratorRuntime().wrap(function _callee52$(_context52) {
            while (1) switch (_context52.prev = _context52.next) {
              case 0:
                _iterator9 = _createForOfIteratorHelper(this.pluginsMap.values());
                _context52.prev = 1;
                _iterator9.s();
              case 3:
                if ((_step9 = _iterator9.n()).done) {
                  _context52.next = 9;
                  break;
                }
                t = _step9.value;
                _context52.next = 7;
                return this.removePlugin(t);
              case 7:
                _context52.next = 3;
                break;
              case 9:
                _context52.next = 14;
                break;
              case 11:
                _context52.prev = 11;
                _context52.t0 = _context52["catch"](1);
                _iterator9.e(_context52.t0);
              case 14:
                _context52.prev = 14;
                _iterator9.f();
                return _context52.finish(14);
              case 17:
                (e = this.outputTrack) == null || e.stop();
              case 18:
              case "end":
                return _context52.stop();
            }
          }, _callee52, this, [[1, 11, 14, 17]]);
        }));
      }
    }, {
      key: "initElementsAndStream",
      value: function initElementsAndStream(e) {
        this.inputCanvas || (this.inputCanvas = document.createElement("canvas")), this.outputCanvas = document.createElement("canvas"), this.inputVideo || (this.inputVideo = document.createElement("video")), this.inputCanvas.getContext("2d"), this.outputCanvas.getContext(e || $e["2D"]);
        var t = this.outputCanvas.captureStream();
        this.outputTrack = t.getVideoTracks()[0];
      }
    }, {
      key: "startPluginsLoop",
      value: function startPluginsLoop(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
          var _this20 = this;
          return _regeneratorRuntime().wrap(function _callee53$(_context53) {
            while (1) switch (_context53.prev = _context53.next) {
              case 0:
                if (this.pluginsLoopRunning) {
                  _context53.next = 11;
                  break;
                }
                this.initElementsAndStream(e), this.pluginsLoopRunning = !0;
                _context53.prev = 2;
                _context53.next = 5;
                return this.hmsTrack.setProcessedTrack(this.outputTrack);
              case 5:
                _context53.next = 10;
                break;
              case 7:
                _context53.prev = 7;
                _context53.t0 = _context53["catch"](2);
                throw this.pluginsLoopRunning = !1, o.e(this.TAG, "error in setting processed track", _context53.t0), _context53.t0;
              case 10:
                this.pluginsLoop().then(function () {
                  o.d(_this20.TAG, "processLoop stopped");
                });
              case 11:
              case "end":
                return _context53.stop();
            }
          }, _callee53, this, [[2, 7]]);
        }));
      }
    }, {
      key: "stopPluginsLoop",
      value: function stopPluginsLoop() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
          var e;
          return _regeneratorRuntime().wrap(function _callee54$(_context54) {
            while (1) switch (_context54.prev = _context54.next) {
              case 0:
                this.pluginsLoopRunning = !1;
                _context54.next = 3;
                return this.hmsTrack.setProcessedTrack(void 0);
              case 3:
                this.resetCanvases();
                (e = this.outputTrack) == null || e.stop();
                this.inputVideo && (this.inputVideo.srcObject = null, this.inputVideo = void 0);
              case 6:
              case "end":
                return _context54.stop();
            }
          }, _callee54, this);
        }));
      }
    }, {
      key: "pluginsLoop",
      value: function pluginsLoop() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
          var _this21 = this;
          var e, t, i, r;
          return _regeneratorRuntime().wrap(function _callee56$(_context56) {
            while (1) switch (_context56.prev = _context56.next) {
              case 0:
                if (!this.pluginsLoopRunning) {
                  _context56.next = 27;
                  break;
                }
                e = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, t = Math.floor(1e3 / e);
                if (!(!this.hmsTrack.enabled || this.hmsTrack.nativeTrack.readyState === "ended")) {
                  _context56.next = 8;
                  break;
                }
                this.pluginsLoopState === "running" && this.resetCanvases();
                this.pluginsLoopState = "paused";
                _context56.next = 7;
                return $(t);
              case 7:
                return _context56.abrupt("continue", 25);
              case 8:
                i = 0;
                _context56.prev = 9;
                _context56.next = 12;
                return this.analytics.preProcessWithTime(function () {
                  return c(_this21, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
                    return _regeneratorRuntime().wrap(function _callee55$(_context55) {
                      while (1) switch (_context55.prev = _context55.next) {
                        case 0:
                          _context55.next = 2;
                          return this.doPreProcessing();
                        case 2:
                          return _context55.abrupt("return", _context55.sent);
                        case 3:
                        case "end":
                          return _context55.stop();
                      }
                    }, _callee55, this);
                  }));
                });
              case 12:
                r = Date.now();
                _context56.next = 15;
                return this.processFramesThroughPlugins();
              case 15:
                i = Math.floor(Date.now() - r);
                i > t && (i = t);
                _context56.next = 22;
                break;
              case 19:
                _context56.prev = 19;
                _context56.t0 = _context56["catch"](9);
                o.e(this.TAG, "error in plugins loop", _context56.t0);
              case 22:
                this.pluginsLoopState = "running";
                _context56.next = 25;
                return $(t - i);
              case 25:
                _context56.next = 0;
                break;
              case 27:
              case "end":
                return _context56.stop();
            }
          }, _callee56, this, [[9, 19]]);
        }));
      }
    }, {
      key: "doPreProcessing",
      value: function doPreProcessing() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
          return _regeneratorRuntime().wrap(function _callee57$(_context57) {
            while (1) switch (_context57.prev = _context57.next) {
              case 0:
                _context57.next = 2;
                return this.addTrackToVideo();
              case 2:
                _context57.next = 4;
                return this.updateInputCanvas();
              case 4:
              case "end":
                return _context57.stop();
            }
          }, _callee57, this);
        }));
      }
    }, {
      key: "processFramesThroughPlugins",
      value: function processFramesThroughPlugins() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
          var _this22 = this;
          var e, _iterator10, _step10, _loop;
          return _regeneratorRuntime().wrap(function _callee62$(_context63) {
            while (1) switch (_context63.prev = _context63.next) {
              case 0:
                this.canvases[0] = this.inputCanvas;
                e = 0;
                _iterator10 = _createForOfIteratorHelper(this.pluginsMap.values());
                _context63.prev = 3;
                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                  var t, i, r, s, a, d;
                  return _regeneratorRuntime().wrap(function _loop$(_context62) {
                    while (1) switch (_context62.prev = _context62.next) {
                      case 0:
                        t = _step10.value;
                        i = t.getName();
                        if (!t) {
                          _context62.next = 39;
                          break;
                        }
                        _context62.prev = 3;
                        r = _this22.checkIfSkipRequired(i);
                        if (!(t.getPluginType() === Le.TRANSFORM)) {
                          _context62.next = 27;
                          break;
                        }
                        s = function s(a, d) {
                          return c(_this22, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
                            return _regeneratorRuntime().wrap(function _callee58$(_context58) {
                              while (1) switch (_context58.prev = _context58.next) {
                                case 0:
                                  _context58.prev = 0;
                                  _context58.next = 3;
                                  return t.processVideoFrame(a, d, r);
                                case 3:
                                  _context58.next = 8;
                                  break;
                                case 5:
                                  _context58.prev = 5;
                                  _context58.t0 = _context58["catch"](0);
                                  o.e(this.TAG, "error in processing plugin ".concat(i), _context58.t0);
                                case 8:
                                case "end":
                                  return _context58.stop();
                              }
                            }, _callee58, this, [[0, 5]]);
                          }));
                        };
                        if (!r) {
                          _context62.next = 17;
                          break;
                        }
                        if (!(e === _this22.pluginsMap.size - 1)) {
                          _context62.next = 13;
                          break;
                        }
                        _context62.next = 11;
                        return s(_this22.canvases[e], _this22.outputCanvas);
                      case 11:
                        _context62.next = 15;
                        break;
                      case 13:
                        _context62.next = 15;
                        return s(_this22.canvases[e], _this22.canvases[e + 1]);
                      case 15:
                        _context62.next = 25;
                        break;
                      case 17:
                        a = _this22.canvases[e], d = _this22.canvases[e + 1];
                        if (!(e === _this22.pluginsMap.size - 1)) {
                          _context62.next = 23;
                          break;
                        }
                        _context62.next = 21;
                        return _this22.analytics.processWithTime(i, function () {
                          return c(_this22, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
                            return _regeneratorRuntime().wrap(function _callee59$(_context59) {
                              while (1) switch (_context59.prev = _context59.next) {
                                case 0:
                                  return _context59.abrupt("return", s(a, this.outputCanvas));
                                case 1:
                                case "end":
                                  return _context59.stop();
                              }
                            }, _callee59, this);
                          }));
                        });
                      case 21:
                        _context62.next = 25;
                        break;
                      case 23:
                        _context62.next = 25;
                        return _this22.analytics.processWithTime(i, function () {
                          return c(_this22, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
                            return _regeneratorRuntime().wrap(function _callee60$(_context60) {
                              while (1) switch (_context60.prev = _context60.next) {
                                case 0:
                                  return _context60.abrupt("return", s(a, d));
                                case 1:
                                case "end":
                                  return _context60.stop();
                              }
                            }, _callee60);
                          }));
                        });
                      case 25:
                        _context62.next = 31;
                        break;
                      case 27:
                        _context62.t0 = t.getPluginType() === Le.ANALYZE && !r;
                        if (!_context62.t0) {
                          _context62.next = 31;
                          break;
                        }
                        _context62.next = 31;
                        return _this22.analytics.processWithTime(i, function () {
                          return c(_this22, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
                            return _regeneratorRuntime().wrap(function _callee61$(_context61) {
                              while (1) switch (_context61.prev = _context61.next) {
                                case 0:
                                  _context61.next = 2;
                                  return t.processVideoFrame(this.inputCanvas);
                                case 2:
                                  return _context61.abrupt("return", _context61.sent);
                                case 3:
                                case "end":
                                  return _context61.stop();
                              }
                            }, _callee61, this);
                          }));
                        });
                      case 31:
                        _context62.next = 38;
                        break;
                      case 33:
                        _context62.prev = 33;
                        _context62.t1 = _context62["catch"](3);
                        o.e(_this22.TAG, "error in processing plugin ".concat(i), _context62.t1);
                        _context62.next = 38;
                        return _this22.removePlugin(t);
                      case 38:
                        e++;
                      case 39:
                      case "end":
                        return _context62.stop();
                    }
                  }, _loop, null, [[3, 33]]);
                });
                _iterator10.s();
              case 6:
                if ((_step10 = _iterator10.n()).done) {
                  _context63.next = 10;
                  break;
                }
                return _context63.delegateYield(_loop(), "t0", 8);
              case 8:
                _context63.next = 6;
                break;
              case 10:
                _context63.next = 15;
                break;
              case 12:
                _context63.prev = 12;
                _context63.t1 = _context63["catch"](3);
                _iterator10.e(_context63.t1);
              case 15:
                _context63.prev = 15;
                _iterator10.f();
                return _context63.finish(15);
              case 18:
              case "end":
                return _context63.stop();
            }
          }, _callee62, this, [[3, 12, 15, 18]]);
        }));
      }
    }, {
      key: "addTrackToVideo",
      value: function addTrackToVideo() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
          var t, e;
          return _regeneratorRuntime().wrap(function _callee63$(_context64) {
            while (1) switch (_context64.prev = _context64.next) {
              case 0:
                if (this.inputVideo) {
                  _context64.next = 2;
                  break;
                }
                return _context64.abrupt("return");
              case 2:
                e = this.inputVideo.srcObject;
                _context64.t0 = e !== null && e instanceof MediaStream && ((t = e.getVideoTracks()[0]) == null ? void 0 : t.id) === this.hmsTrack.nativeTrack.id;
                if (_context64.t0) {
                  _context64.next = 11;
                  break;
                }
                this.inputVideo.pause();
                this.inputVideo.srcObject = new MediaStream([this.hmsTrack.nativeTrack]);
                this.inputVideo.muted = !0;
                this.inputVideo.playsInline = !0;
                _context64.next = 11;
                return this.inputVideo.play();
              case 11:
              case "end":
                return _context64.stop();
            }
          }, _callee63, this);
        }));
      }
    }, {
      key: "updateInputCanvas",
      value: function updateInputCanvas() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
          var _this$hmsTrack$getMed, _this$hmsTrack$getMed2, e, _this$hmsTrack$getMed3, t;
          return _regeneratorRuntime().wrap(function _callee64$(_context65) {
            while (1) switch (_context65.prev = _context65.next) {
              case 0:
                if (!(!this.inputCanvas || !this.inputVideo)) {
                  _context65.next = 2;
                  break;
                }
                return _context65.abrupt("return");
              case 2:
                _this$hmsTrack$getMed = this.hmsTrack.getMediaTrackSettings(), _this$hmsTrack$getMed2 = _this$hmsTrack$getMed.width, e = _this$hmsTrack$getMed2 === void 0 ? Or : _this$hmsTrack$getMed2, _this$hmsTrack$getMed3 = _this$hmsTrack$getMed.height, t = _this$hmsTrack$getMed3 === void 0 ? xr : _this$hmsTrack$getMed3;
                this.inputCanvas.height !== t && (this.inputCanvas.height = t), this.inputCanvas.width !== e && (this.inputCanvas.width = e), this.inputCanvas.getContext("2d").drawImage(this.inputVideo, 0, 0, e, t);
              case 4:
              case "end":
                return _context65.stop();
            }
          }, _callee64, this);
        }));
      }
    }, {
      key: "resetCanvases",
      value: function resetCanvases() {
        if (!this.outputCanvas || !this.inputCanvas) return;
        var e = this.inputCanvas.getContext("2d");
        e && (e.fillStyle = "rgb(0, 0, 0)", e.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height)), this.canvases = [];
      }
    }, {
      key: "checkIfSkipRequired",
      value: function checkIfSkipRequired(e) {
        var t = !1;
        return this.pluginNumFramesSkipped[e] < this.pluginNumFramesToSkip[e] ? (this.pluginNumFramesSkipped[e]++, t = !0) : (t = !1, this.pluginNumFramesSkipped[e] = 0), t;
      }
    }]);
    return nt;
  }();
exports.HMSVideoPluginsManager = nt;
function Gi(n, e) {
  return function (i) {
    return i in n && n[i] !== e[i];
  };
}
var ee = /*#__PURE__*/function (_Ge) {
  _inherits(ee, _Ge);
  var _super9 = _createSuper(ee);
  function ee(e, t, i, r) {
    var _this23;
    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Y().build();
    _classCallCheck(this, ee);
    _this23 = _super9.call(this, e, t, i);
    _this23.eventBus = r;
    _this23._layerDefinitions = [];
    _this23.TAG = "[HMSLocalVideoTrack]";
    _this23.isCurrentTab = !1;
    _this23.isPublished = !1;
    _this23.buildNewSettings = function (e) {
      var _S2 = S(S({}, _this23.settings), e),
        t = _S2.width,
        i = _S2.height,
        r = _S2.codec,
        s = _S2.maxFramerate,
        a = _S2.maxBitrate,
        d = _S2.deviceId,
        l = _S2.advanced,
        u = _S2.facingMode;
      return new Re(t, i, r, s, d, l, a, u);
    };
    _this23.handleSettingsChange = function (e) {
      return c(_assertThisInitialized(_this23), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee65$(_context66) {
          while (1) switch (_context66.prev = _context66.next) {
            case 0:
              t = this.stream, i = Gi(e, this.settings);
              _context66.t0 = i("maxBitrate") && e.maxBitrate;
              if (!_context66.t0) {
                _context66.next = 5;
                break;
              }
              _context66.next = 5;
              return t.setMaxBitrateAndFramerate(this);
            case 5:
              _context66.t1 = i("width") || i("height") || i("advanced");
              if (!_context66.t1) {
                _context66.next = 9;
                break;
              }
              _context66.next = 9;
              return this.nativeTrack.applyConstraints(e.toConstraints());
            case 9:
            case "end":
              return _context66.stop();
          }
        }, _callee65, this);
      }));
    };
    _this23.handleDeviceChange = function (e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      return c(_assertThisInitialized(_this23), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
        var _r3;
        return _regeneratorRuntime().wrap(function _callee66$(_context67) {
          while (1) switch (_context67.prev = _context67.next) {
            case 0:
              if (!(Gi(e, this.settings)("deviceId") && this.source === "regular")) {
                _context67.next = 11;
                break;
              }
              if (!this.enabled) {
                _context67.next = 10;
                break;
              }
              delete e.facingMode;
              _context67.next = 5;
              return this.replaceTrackWith(e);
            case 5:
              _r3 = _context67.sent;
              _context67.next = 8;
              return this.replaceSender(_r3, this.enabled);
            case 8:
              this.nativeTrack = _r3;
              this.videoHandler.updateSinks();
            case 10:
              t || Q.updateSelection("videoInput", {
                deviceId: e.deviceId,
                groupId: this.nativeTrack.getSettings().groupId
              });
            case 11:
            case "end":
              return _context67.stop();
          }
        }, _callee66, this);
      }));
    };
    _this23.removeOrReplaceProcessedTrack = function (e) {
      return c(_assertThisInitialized(_this23), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
        return _regeneratorRuntime().wrap(function _callee67$(_context68) {
          while (1) switch (_context68.prev = _context68.next) {
            case 0:
              if (!e) {
                _context68.next = 13;
                break;
              }
              _context68.t0 = e !== this.processedTrack;
              if (!_context68.t0) {
                _context68.next = 11;
                break;
              }
              if (!this.processedTrack) {
                _context68.next = 8;
                break;
              }
              _context68.next = 6;
              return this.stream.replaceSenderTrack(this.processedTrack, e);
            case 6:
              _context68.next = 10;
              break;
            case 8:
              _context68.next = 10;
              return this.stream.replaceSenderTrack(this.nativeTrack, e);
            case 10:
              this.processedTrack = e;
            case 11:
              _context68.next = 18;
              break;
            case 13:
              _context68.t1 = this.processedTrack;
              if (!_context68.t1) {
                _context68.next = 17;
                break;
              }
              _context68.next = 17;
              return this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack);
            case 17:
              this.processedTrack = void 0;
            case 18:
            case "end":
              return _context68.stop();
          }
        }, _callee67, this);
      }));
    };
    e.tracks.push(_assertThisInitialized(_this23)), _this23.setVideoHandler(new Be(_assertThisInitialized(_this23))), _this23.settings = s, s.deviceId !== t.getSettings().deviceId && t.enabled && (_this23.settings = _this23.buildNewSettings({
      deviceId: t.getSettings().deviceId
    })), _this23.pluginsManager = new nt(_assertThisInitialized(_this23), r), _this23.setFirstTrackId(_this23.trackId);
    return _this23;
  }
  _createClass(ee, [{
    key: "setSimulcastDefinitons",
    value: function setSimulcastDefinitons(e) {
      this._layerDefinitions = e;
    }
  }, {
    key: "getSimulcastDefinitions",
    value: function getSimulcastDefinitions() {
      return this._layerDefinitions;
    }
  }, {
    key: "setEnabled",
    value: function setEnabled(e) {
      var _this24 = this;
      var t = function t(i) {
        return _get(_getPrototypeOf(ee.prototype), i, _this24);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
        var r, s;
        return _regeneratorRuntime().wrap(function _callee68$(_context69) {
          while (1) switch (_context69.prev = _context69.next) {
            case 0:
              if (!(e !== this.enabled)) {
                _context69.next = 22;
                break;
              }
              if (!(t("setEnabled").call(this, e), this.source === "regular")) {
                _context69.next = 21;
                break;
              }
              if (!e) {
                _context69.next = 8;
                break;
              }
              _context69.next = 5;
              return this.replaceTrackWith(this.settings);
            case 5:
              s = _context69.sent;
              _context69.next = 11;
              break;
            case 8:
              _context69.next = 10;
              return this.replaceTrackWithBlank();
            case 10:
              s = _context69.sent;
            case 11:
              _context69.next = 13;
              return this.replaceSender(s, e);
            case 13:
              (r = this.nativeTrack) == null || r.stop();
              this.nativeTrack = s;
              _context69.t0 = e;
              if (!_context69.t0) {
                _context69.next = 20;
                break;
              }
              _context69.next = 19;
              return this.pluginsManager.waitForRestart();
            case 19:
              this.settings = this.buildNewSettings({
                deviceId: s.getSettings().deviceId
              });
            case 20:
              this.videoHandler.updateSinks();
            case 21:
              this.eventBus.localVideoEnabled.publish({
                enabled: e,
                track: this
              });
            case 22:
            case "end":
              return _context69.stop();
          }
        }, _callee68, this);
      }));
    }
  }, {
    key: "isPublishedTrackId",
    value: function isPublishedTrackId(e) {
      return this.publishedTrackId === e;
    }
  }, {
    key: "addSink",
    value: function addSink(e) {
      this.addSinkInternal(e, this.processedTrack || this.nativeTrack);
    }
  }, {
    key: "setSettings",
    value: function setSettings(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
        var i;
        return _regeneratorRuntime().wrap(function _callee69$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              i = this.buildNewSettings(e);
              _context70.next = 3;
              return this.handleDeviceChange(i, t);
            case 3:
              if (this.enabled) {
                _context70.next = 6;
                break;
              }
              this.settings = i;
              return _context70.abrupt("return");
            case 6:
              _context70.next = 8;
              return this.handleSettingsChange(i);
            case 8:
              this.settings = i;
            case 9:
            case "end":
              return _context70.stop();
          }
        }, _callee69, this);
      }));
    }
  }, {
    key: "getPlugins",
    value: function getPlugins() {
      return this.pluginsManager.getPlugins();
    }
  }, {
    key: "addPlugin",
    value: function addPlugin(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
        return _regeneratorRuntime().wrap(function _callee70$(_context71) {
          while (1) switch (_context71.prev = _context71.next) {
            case 0:
              return _context71.abrupt("return", this.pluginsManager.addPlugin(e, t));
            case 1:
            case "end":
              return _context71.stop();
          }
        }, _callee70, this);
      }));
    }
  }, {
    key: "removePlugin",
    value: function removePlugin(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
        return _regeneratorRuntime().wrap(function _callee71$(_context72) {
          while (1) switch (_context72.prev = _context72.next) {
            case 0:
              return _context72.abrupt("return", this.pluginsManager.removePlugin(e));
            case 1:
            case "end":
              return _context72.stop();
          }
        }, _callee71, this);
      }));
    }
  }, {
    key: "validatePlugin",
    value: function validatePlugin(e) {
      return this.pluginsManager.validatePlugin(e);
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      var _this25 = this;
      var e = function e(t) {
        return _get(_getPrototypeOf(ee.prototype), t, _this25);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
        var i;
        return _regeneratorRuntime().wrap(function _callee72$(_context73) {
          while (1) switch (_context73.prev = _context73.next) {
            case 0:
              e("cleanup").call(this);
              this.transceiver = void 0;
              _context73.next = 4;
              return this.pluginsManager.cleanup();
            case 4:
              (i = this.processedTrack) == null || i.stop();
              this.isPublished = !1;
            case 6:
            case "end":
              return _context73.stop();
          }
        }, _callee72, this);
      }));
    }
  }, {
    key: "cropTo",
    value: function cropTo(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
        return _regeneratorRuntime().wrap(function _callee73$(_context74) {
          while (1) switch (_context74.prev = _context74.next) {
            case 0:
              if (!(!!e && this.source === "screen")) {
                _context74.next = 11;
                break;
              }
              _context74.prev = 1;
              _context74.t0 = this.nativeTrack.cropTo;
              if (!_context74.t0) {
                _context74.next = 6;
                break;
              }
              _context74.next = 6;
              return this.nativeTrack.cropTo(e);
            case 6:
              _context74.next = 11;
              break;
            case 8:
              _context74.prev = 8;
              _context74.t1 = _context74["catch"](1);
              throw o.e(this.TAG, "failed to crop screenshare capture - ", _context74.t1), g.TracksErrors.GenericTrack(m.TRACK, "failed to crop screenshare capture");
            case 11:
            case "end":
              return _context74.stop();
          }
        }, _callee73, this, [[1, 8]]);
      }));
    }
  }, {
    key: "getCaptureHandle",
    value: function getCaptureHandle() {
      if (this.nativeTrack.getCaptureHandle) return this.nativeTrack.getCaptureHandle();
    }
  }, {
    key: "setProcessedTrack",
    value: function setProcessedTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
        return _regeneratorRuntime().wrap(function _callee74$(_context75) {
          while (1) switch (_context75.prev = _context75.next) {
            case 0:
              if (this.nativeTrack.enabled) {
                _context75.next = 3;
                break;
              }
              this.processedTrack = e;
              return _context75.abrupt("return");
            case 3:
              _context75.next = 5;
              return this.removeOrReplaceProcessedTrack(e);
            case 5:
              this.videoHandler.updateSinks();
            case 6:
            case "end":
              return _context75.stop();
          }
        }, _callee74, this);
      }));
    }
  }, {
    key: "getTrackIDBeingSent",
    value: function getTrackIDBeingSent() {
      return this.getTrackBeingSent().id;
    }
  }, {
    key: "getTrackBeingSent",
    value: function getTrackBeingSent() {
      return this.enabled ? this.processedTrack || this.nativeTrack : this.nativeTrack;
    }
  }, {
    key: "switchCamera",
    value: function switchCamera() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
        var r, e, t, i;
        return _regeneratorRuntime().wrap(function _callee75$(_context76) {
          while (1) switch (_context76.prev = _context76.next) {
            case 0:
              e = this.getMediaTrackSettings().facingMode;
              if (!(!e || this.source !== "regular")) {
                _context76.next = 4;
                break;
              }
              o.d(this.TAG, "facingMode not supported");
              return _context76.abrupt("return");
            case 4:
              t = e === be.ENVIRONMENT ? be.USER : be.ENVIRONMENT;
              (r = this.nativeTrack) == null || r.stop();
              _context76.next = 8;
              return this.replaceTrackWith(this.buildNewSettings({
                facingMode: t,
                deviceId: void 0
              }));
            case 8:
              i = _context76.sent;
              _context76.next = 11;
              return this.replaceSender(i, this.enabled);
            case 11:
              this.nativeTrack = i;
              this.videoHandler.updateSinks();
              this.settings = this.buildNewSettings({
                deviceId: this.nativeTrack.getSettings().deviceId,
                facingMode: t
              });
              Q.updateSelection("videoInput", {
                deviceId: this.settings.deviceId,
                groupId: this.nativeTrack.getSettings().groupId
              });
            case 15:
            case "end":
              return _context76.stop();
          }
        }, _callee75, this);
      }));
    }
  }, {
    key: "replaceTrackWith",
    value: function replaceTrackWith(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee76$(_context77) {
          while (1) switch (_context77.prev = _context77.next) {
            case 0:
              t = this.nativeTrack;
              t == null || t.stop();
              _context77.next = 4;
              return it(e);
            case 4:
              i = _context77.sent;
              return _context77.abrupt("return", (o.d(this.TAG, "replaceTrack, Previous track stopped", t, "newTrack", i), this.settings.deviceId === "default" && (this.settings = this.buildNewSettings({
                deviceId: this.nativeTrack.getSettings().deviceId
              })), i));
            case 6:
            case "end":
              return _context77.stop();
          }
        }, _callee76, this);
      }));
    }
  }, {
    key: "replaceTrackWithBlank",
    value: function replaceTrackWithBlank() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
        var e, t;
        return _regeneratorRuntime().wrap(function _callee77$(_context78) {
          while (1) switch (_context78.prev = _context78.next) {
            case 0:
              e = this.nativeTrack, t = me.getEmptyVideoTrack(e);
              return _context78.abrupt("return", (e == null || e.stop(), o.d(this.TAG, "replaceTrackWithBlank, Previous track stopped", e, "newTrack", t), t));
            case 2:
            case "end":
              return _context78.stop();
          }
        }, _callee77, this);
      }));
    }
  }, {
    key: "replaceSender",
    value: function replaceSender(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
        var i;
        return _regeneratorRuntime().wrap(function _callee78$(_context79) {
          while (1) switch (_context79.prev = _context79.next) {
            case 0:
              i = this.stream;
              if (!t) {
                _context79.next = 6;
                break;
              }
              _context79.next = 4;
              return i.replaceSenderTrack(this.nativeTrack, this.processedTrack || e);
            case 4:
              _context79.next = 8;
              break;
            case 6:
              _context79.next = 8;
              return i.replaceSenderTrack(this.processedTrack || this.nativeTrack, e);
            case 8:
              _context79.next = 10;
              return i.replaceStreamTrack(this.nativeTrack, e);
            case 10:
            case "end":
              return _context79.stop();
          }
        }, _callee78, this);
      }));
    }
  }]);
  return ee;
}(Ge);
exports.HMSLocalVideoTrack = ee;
var _e = "renegotiation-callback-id",
  ot = "ion-sfu",
  ct = 100,
  We = 5,
  Ui = 60,
  Bi = 12e3,
  $i = 1e3,
  Wi = 5,
  De = "SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID",
  Ki = 6e4,
  Ft = 5e3,
  qi = 1e3,
  ji = !1,
  Ji = "https://event.100ms.live/v2/client/report",
  zi = "https://event-nonprod.100ms.live/v2/client/report",
  Qi = 100,
  W = {
    DEVICE_CHANGE: "device-change",
    LOCAL_AUDIO_ENABLED: "local-audio-enabled",
    LOCAL_VIDEO_ENABLED: "local-video-enabled",
    STATS_UPDATE: "stats-update",
    RTC_STATS_UPDATE: "rtc-stats-update",
    TRACK_DEGRADED: "track-degraded",
    TRACK_RESTORED: "track-restored",
    TRACK_AUDIO_LEVEL_UPDATE: "track-audio-level-update",
    LOCAL_AUDIO_SILENCE: "local-audio-silence",
    ANALYTICS: "analytics",
    AUDIO_PLUGIN_FAILED: "audio-plugin-failed",
    POLICY_CHANGE: "policy-change",
    LOCAL_ROLE_UPDATE: "local-role-update",
    AUDIO_TRACK_UPDATE: "audio-track-update",
    AUDIO_TRACK_ADDED: "audio-track-added",
    AUDIO_TRACK_REMOVED: "audio-track-removed",
    AUTOPLAY_ERROR: "autoplay-error",
    LEAVE: "leave"
  };
var X = /*#__PURE__*/function (_Ge2) {
    _inherits(X, _Ge2);
    var _super10 = _createSuper(X);
    function X(e, t, i) {
      var _this26;
      _classCallCheck(this, X);
      _this26 = _super10.call(this, e, t, i);
      _this26._degraded = !1;
      _this26._degradedAt = null;
      _this26._layerDefinitions = [];
      _this26.history = new Yi();
      _this26.preferredLayer = F.HIGH;
      _this26.setVideoHandler(new Be(_assertThisInitialized(_this26)));
      return _this26;
    }
    _createClass(X, [{
      key: "degraded",
      get: function get() {
        return this._degraded;
      }
    }, {
      key: "degradedAt",
      get: function get() {
        return this._degradedAt;
      }
    }, {
      key: "setEnabled",
      value: function setEnabled(e) {
        var _this27 = this;
        var t = function t(i) {
          return _get(_getPrototypeOf(X.prototype), i, _this27);
        };
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
          return _regeneratorRuntime().wrap(function _callee79$(_context80) {
            while (1) switch (_context80.prev = _context80.next) {
              case 0:
                e !== this.enabled && (t("setEnabled").call(this, e), this.videoHandler.updateSinks());
              case 1:
              case "end":
                return _context80.stop();
            }
          }, _callee79, this);
        }));
      }
    }, {
      key: "setPreferredLayer",
      value: function setPreferredLayer(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
          return _regeneratorRuntime().wrap(function _callee80$(_context81) {
            while (1) switch (_context81.prev = _context81.next) {
              case 0:
                if (!(e === F.NONE)) {
                  _context81.next = 3;
                  break;
                }
                o.w("layer ".concat(F.NONE, " will be ignored"));
                return _context81.abrupt("return");
              case 3:
                if (!(this.preferredLayer = e, !!this.shouldSendVideoLayer(e, "preferLayer"))) {
                  _context81.next = 10;
                  break;
                }
                if (this.hasSinks()) {
                  _context81.next = 7;
                  break;
                }
                o.d("[Remote Track] ".concat(this.logIdentifier, "\n        streamId=").concat(this.stream.id, " \n        trackId=").concat(this.trackId, "\n        saving ").concat(e, ", source=").concat(this.source, "\n        Track does not have any sink"));
                return _context81.abrupt("return");
              case 7:
                _context81.next = 9;
                return this.requestLayer(e, "preferLayer");
              case 9:
                this.pushInHistory("uiPreferLayer-".concat(e));
              case 10:
              case "end":
                return _context81.stop();
            }
          }, _callee80, this);
        }));
      }
    }, {
      key: "getSimulcastLayer",
      value: function getSimulcastLayer() {
        return this.stream.getSimulcastLayer();
      }
    }, {
      key: "getLayer",
      value: function getLayer() {
        return this.stream.getVideoLayer();
      }
    }, {
      key: "getPreferredLayer",
      value: function getPreferredLayer() {
        return this.preferredLayer;
      }
    }, {
      key: "addSink",
      value: function addSink(e) {
        var _this28 = this;
        var t = function t(i) {
          return _get(_getPrototypeOf(X.prototype), i, _this28);
        };
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
          return _regeneratorRuntime().wrap(function _callee81$(_context82) {
            while (1) switch (_context82.prev = _context82.next) {
              case 0:
                t("addSink").call(this, e);
                _context82.next = 3;
                return this.updateLayer("addSink");
              case 3:
                this.pushInHistory("uiSetLayer-high");
              case 4:
              case "end":
                return _context82.stop();
            }
          }, _callee81, this);
        }));
      }
    }, {
      key: "removeSink",
      value: function removeSink(e) {
        var _this29 = this;
        var t = function t(i) {
          return _get(_getPrototypeOf(X.prototype), i, _this29);
        };
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
          return _regeneratorRuntime().wrap(function _callee82$(_context83) {
            while (1) switch (_context83.prev = _context83.next) {
              case 0:
                t("removeSink").call(this, e);
                _context83.next = 3;
                return this.updateLayer("removeSink");
              case 3:
                this._degraded = !1;
                this.pushInHistory("uiSetLayer-none");
              case 5:
              case "end":
                return _context83.stop();
            }
          }, _callee82, this);
        }));
      }
    }, {
      key: "getSimulcastDefinitions",
      value: function getSimulcastDefinitions() {
        return _toConsumableArray(this._layerDefinitions);
      }
    }, {
      key: "setSimulcastDefinitons",
      value: function setSimulcastDefinitons(e) {
        this._layerDefinitions = e;
      }
    }, {
      key: "setLayerFromServer",
      value: function setLayerFromServer(e) {
        this._degraded = (e.publisher_degraded || e.subscriber_degraded) && e.current_layer === F.NONE, this._degradedAt = this._degraded ? new Date() : this._degradedAt;
        var t = e.current_layer;
        return o.d("[Remote Track] ".concat(this.logIdentifier, " \n      streamId=").concat(this.stream.id, " \n      trackId=").concat(this.trackId, "\n      layer update from sfu\n      currLayer=").concat(e.current_layer, "\n      preferredLayer=").concat(e.expected_layer, "\n      sub_degraded=").concat(e.subscriber_degraded, "\n      pub_degraded=").concat(e.publisher_degraded, "\n      isDegraded=").concat(this._degraded)), this.stream.setVideoLayerLocally(t, this.logIdentifier, "setLayerFromServer"), this.pushInHistory("sfuLayerUpdate-".concat(t)), this._degraded;
      }
    }, {
      key: "setDegradedFromSdk",
      value: function setDegradedFromSdk(e) {
        this._degraded = e, this._degradedAt = e ? new Date() : this._degradedAt, this.updateLayer("sdkDegradation"), this.pushInHistory(e ? "sdkDegraded-none" : "sdkRecovered-high");
      }
    }, {
      key: "updateLayer",
      value: function updateLayer(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee83() {
          var t;
          return _regeneratorRuntime().wrap(function _callee83$(_context84) {
            while (1) switch (_context84.prev = _context84.next) {
              case 0:
                t = this.degraded || !this.hasSinks() ? F.NONE : this.preferredLayer;
                _context84.t0 = !this.shouldSendVideoLayer(t, e);
                if (_context84.t0) {
                  _context84.next = 5;
                  break;
                }
                _context84.next = 5;
                return this.requestLayer(t, e);
              case 5:
              case "end":
                return _context84.stop();
            }
          }, _callee83, this);
        }));
      }
    }, {
      key: "pushInHistory",
      value: function pushInHistory(e) {
        ji && this.history.push({
          name: e,
          layer: this.getLayer(),
          degraded: this.degraded
        });
      }
    }, {
      key: "requestLayer",
      value: function requestLayer(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {
          var _i3;
          return _regeneratorRuntime().wrap(function _callee84$(_context85) {
            while (1) switch (_context85.prev = _context85.next) {
              case 0:
                _context85.prev = 0;
                _context85.next = 3;
                return this.stream.setVideoLayer(e, this.trackId, this.logIdentifier, t);
              case 3:
                _i3 = _context85.sent;
                return _context85.abrupt("return", (o.d("[Remote Track] ".concat(this.logIdentifier, " \n      streamId=").concat(this.stream.id, "\n      trackId=").concat(this.trackId, "\n      Requested layer ").concat(e, ", source=").concat(t)), _i3));
              case 7:
                _context85.prev = 7;
                _context85.t0 = _context85["catch"](0);
                throw o.d("[Remote Track] ".concat(this.logIdentifier, " \n      streamId=").concat(this.stream.id, "\n      trackId=").concat(this.trackId, "\n      Failed to set layer ").concat(e, ", source=").concat(t, "\n      error=").concat(_context85.t0.message)), _context85.t0;
              case 10:
              case "end":
                return _context85.stop();
            }
          }, _callee84, this, [[0, 7]]);
        }));
      }
    }, {
      key: "shouldSendVideoLayer",
      value: function shouldSendVideoLayer(e, t) {
        var i = this.getLayer();
        return this.degraded && e === F.NONE ? !0 : i === e ? (o.d("[Remote Track] ".concat(this.logIdentifier), "Not sending update, already on layer ".concat(e, ", source=").concat(t)), !1) : !0;
      }
    }]);
    return X;
  }(Ge),
  Yi = /*#__PURE__*/function () {
    function Yi() {
      _classCallCheck(this, Yi);
      this.history = [];
    }
    _createClass(Yi, [{
      key: "push",
      value: function push(e) {
        e.time = new Date().toISOString().split("T")[1], this.history.push(e);
      }
    }]);
    return Yi;
  }();
exports.HMSRemoteVideoTrack = X;
var ke = /*#__PURE__*/function (_Ce2) {
  _inherits(ke, _Ce2);
  var _super11 = _createSuper(ke);
  function ke() {
    var _this30;
    _classCallCheck(this, ke);
    _this30 = _super11.apply(this, arguments);
    _this30.TAG = "[HMSLocalStream]";
    _this30.connection = null;
    return _this30;
  }
  _createClass(ke, [{
    key: "setConnection",
    value: function setConnection(e) {
      this.connection = e;
    }
  }, {
    key: "addTransceiver",
    value: function addTransceiver(e, t) {
      var i = this.connection.addTransceiver(e.getTrackBeingSent(), {
        streams: [this.nativeStream],
        direction: "sendonly",
        sendEncodings: this.getTrackEncodings(e, t)
      });
      return this.setPreferredCodec(i, e.nativeTrack.kind), e.transceiver = i, i;
    }
  }, {
    key: "setMaxBitrateAndFramerate",
    value: function setMaxBitrateAndFramerate(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {
        var t;
        return _regeneratorRuntime().wrap(function _callee85$(_context86) {
          while (1) switch (_context86.prev = _context86.next) {
            case 0:
              _context86.next = 2;
              return (t = this.connection) == null ? void 0 : t.setMaxBitrateAndFramerate(e);
            case 2:
            case "end":
              return _context86.stop();
          }
        }, _callee85, this);
      }));
    }
  }, {
    key: "setPreferredCodec",
    value: function setPreferredCodec(e, t) {}
  }, {
    key: "replaceStreamTrack",
    value: function replaceStreamTrack(e, t) {
      this.nativeStream.addTrack(t), this.nativeStream.removeTrack(e), o.d(this.TAG, "Native stream tracks after replace", this.nativeStream.getAudioTracks().map(ue), "prev Track - ".concat(ue(e)), "new Track - ".concat(ue(t)));
    }
  }, {
    key: "replaceSenderTrack",
    value: function replaceSenderTrack(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {
        var i;
        return _regeneratorRuntime().wrap(function _callee86$(_context87) {
          while (1) switch (_context87.prev = _context87.next) {
            case 0:
              if (!(!this.connection || this.connection.connectionState === "closed")) {
                _context87.next = 3;
                break;
              }
              o.d(this.TAG, "publish connection is not initialised or closed");
              return _context87.abrupt("return");
            case 3:
              i = this.connection.getSenders().find(function (r) {
                return r.track && r.track.id === e.id;
              });
              if (!(i === void 0)) {
                _context87.next = 7;
                break;
              }
              o.w(this.TAG, "No sender found for trackId=".concat(e.id));
              return _context87.abrupt("return");
            case 7:
              _context87.next = 9;
              return i.replaceTrack(t);
            case 9:
            case "end":
              return _context87.stop();
          }
        }, _callee86, this);
      }));
    }
  }, {
    key: "removeSender",
    value: function removeSender(e) {
      var r, s;
      if (!this.connection || this.connection.connectionState === "closed") {
        o.d(this.TAG, "publish connection is not initialised or closed");
        return;
      }
      var t = (r = e.transceiver) == null ? void 0 : r.sender;
      if (!t) {
        o.e(this.TAG, "No sender found for trackId=".concat(e.trackId));
        return;
      }
      (s = this.connection) == null || s.removeTrack(t);
      var i = this.tracks.indexOf(e);
      i !== -1 ? this.tracks.splice(i, 1) : o.e(this.TAG, "Cannot find ".concat(e.trackId, " in locally stored tracks"));
    }
  }, {
    key: "getTrackEncodings",
    value: function getTrackEncodings(e, t) {
      var i = [];
      if (e instanceof ee) if (t.length > 0) o.v(this.TAG, "Simulcast enabled with layers", t), i.push.apply(i, _toConsumableArray(t));else {
        var _r4 = {
          active: this.nativeStream.active
        };
        e.settings.maxBitrate && !Se && (_r4.maxBitrate = e.settings.maxBitrate), i.push(_r4);
      }
      return i;
    }
  }]);
  return ke;
}(Ce);
var Vt = {
    isAudioMuted: !1,
    isVideoMuted: !1,
    audioInputDeviceId: "default",
    audioOutputDeviceId: "default",
    videoDeviceId: "default"
  },
  ye,
  me = /*#__PURE__*/function () {
    function me(e, t, i, r, s) {
      _classCallCheck(this, me);
      this.store = e;
      this.observer = t;
      this.deviceManager = i;
      this.eventBus = r;
      this.analyticsTimer = s;
      this.TAG = "[LocalTrackManager]";
      this.setScreenCaptureHandleConfig();
    }
    _createClass(me, [{
      key: "getTracksToPublish",
      value: function getTracksToPublish() {
        return c(this, arguments, function () {
          var _this31 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Vt;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee87() {
            var t, i, r, s, _yield$_this31$update, a, d, l, u, h, p;
            return _regeneratorRuntime().wrap(function _callee87$(_context88) {
              while (1) switch (_context88.prev = _context88.next) {
                case 0:
                  t = _this31.getAVTrackSettings(e);
                  if (t) {
                    _context88.next = 3;
                    break;
                  }
                  return _context88.abrupt("return", []);
                case 3:
                  i = !!t.audio;
                  r = !!t.video;
                  s = [];
                  _context88.next = 8;
                  return _this31.updateCurrentLocalTrackSettings(t);
                case 8:
                  _yield$_this31$update = _context88.sent;
                  a = _yield$_this31$update.videoTrack;
                  d = _yield$_this31$update.audioTrack;
                  l = (a == null ? void 0 : a.stream) || (d == null ? void 0 : d.stream);
                  u = Boolean(a && _this31.store.getTrackById(a.trackId));
                  h = Boolean(d && _this31.store.getTrackById(d.trackId));
                  if (!(u && h)) {
                    _context88.next = 16;
                    break;
                  }
                  return _context88.abrupt("return", []);
                case 16:
                  p = {
                    audio: i && !d && (e.isAudioMuted ? "empty" : !0),
                    video: r && !a && (e.isVideoMuted ? "empty" : !0)
                  };
                  p.audio && _this31.analyticsTimer.start(M.LOCAL_AUDIO_TRACK), p.video && _this31.analyticsTimer.start(M.LOCAL_VIDEO_TRACK);
                  _context88.prev = 18;
                  o.d(_this31.TAG, "Init Local Tracks", {
                    fetchTrackOptions: p
                  });
                  _context88.next = 22;
                  return _this31.getLocalTracks(p, t, l);
                case 22:
                  s = _context88.sent;
                  _context88.next = 30;
                  break;
                case 25:
                  _context88.prev = 25;
                  _context88.t0 = _context88["catch"](18);
                  _context88.next = 29;
                  return _this31.retryGetLocalTracks(_context88.t0, t, p, l);
                case 29:
                  s = _context88.sent;
                case 30:
                  return _context88.abrupt("return", (p.audio && _this31.analyticsTimer.end(M.LOCAL_AUDIO_TRACK), p.video && _this31.analyticsTimer.end(M.LOCAL_VIDEO_TRACK), a && r && !u && s.push(a), d && i && !h && s.push(d), s));
                case 31:
                case "end":
                  return _context88.stop();
              }
            }, _callee87, null, [[18, 25]]);
          })();
        });
      }
    }, {
      key: "getLocalTracks",
      value: function getLocalTracks() {
        return c(this, arguments, function () {
          var _this32 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            audio: !0,
            video: !0
          };
          var t = arguments.length > 1 ? arguments[1] : undefined;
          var i = arguments.length > 2 ? arguments[2] : undefined;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee88() {
            var _r5;
            return _regeneratorRuntime().wrap(function _callee88$(_context89) {
              while (1) switch (_context89.prev = _context89.next) {
                case 0:
                  _context89.prev = 0;
                  _context89.next = 3;
                  return _this32.getNativeLocalTracks(e, t);
                case 3:
                  _r5 = _context89.sent;
                  return _context89.abrupt("return", _this32.createHMSLocalTracks(_r5, t, i));
                case 7:
                  _context89.prev = 7;
                  _context89.t0 = _context89["catch"](0);
                  throw _this32.eventBus.analytics.publish(w.publish({
                    devices: _this32.deviceManager.getDevices(),
                    error: _context89.t0,
                    settings: t
                  })), _context89.t0;
                case 10:
                case "end":
                  return _context89.stop();
              }
            }, _callee88, null, [[0, 7]]);
          })();
        });
      }
    }, {
      key: "getNativeLocalTracks",
      value: function getNativeLocalTracks() {
        return c(this, arguments, function () {
          var _this33 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            audio: !1,
            video: !1
          };
          var t = arguments.length > 1 ? arguments[1] : undefined;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {
            var i, r;
            return _regeneratorRuntime().wrap(function _callee89$(_context90) {
              while (1) switch (_context90.prev = _context90.next) {
                case 0:
                  i = new Fe(e.video === !0 ? t.video : null, e.audio === !0 ? t.audio : null, t.simulcast), r = [];
                  _context90.t0 = i.audio || i.video;
                  if (!_context90.t0) {
                    _context90.next = 11;
                    break;
                  }
                  _context90.t1 = r.push;
                  _context90.t2 = r;
                  _context90.t3 = _toConsumableArray;
                  _context90.next = 8;
                  return _this33.getAVTracks(i);
                case 8:
                  _context90.t4 = _context90.sent;
                  _context90.t5 = (0, _context90.t3)(_context90.t4);
                  _context90.t1.apply.call(_context90.t1, _context90.t2, _context90.t5);
                case 11:
                  r.push.apply(r, _toConsumableArray(_this33.getEmptyTracks(e)));
                  return _context90.abrupt("return", r);
                case 13:
                case "end":
                  return _context90.stop();
              }
            }, _callee89);
          })();
        });
      }
    }, {
      key: "getLocalScreen",
      value: function getLocalScreen(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
          var p, t, i, r, v, s, f, a, d, l, u, _v, h, _v2;
          return _regeneratorRuntime().wrap(function _callee90$(_context91) {
            while (1) switch (_context91.prev = _context91.next) {
              case 0:
                _context91.next = 2;
                return this.getOrDefaultScreenshareConfig(e);
              case 2:
                t = _context91.sent;
                i = this.getScreenshareSettings(t.videoOnly);
                r = {
                  video: D(S({}, i == null ? void 0 : i.video.toConstraints(!0)), {
                    displaySurface: t.displaySurface
                  }),
                  preferCurrentTab: t.preferCurrentTab,
                  selfBrowserSurface: t.selfBrowserSurface,
                  surfaceSwitching: t.surfaceSwitching,
                  systemAudio: t.systemAudio
                };
                if (i == null ? void 0 : i.audio) {
                  v = (p = i == null ? void 0 : i.audio) == null ? void 0 : p.toConstraints();
                  delete v.advanced, r.audio = D(S({}, v), {
                    autoGainControl: !1,
                    noiseSuppression: !1,
                    googAutoGainControl: !1,
                    echoCancellation: !1
                  });
                }
                _context91.prev = 6;
                o.d("retrieving screenshare with ", {
                  config: t
                }, {
                  constraints: r
                });
                _context91.next = 10;
                return navigator.mediaDevices.getDisplayMedia(r);
              case 10:
                s = _context91.sent;
                _context91.next = 18;
                break;
              case 13:
                _context91.prev = 13;
                _context91.t0 = _context91["catch"](6);
                o.w(this.TAG, "error in getting screenshare - ", _context91.t0);
                f = te(_context91.t0, J.SCREEN);
                throw this.eventBus.analytics.publish(w.publish({
                  error: f,
                  devices: this.deviceManager.getDevices(),
                  settings: new Fe(i == null ? void 0 : i.video, i == null ? void 0 : i.audio, !1)
                })), f;
              case 18:
                a = [], d = new ke(s), l = s.getVideoTracks()[0], u = new ee(d, l, "screen", this.eventBus, i == null ? void 0 : i.video);
                u.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "screen"));
                _context91.prev = 20;
                _v = this.validateCurrentTabCapture(u, t.forceCurrentTab);
                u.isCurrentTab = _v;
                _context91.next = 25;
                return u.cropTo(t.cropTarget);
              case 25:
                _context91.next = 30;
                break;
              case 27:
                _context91.prev = 27;
                _context91.t1 = _context91["catch"](20);
                throw s.getTracks().forEach(function (f) {
                  return f.stop();
                }), _context91.t1;
              case 30:
                a.push(u);
                h = s.getAudioTracks()[0];
                if (h) {
                  _v2 = new He(d, h, "screen", this.eventBus, i == null ? void 0 : i.audio);
                  a.push(_v2);
                }
                return _context91.abrupt("return", (o.v(this.TAG, "getLocalScreen", a), a));
              case 34:
              case "end":
                return _context91.stop();
            }
          }, _callee90, this, [[6, 13], [20, 27]]);
        }));
      }
    }, {
      key: "setScreenCaptureHandleConfig",
      value: function setScreenCaptureHandleConfig(e) {
        var t;
        !((t = navigator.mediaDevices) == null ? void 0 : t.setCaptureHandleConfig) || this.isInIframe() || (e = e || {}, Object.assign(e, {
          handle: (0, _uuid.v4)(),
          exposeOrigin: !1,
          permittedOrigins: [window.location.origin]
        }), o.d("setting capture handle - ", e.handle), navigator.mediaDevices.setCaptureHandleConfig(e), this.captureHandleIdentifier = e.handle);
      }
    }, {
      key: "validateCurrentTabCapture",
      value: function validateCurrentTabCapture(e, t) {
        var i = e.getCaptureHandle(),
          r = !!(this.captureHandleIdentifier && (i == null ? void 0 : i.handle) === this.captureHandleIdentifier);
        if (t && !r) throw o.e(this.TAG, "current tab was not shared with forceCurrentTab as true"), g.TracksErrors.CurrentTabNotShared();
        return r;
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
          return _regeneratorRuntime().wrap(function _callee91$(_context92) {
            while (1) switch (_context92.prev = _context92.next) {
              case 0:
                _context92.prev = 0;
                _context92.next = 3;
                return navigator.mediaDevices.getUserMedia({
                  audio: !0,
                  video: !0
                });
              case 3:
                _context92.sent.getTracks().forEach(function (t) {
                  return t.stop();
                });
                _context92.next = 9;
                break;
              case 6:
                _context92.prev = 6;
                _context92.t0 = _context92["catch"](0);
                o.e(this.TAG, _context92.t0);
              case 9:
              case "end":
                return _context92.stop();
            }
          }, _callee91, this, [[0, 6]]);
        }));
      }
    }, {
      key: "getAVTracks",
      value: function getAVTracks(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {
          var _t2, _i4, _r6, s;
          return _regeneratorRuntime().wrap(function _callee92$(_context93) {
            while (1) switch (_context93.prev = _context93.next) {
              case 0:
                _context93.prev = 0;
                _context93.next = 3;
                return navigator.mediaDevices.getUserMedia({
                  audio: e.audio ? e.audio.toConstraints() : !1,
                  video: e.video ? e.video.toConstraints() : !1
                });
              case 3:
                _t2 = _context93.sent;
                return _context93.abrupt("return", _t2.getVideoTracks().concat(_t2.getAudioTracks()));
              case 7:
                _context93.prev = 7;
                _context93.t0 = _context93["catch"](0);
                _context93.next = 11;
                return this.deviceManager.init();
              case 11:
                _i4 = !!(!this.deviceManager.hasWebcamPermission && e.video), _r6 = !!(!this.deviceManager.hasMicrophonePermission && e.audio), s = this.getErrorType(_i4, _r6);
                throw te(_context93.t0, s);
              case 13:
              case "end":
                return _context93.stop();
            }
          }, _callee92, this, [[0, 7]]);
        }));
      }
    }, {
      key: "getAVTrackSettings",
      value: function getAVTrackSettings(e) {
        var t = this.getAudioSettings(e),
          i = this.getVideoSettings(e);
        return !t && !i ? null : new Ze().video(i).audio(t).build();
      }
    }, {
      key: "isInIframe",
      value: function isInIframe() {
        try {
          return window.self !== window.top;
        } catch (e) {
          return !0;
        }
      }
    }, {
      key: "retryGetLocalTracks",
      value: function retryGetLocalTracks(e, t, i, r) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
          var s, a, d, l, h, p, v;
          return _regeneratorRuntime().wrap(function _callee93$(_context94) {
            while (1) switch (_context94.prev = _context94.next) {
              case 0:
                if (!(e instanceof T && e.action === m.TRACK)) {
                  _context94.next = 37;
                  break;
                }
                this.observer.onFailure(e);
                s = e.code === E.TracksErrors.OVER_CONSTRAINED, a = e.message.includes("audio"), d = e.message.includes("video");
                if (!s) {
                  _context94.next = 19;
                  break;
                }
                l = new Ze().video(new Re()).audio(new Ie()).build();
                o.w(this.TAG, "Fetch AV Tracks failed with overconstrained error", {
                  fetchTrackOptions: i
                }, {
                  error: e
                });
                _context94.prev = 6;
                _context94.next = 9;
                return this.getLocalTracks(i, l, r);
              case 9:
                return _context94.abrupt("return", _context94.sent);
              case 12:
                _context94.prev = 12;
                _context94.t0 = _context94["catch"](6);
                h = _context94.t0 instanceof T ? _context94.t0.nativeError : _context94.t0, p = _context94.t0;
                if ((h == null ? void 0 : h.name) === "OverconstrainedError") {
                  v = g.TracksErrors.GenericTrack(m.TRACK, "Overconstrained error after dropping all constraints");
                  v.addNativeError(h), p = v;
                }
                _context94.next = 18;
                return this.retryGetLocalTracks(p, t, i, r);
              case 18:
                return _context94.abrupt("return", _context94.sent);
              case 19:
                i.audio = a ? "empty" : i.audio, i.video = d ? "empty" : i.video, o.w(this.TAG, "Fetch AV Tracks failed", {
                  fetchTrackOptions: i
                }, e);
                _context94.prev = 20;
                _context94.next = 23;
                return this.getLocalTracks(i, t, r);
              case 23:
                return _context94.abrupt("return", _context94.sent);
              case 26:
                _context94.prev = 26;
                _context94.t1 = _context94["catch"](20);
                o.w(this.TAG, "Fetch empty tacks failed", _context94.t1);
                i.audio = i.audio && "empty";
                i.video = i.video && "empty";
                this.observer.onFailure(_context94.t1);
                _context94.next = 34;
                return this.getLocalTracks(i, t, r);
              case 34:
                return _context94.abrupt("return", _context94.sent);
              case 35:
                _context94.next = 38;
                break;
              case 37:
                return _context94.abrupt("return", (o.w(this.TAG, "Fetch AV Tracks failed - unknown exception", e), this.observer.onFailure(e), []));
              case 38:
              case "end":
                return _context94.stop();
            }
          }, _callee93, this, [[6, 12], [20, 26]]);
        }));
      }
    }, {
      key: "getErrorType",
      value: function getErrorType(e, t) {
        return e && t ? J.AV : e ? J.VIDEO : t ? J.AUDIO : J.UNKNOWN;
      }
    }, {
      key: "getEmptyTracks",
      value: function getEmptyTracks(e) {
        var t = [];
        return e.audio === "empty" && t.push(me.getEmptyAudioTrack()), e.video === "empty" && t.push(me.getEmptyVideoTrack()), t;
      }
    }, {
      key: "updateCurrentLocalTrackSettings",
      value: function updateCurrentLocalTrackSettings(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee94() {
          var t, i, r, s, a;
          return _regeneratorRuntime().wrap(function _callee94$(_context95) {
            while (1) switch (_context95.prev = _context95.next) {
              case 0:
                t = this.store.getLocalPeerTracks(), i = t.find(function (d) {
                  return d.type === x.VIDEO && d.source === "regular";
                }), r = t.find(function (d) {
                  return d.type === x.AUDIO && d.source === "regular";
                }), s = t.find(function (d) {
                  return d.type === x.VIDEO && d.source === "screen";
                });
                _context95.t0 = e == null ? void 0 : e.video;
                if (!_context95.t0) {
                  _context95.next = 5;
                  break;
                }
                _context95.next = 5;
                return i == null ? void 0 : i.setSettings(e.video);
              case 5:
                _context95.t1 = e == null ? void 0 : e.audio;
                if (!_context95.t1) {
                  _context95.next = 9;
                  break;
                }
                _context95.next = 9;
                return r == null ? void 0 : r.setSettings(e.audio);
              case 9:
                a = this.getScreenshareSettings(!0);
                _context95.t2 = a == null ? void 0 : a.video;
                if (!_context95.t2) {
                  _context95.next = 14;
                  break;
                }
                _context95.next = 14;
                return s == null ? void 0 : s.setSettings(a == null ? void 0 : a.video);
              case 14:
                return _context95.abrupt("return", {
                  videoTrack: i,
                  audioTrack: r
                });
              case 15:
              case "end":
                return _context95.stop();
            }
          }, _callee94, this);
        }));
      }
    }, {
      key: "getAudioSettings",
      value: function getAudioSettings(e) {
        var a;
        var t = this.store.getPublishParams();
        if (!t || !((a = t.allowed) == null ? void 0 : a.includes("audio"))) return null;
        var i = this.store.getLocalPeer(),
          r = i == null ? void 0 : i.audioTrack,
          s = (r == null ? void 0 : r.settings.deviceId) || e.audioInputDeviceId;
        return new Z().codec(t.audio.codec).maxBitrate(t.audio.bitRate).deviceId(s || Vt.audioInputDeviceId).build();
      }
    }, {
      key: "getVideoSettings",
      value: function getVideoSettings(e) {
        var d;
        var t = this.store.getPublishParams();
        if (!t || !((d = t.allowed) == null ? void 0 : d.includes("video"))) return null;
        var i = this.store.getLocalPeer(),
          r = i == null ? void 0 : i.videoTrack,
          s = (r == null ? void 0 : r.settings.deviceId) || e.videoDeviceId,
          a = t.video;
        return new Y().codec(a.codec).maxBitrate(a.bitRate).maxFramerate(a.frameRate).setWidth(a.width).setHeight(a.height).deviceId(s || Vt.videoDeviceId).build();
      }
    }, {
      key: "getScreenshareSettings",
      value: function getScreenshareSettings() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        var r;
        var t = this.store.getPublishParams();
        if (!t || !((r = t.allowed) == null ? void 0 : r.includes("screen"))) return null;
        var i = t.screen;
        return {
          video: new Y().maxBitrate(i.bitRate, !1).codec(i.codec).maxFramerate(i.frameRate).setWidth(i.width).setHeight(i.height).build(),
          audio: e ? void 0 : new Z().build()
        };
      }
    }, {
      key: "getOrDefaultScreenshareConfig",
      value: function getOrDefaultScreenshareConfig(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
          var i, t;
          return _regeneratorRuntime().wrap(function _callee95$(_context96) {
            while (1) switch (_context96.prev = _context96.next) {
              case 0:
                t = Object.assign({
                  videoOnly: !1,
                  audioOnly: !1,
                  forceCurrentTab: !1,
                  preferCurrentTab: !1,
                  selfBrowserSurface: "exclude",
                  surfaceSwitching: "include",
                  systemAudio: "exclude",
                  displaySurface: "monitor"
                }, e || {});
                t.forceCurrentTab && (t.videoOnly = !0, t.preferCurrentTab = !0, t.selfBrowserSurface = "include", t.surfaceSwitching = "exclude");
                t.preferCurrentTab && (t.selfBrowserSurface = "include", t.displaySurface = void 0);
                _context96.t0 = t.cropElement && ((i = window.CropTarget) == null ? void 0 : i.fromElement);
                if (!_context96.t0) {
                  _context96.next = 8;
                  break;
                }
                _context96.next = 7;
                return window.CropTarget.fromElement(t.cropElement);
              case 7:
                t.cropTarget = _context96.sent;
              case 8:
                return _context96.abrupt("return", t);
              case 9:
              case "end":
                return _context96.stop();
            }
          }, _callee95);
        }));
      }
    }, {
      key: "createHMSLocalTracks",
      value: function createHMSLocalTracks(e, t, i) {
        var r = e.find(function (d) {
            return d.kind === "video";
          }),
          s = e.find(function (d) {
            return d.kind === "audio";
          });
        i ? e.forEach(function (d) {
          return i == null ? void 0 : i.nativeStream.addTrack(d);
        }) : i = new ke(new MediaStream(e));
        var a = [];
        if (s && (t == null ? void 0 : t.audio)) {
          var d = new He(i, s, "regular", this.eventBus, t.audio);
          a.push(d);
        }
        if (r && (t == null ? void 0 : t.video)) {
          var _d = new ee(i, r, "regular", this.eventBus, t.video);
          _d.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "regular")), a.push(_d);
        }
        return a;
      }
    }], [{
      key: "getEmptyVideoTrack",
      value: function getEmptyVideoTrack(e) {
        var l, u, h;
        var t = ((l = e == null ? void 0 : e.getSettings()) == null ? void 0 : l.width) || 320,
          i = ((u = e == null ? void 0 : e.getSettings()) == null ? void 0 : u.height) || 240,
          r = 10;
        ye || (ye = document.createElement("canvas"), ye.width = t, ye.height = i, (h = ye.getContext("2d", {
          willReadFrequently: !0
        })) == null || h.fillRect(0, 0, t, i));
        var a = ye.captureStream(r).getVideoTracks()[0],
          d = setInterval(function () {
            if (a.readyState === "ended") {
              clearInterval(d);
              return;
            }
            var p = ye.getContext("2d");
            if (p) {
              var f = p.getImageData(0, 0, 1, 1).data[0] === 0 ? 1 : 0;
              p.fillStyle = "rgb(".concat(f, ", 0, 0)"), p.fillRect(0, 0, 1, 1);
            }
          }, 1e3 / r);
        return a.onended = function () {
          clearInterval(d);
        }, a.enabled = !1, a;
      }
    }, {
      key: "getEmptyAudioTrack",
      value: function getEmptyAudioTrack() {
        var e = pe.getAudioContext(),
          t = e.createOscillator(),
          i = e.createMediaStreamDestination();
        t.connect(i), t.start();
        var r = i.stream.getAudioTracks()[0];
        return r.enabled = !1, r;
      }
    }]);
    return me;
  }();
var Gt = /*#__PURE__*/function () {
  function Gt(e, t) {
    var _this34 = this;
    _classCallCheck(this, Gt);
    this.eventBus = e;
    this.listener = t;
    this.TAG = "[NetworkTestManager]";
    this.controller = new AbortController();
    this.start = function (e) {
      return c(_this34, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
        var _this35 = this;
        var u, t, i, r, s, a, d, l, p, v;
        return _regeneratorRuntime().wrap(function _callee97$(_context98) {
          while (1) switch (_context98.prev = _context98.next) {
            case 0:
              if (e) {
                _context98.next = 2;
                break;
              }
              return _context98.abrupt("return");
            case 2:
              t = e.url, i = e.timeout, r = e.scoreMap, s = this.controller.signal, a = Date.now(), d = 0, l = $(i).then(function () {
                _this35.controller.abort();
              });
              _context98.prev = 3;
              _context98.next = 6;
              return fetch("".concat(t, "?").concat(Date.now()), {
                signal: s
              });
            case 6:
              _context98.t0 = u = _context98.sent.body;
              if (!(_context98.t0 == null)) {
                _context98.next = 11;
                break;
              }
              _context98.t1 = void 0;
              _context98.next = 12;
              break;
            case 11:
              _context98.t1 = u.getReader();
            case 12:
              p = _context98.t1;
              if (p) {
                _context98.next = 15;
                break;
              }
              throw Error("unable to process request");
            case 15:
              v = function v() {
                return c(_this35, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
                  var f, _yield$p$read, H, j;
                  return _regeneratorRuntime().wrap(function _callee96$(_context97) {
                    while (1) switch (_context97.prev = _context97.next) {
                      case 0:
                        if (!p) {
                          _context97.next = 17;
                          break;
                        }
                        _context97.prev = 1;
                        f = !1;
                      case 3:
                        if (f) {
                          _context97.next = 12;
                          break;
                        }
                        _context97.next = 6;
                        return p.read();
                      case 6:
                        _yield$p$read = _context97.sent;
                        H = _yield$p$read.value;
                        j = _yield$p$read.done;
                        f = j, H && (d += H.byteLength, this.sendScore({
                          scoreMap: r,
                          downloadedSize: d,
                          startTime: a
                        }));
                      case 10:
                        _context97.next = 3;
                        break;
                      case 12:
                        _context97.next = 17;
                        break;
                      case 14:
                        _context97.prev = 14;
                        _context97.t0 = _context97["catch"](1);
                        _context97.t0.name !== "AbortError" && o.d(this.TAG, _context97.t0);
                      case 17:
                      case "end":
                        return _context97.stop();
                    }
                  }, _callee96, this, [[1, 14]]);
                }));
              };
              return _context98.abrupt("return", Promise.race([v(), l]).then(function () {
                _this35.sendScore({
                  scoreMap: r,
                  downloadedSize: d,
                  startTime: a,
                  finished: !0
                });
              }).catch(function (f) {
                o.e(_this35.TAG, f), _this35.updateScoreToListener(0), _this35.eventBus.analytics.publish(w.previewNetworkQuality({
                  error: f.message
                }));
              }));
            case 19:
              _context98.prev = 19;
              _context98.t2 = _context98["catch"](3);
              _context98.t2.name !== "AbortError" ? (o.d(this.TAG, _context98.t2), this.updateScoreToListener(0), this.eventBus.analytics.publish(w.previewNetworkQuality({
                error: _context98.t2.message
              }))) : o.d(this.TAG, _context98.t2);
            case 22:
            case "end":
              return _context98.stop();
          }
        }, _callee97, this, [[3, 19]]);
      }));
    };
    this.stop = function () {
      _this34.controller.signal.aborted || _this34.controller.abort();
    };
    this.sendScore = function (_ref9) {
      var e = _ref9.scoreMap,
        t = _ref9.downloadedSize,
        i = _ref9.startTime,
        _ref9$finished = _ref9.finished,
        r = _ref9$finished === void 0 ? !1 : _ref9$finished;
      var s = (Date.now() - i) / 1e3,
        d = t / 1024 / s * 8,
        l = -1;
      for (var u in e) {
        var h = e[u];
        d >= h.low && (!h.high || d <= h.high) && (l = Number(u));
      }
      _this34.updateScoreToListener(l), r && _this34.eventBus.analytics.publish(w.previewNetworkQuality({
        score: l,
        downLink: d.toFixed(2)
      }));
    };
  }
  _createClass(Gt, [{
    key: "updateScoreToListener",
    value: function updateScoreToListener(e) {
      var t, i;
      e !== this.score && (this.score = e, (i = (t = this.listener) == null ? void 0 : t.onNetworkQuality) == null || i.call(t, e));
    }
  }]);
  return Gt;
}();
var dt = /*#__PURE__*/function () {
  function dt(e, t, i, r, s) {
    var _this36 = this;
    _classCallCheck(this, dt);
    this.store = e;
    this.transport = t;
    this.publish = i;
    this.removeAuxiliaryTrack = r;
    this.listener = s;
    this.handleLocalPeerRoleUpdate = function (i) {
      return c(_this36, [i], function (_ref10) {
        var _this37 = this;
        var e = _ref10.oldRole,
          t = _ref10.newRole;
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
          var s, r;
          return _regeneratorRuntime().wrap(function _callee98$(_context99) {
            while (1) switch (_context99.prev = _context99.next) {
              case 0:
                r = _this37.store.getLocalPeer();
                _context99.t0 = !r;
                if (_context99.t0) {
                  _context99.next = 6;
                  break;
                }
                _context99.next = 5;
                return _this37.diffRolesAndPublishTracks({
                  oldRole: e,
                  newRole: t
                });
              case 5:
                (s = _this37.listener) == null || s.onPeerUpdate(z.ROLE_UPDATED, r);
              case 6:
              case "end":
                return _context99.stop();
            }
          }, _callee98);
        })();
      });
    };
    this.diffRolesAndPublishTracks = function (i) {
      return c(_this36, [i], function (_ref11) {
        var _this38 = this;
        var e = _ref11.oldRole,
          t = _ref11.newRole;
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {
          var f, H, j, ge, C, gi, vi, r, s, a, d, l, u, h, p, v;
          return _regeneratorRuntime().wrap(function _callee99$(_context100) {
            while (1) switch (_context100.prev = _context100.next) {
              case 0:
                r = new Set(e.publishParams.allowed), s = new Set(t.publishParams.allowed), a = _this38.removeTrack(r, s, "video"), d = _this38.removeTrack(r, s, "audio"), l = _this38.removeTrack(r, s, "screen"), u = _this38.hasSimulcastDifference((f = e.publishParams.simulcast) == null ? void 0 : f.video, (H = t.publishParams.simulcast) == null ? void 0 : H.video), h = _this38.hasSimulcastDifference((j = e.publishParams.simulcast) == null ? void 0 : j.screen, (ge = t.publishParams.simulcast) == null ? void 0 : ge.screen), p = (gi = (C = _this38.store.getLocalPeer()) == null ? void 0 : C.videoTrack) == null ? void 0 : gi.enabled;
                _context100.next = 3;
                return _this38.removeAudioTrack(d);
              case 3:
                _context100.next = 5;
                return _this38.removeVideoTracks(a || u);
              case 5:
                _context100.next = 7;
                return _this38.removeScreenTracks(l || h);
              case 7:
                v = ((vi = _this38.store.getConfig()) == null ? void 0 : vi.settings) || {
                  isAudioMuted: !0,
                  isVideoMuted: !0,
                  audioInputDeviceId: "default",
                  videoDeviceId: "default",
                  audioOutputDeviceId: "default"
                };
                u && (v.isVideoMuted = !p);
                _context100.next = 11;
                return _this38.publish(v);
              case 11:
              case "end":
                return _context100.stop();
            }
          }, _callee99);
        })();
      });
    };
  }
  _createClass(dt, [{
    key: "removeVideoTracks",
    value: function removeVideoTracks(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
        var i, t;
        return _regeneratorRuntime().wrap(function _callee100$(_context101) {
          while (1) switch (_context101.prev = _context101.next) {
            case 0:
              if (e) {
                _context101.next = 2;
                break;
              }
              return _context101.abrupt("return");
            case 2:
              t = this.store.getLocalPeer();
              _context101.t0 = t == null ? void 0 : t.videoTrack;
              if (!_context101.t0) {
                _context101.next = 14;
                break;
              }
              if (!t.videoTrack.isPublished) {
                _context101.next = 10;
                break;
              }
              _context101.next = 8;
              return this.transport.unpublish([t.videoTrack]);
            case 8:
              _context101.next = 12;
              break;
            case 10:
              _context101.next = 12;
              return t.videoTrack.cleanup();
            case 12:
              (i = this.listener) == null || i.onTrackUpdate(N.TRACK_REMOVED, t.videoTrack, t);
              t.videoTrack = void 0;
            case 14:
              _context101.next = 16;
              return this.removeAuxTracks(function (r) {
                return r.source !== "screen" && r.type === "video";
              });
            case 16:
            case "end":
              return _context101.stop();
          }
        }, _callee100, this);
      }));
    }
  }, {
    key: "removeAudioTrack",
    value: function removeAudioTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
        var i, t;
        return _regeneratorRuntime().wrap(function _callee101$(_context102) {
          while (1) switch (_context102.prev = _context102.next) {
            case 0:
              if (e) {
                _context102.next = 2;
                break;
              }
              return _context102.abrupt("return");
            case 2:
              t = this.store.getLocalPeer();
              _context102.t0 = t == null ? void 0 : t.audioTrack;
              if (!_context102.t0) {
                _context102.next = 14;
                break;
              }
              if (!t.audioTrack.isPublished) {
                _context102.next = 10;
                break;
              }
              _context102.next = 8;
              return this.transport.unpublish([t.audioTrack]);
            case 8:
              _context102.next = 12;
              break;
            case 10:
              _context102.next = 12;
              return t.audioTrack.cleanup();
            case 12:
              (i = this.listener) == null || i.onTrackUpdate(N.TRACK_REMOVED, t.audioTrack, t);
              t.audioTrack = void 0;
            case 14:
              _context102.next = 16;
              return this.removeAuxTracks(function (r) {
                return r.source !== "screen" && r.type === "audio";
              });
            case 16:
            case "end":
              return _context102.stop();
          }
        }, _callee101, this);
      }));
    }
  }, {
    key: "removeScreenTracks",
    value: function removeScreenTracks(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee102() {
        return _regeneratorRuntime().wrap(function _callee102$(_context103) {
          while (1) switch (_context103.prev = _context103.next) {
            case 0:
              _context103.t0 = !e;
              if (_context103.t0) {
                _context103.next = 4;
                break;
              }
              _context103.next = 4;
              return this.removeAuxTracks(function (t) {
                return t.source === "screen";
              });
            case 4:
            case "end":
              return _context103.stop();
          }
        }, _callee102, this);
      }));
    }
  }, {
    key: "removeAuxTracks",
    value: function removeAuxTracks(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee103() {
        var t, _i5, _iterator11, _step11, _r7;
        return _regeneratorRuntime().wrap(function _callee103$(_context104) {
          while (1) switch (_context104.prev = _context104.next) {
            case 0:
              t = this.store.getLocalPeer();
              if (!(t == null ? void 0 : t.auxiliaryTracks)) {
                _context104.next = 22;
                break;
              }
              _i5 = _toConsumableArray(t.auxiliaryTracks);
              _iterator11 = _createForOfIteratorHelper(_i5);
              _context104.prev = 4;
              _iterator11.s();
            case 6:
              if ((_step11 = _iterator11.n()).done) {
                _context104.next = 14;
                break;
              }
              _r7 = _step11.value;
              _context104.t0 = e(_r7);
              if (!_context104.t0) {
                _context104.next = 12;
                break;
              }
              _context104.next = 12;
              return this.removeAuxiliaryTrack(_r7.trackId);
            case 12:
              _context104.next = 6;
              break;
            case 14:
              _context104.next = 19;
              break;
            case 16:
              _context104.prev = 16;
              _context104.t1 = _context104["catch"](4);
              _iterator11.e(_context104.t1);
            case 19:
              _context104.prev = 19;
              _iterator11.f();
              return _context104.finish(19);
            case 22:
            case "end":
              return _context104.stop();
          }
        }, _callee103, this, [[4, 16, 19, 22]]);
      }));
    }
  }, {
    key: "removeTrack",
    value: function removeTrack(e, t, i) {
      return e.has(i) && !t.has(i);
    }
  }, {
    key: "hasSimulcastDifference",
    value: function hasSimulcastDifference(e, t) {
      var i, r, s;
      return !e && !t ? !1 : ((i = e == null ? void 0 : e.layers) == null ? void 0 : i.length) !== ((r = t == null ? void 0 : t.layers) == null ? void 0 : r.length) ? !0 : !!((s = e == null ? void 0 : e.layers) == null ? void 0 : s.some(function (a) {
        var l;
        var d = (l = t == null ? void 0 : t.layers) == null ? void 0 : l.find(function (u) {
          return u.rid === a.rid;
        });
        return (d == null ? void 0 : d.maxBitrate) !== a.maxBitrate || (d == null ? void 0 : d.maxFramerate) !== a.maxFramerate;
      }));
    }
  }]);
  return dt;
}();
var Xi = /*#__PURE__*/function () {
    function Xi() {
      _classCallCheck(this, Xi);
      this.TAG = "[HTTPAnalyticsTransport]";
      this.failedEvents = new ie("client-events");
      this.isConnected = !0;
      this.env = null;
      this.websocketURL = "";
    }
    _createClass(Xi, [{
      key: "setEnv",
      value: function setEnv(e) {
        this.env = e, this.flushFailedEvents();
      }
    }, {
      key: "setWebsocketEndpoint",
      value: function setWebsocketEndpoint(e) {
        this.websocketURL = e;
      }
    }, {
      key: "sendEvent",
      value: function sendEvent(e) {
        var _this39 = this;
        if (!this.env || !this.websocketURL) {
          this.addEventToStorage(e);
          return;
        }
        var t = {
            event: e.name,
            payload: e.properties,
            event_id: String(e.timestamp),
            peer: e.metadata.peer,
            timestamp: e.timestamp,
            device_id: e.device_id,
            cluster: {
              websocket_url: this.websocketURL
            }
          },
          i = this.env === q.PROD ? Ji : zi;
        fetch(i, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer ".concat(e.metadata.token),
            user_agent_v2: e.metadata.userAgent
          },
          body: JSON.stringify(t)
        }).then(function (r) {
          if (r.status === 401) {
            _this39.removeFromStorage(e);
            return;
          }
          if (r.status !== 200) throw Error(r.statusText);
          _this39.removeFromStorage(e);
        }).catch(function (r) {
          o.v(_this39.TAG, "Failed to send event", r, e), _this39.addEventToStorage(e);
        });
      }
    }, {
      key: "flushFailedEvents",
      value: function flushFailedEvents() {
        var _this40 = this;
        var e = this.failedEvents.get();
        e == null || e.forEach(function (t) {
          return _this40.sendEvent(t);
        });
      }
    }, {
      key: "addEventToStorage",
      value: function addEventToStorage(e) {
        var t = this.failedEvents.get() || [];
        t.find(function (i) {
          return i.timestamp === e.timestamp;
        }) || (t.length === Qi && t.shift(), t.push(e), this.failedEvents.set(t));
      }
    }, {
      key: "removeFromStorage",
      value: function removeFromStorage(e) {
        var t = this.failedEvents.get() || [],
          i = t.findIndex(function (r) {
            return r.timestamp === e.timestamp;
          });
        i > -1 && (t.splice(i, 1), this.failedEvents.set(t));
      }
    }]);
    return Xi;
  }(),
  ae = new Xi();
var lt = /*#__PURE__*/function () {
  function lt() {
    _classCallCheck(this, lt);
    this.knownRoles = {};
    this.peers = {};
    this.tracks = new Map();
    this.peerTrackStates = {};
    this.speakers = [];
    this.roleDetailsArrived = !1;
    this.env = q.PROD;
    this.simulcastEnabled = !1;
    this.userAgent = xe(this.env);
  }
  _createClass(lt, [{
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
  }, {
    key: "setSimulcastEnabled",
    value: function setSimulcastEnabled(e) {
      this.simulcastEnabled = e;
    }
  }, {
    key: "getEnv",
    value: function getEnv() {
      return this.env;
    }
  }, {
    key: "getPublishParams",
    value: function getPublishParams() {
      var e = this.getLocalPeer(),
        t = (e == null ? void 0 : e.asRole) || (e == null ? void 0 : e.role);
      return t == null ? void 0 : t.publishParams;
    }
  }, {
    key: "getRoom",
    value: function getRoom() {
      return this.room;
    }
  }, {
    key: "getPolicyForRole",
    value: function getPolicyForRole(e) {
      return this.knownRoles[e];
    }
  }, {
    key: "getKnownRoles",
    value: function getKnownRoles() {
      return this.knownRoles;
    }
  }, {
    key: "getTemplateAppData",
    value: function getTemplateAppData() {
      return this.templateAppData;
    }
  }, {
    key: "getLocalPeer",
    value: function getLocalPeer() {
      if (this.localPeerId && this.peers[this.localPeerId]) return this.peers[this.localPeerId];
    }
  }, {
    key: "getRemotePeers",
    value: function getRemotePeers() {
      return Object.values(this.peers).filter(function (e) {
        return !e.isLocal;
      });
    }
  }, {
    key: "getPeers",
    value: function getPeers() {
      return Object.values(this.peers);
    }
  }, {
    key: "getPeerById",
    value: function getPeerById(e) {
      if (this.peers[e]) return this.peers[e];
    }
  }, {
    key: "getTracksMap",
    value: function getTracksMap() {
      return this.tracks;
    }
  }, {
    key: "getTracks",
    value: function getTracks() {
      return Array.from(this.tracks.values());
    }
  }, {
    key: "getVideoTracks",
    value: function getVideoTracks() {
      return this.getTracks().filter(function (e) {
        return e.type === x.VIDEO;
      });
    }
  }, {
    key: "getRemoteVideoTracks",
    value: function getRemoteVideoTracks() {
      return this.getTracks().filter(function (e) {
        return e instanceof X;
      });
    }
  }, {
    key: "getAudioTracks",
    value: function getAudioTracks() {
      return this.getTracks().filter(function (e) {
        return e.type === x.AUDIO;
      });
    }
  }, {
    key: "getPeerTracks",
    value: function getPeerTracks(e) {
      var t = e ? this.peers[e] : void 0,
        i = [];
      return (t == null ? void 0 : t.videoTrack) && i.push(t.videoTrack), (t == null ? void 0 : t.audioTrack) && i.push(t.audioTrack), i.concat((t == null ? void 0 : t.auxiliaryTracks) || []);
    }
  }, {
    key: "getLocalPeerTracks",
    value: function getLocalPeerTracks() {
      return this.getPeerTracks(this.localPeerId);
    }
  }, {
    key: "hasTrack",
    value: function hasTrack(e) {
      return this.tracks.has(e);
    }
  }, {
    key: "getTrackById",
    value: function getTrackById(e) {
      var r, s;
      var t = Array.from(this.tracks.values()).find(function (a) {
        return a.trackId === e;
      });
      if (t) return t;
      var i = this.getLocalPeer();
      if (i) {
        if ((r = i.audioTrack) == null ? void 0 : r.isPublishedTrackId(e)) return i.audioTrack;
        if ((s = i.videoTrack) == null ? void 0 : s.isPublishedTrackId(e)) return i.videoTrack;
      }
    }
  }, {
    key: "getPeerByTrackId",
    value: function getPeerByTrackId(e) {
      var t = Array.from(this.tracks.values()).find(function (i) {
        return i.trackId === e;
      });
      return (t == null ? void 0 : t.peerId) ? this.peers[t.peerId] : void 0;
    }
  }, {
    key: "getSpeakers",
    value: function getSpeakers() {
      return this.speakers;
    }
  }, {
    key: "getSpeakerPeers",
    value: function getSpeakerPeers() {
      return this.speakers.map(function (e) {
        return e.peer;
      });
    }
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return this.userAgent;
    }
  }, {
    key: "createAndSetUserAgent",
    value: function createAndSetUserAgent(e) {
      this.userAgent = xe(this.env, e);
    }
  }, {
    key: "setRoom",
    value: function setRoom(e) {
      this.room = e;
    }
  }, {
    key: "setKnownRoles",
    value: function setKnownRoles(e) {
      var i, r;
      if (this.knownRoles = e.known_roles, this.roleDetailsArrived = !0, this.templateAppData = e.app_data, !this.simulcastEnabled) return;
      var t = (i = this.knownRoles[e.name]) == null ? void 0 : i.publishParams;
      this.videoLayers = this.convertSimulcastLayers((r = t.simulcast) == null ? void 0 : r.video), this.updatePeersPolicy();
    }
  }, {
    key: "hasRoleDetailsArrived",
    value: function hasRoleDetailsArrived() {
      return this.roleDetailsArrived;
    }
  }, {
    key: "setConfig",
    value: function setConfig(e) {
      var t, i, r;
      if (Q.rememberDevices(Boolean(e.rememberDeviceSelection)), e.rememberDeviceSelection) {
        var s = Q.getSelection();
        s && (e.settings || (e.settings = {}), ((t = s.audioInput) == null ? void 0 : t.deviceId) && (e.settings.audioInputDeviceId = e.settings.audioInputDeviceId || s.audioInput.deviceId), ((i = s.audioOutput) == null ? void 0 : i.deviceId) && (e.settings.audioOutputDeviceId = e.settings.audioOutputDeviceId || s.audioOutput.deviceId), ((r = s.videoInput) == null ? void 0 : r.deviceId) && (e.settings.videoDeviceId = e.settings.videoDeviceId || s.videoInput.deviceId));
      }
      e.autoManageVideo = e.autoManageVideo !== !1, e.autoManageWakeLock = e.autoManageWakeLock !== !1, this.config = e, this.setEnv();
    }
  }, {
    key: "addPeer",
    value: function addPeer(e) {
      this.peers[e.peerId] = e, e.isLocal && (this.localPeerId = e.peerId);
    }
  }, {
    key: "addTrack",
    value: function addTrack(e) {
      this.tracks.set(e, e);
    }
  }, {
    key: "getTrackState",
    value: function getTrackState(e) {
      return this.peerTrackStates[e];
    }
  }, {
    key: "setTrackState",
    value: function setTrackState(e) {
      this.peerTrackStates[e.trackInfo.track_id] = e;
    }
  }, {
    key: "removePeer",
    value: function removePeer(e) {
      this.localPeerId === e && (this.localPeerId = void 0), delete this.peers[e];
    }
  }, {
    key: "removeTrack",
    value: function removeTrack(e) {
      this.tracks.delete(e);
    }
  }, {
    key: "updateSpeakers",
    value: function updateSpeakers(e) {
      this.speakers = e;
    }
  }, {
    key: "updateAudioOutputVolume",
    value: function updateAudioOutputVolume(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee104() {
        var _iterator12, _step12, _t3;
        return _regeneratorRuntime().wrap(function _callee104$(_context105) {
          while (1) switch (_context105.prev = _context105.next) {
            case 0:
              _iterator12 = _createForOfIteratorHelper(this.getAudioTracks());
              _context105.prev = 1;
              _iterator12.s();
            case 3:
              if ((_step12 = _iterator12.n()).done) {
                _context105.next = 9;
                break;
              }
              _t3 = _step12.value;
              _context105.next = 7;
              return _t3.setVolume(e);
            case 7:
              _context105.next = 3;
              break;
            case 9:
              _context105.next = 14;
              break;
            case 11:
              _context105.prev = 11;
              _context105.t0 = _context105["catch"](1);
              _iterator12.e(_context105.t0);
            case 14:
              _context105.prev = 14;
              _iterator12.f();
              return _context105.finish(14);
            case 17:
            case "end":
              return _context105.stop();
          }
        }, _callee104, this, [[1, 11, 14, 17]]);
      }));
    }
  }, {
    key: "updateAudioOutputDevice",
    value: function updateAudioOutputDevice(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee105() {
        var t;
        return _regeneratorRuntime().wrap(function _callee105$(_context106) {
          while (1) switch (_context106.prev = _context106.next) {
            case 0:
              t = [];
              this.getAudioTracks().forEach(function (i) {
                i instanceof Ee && t.push(i.setOutputDevice(e));
              });
              _context106.next = 4;
              return Promise.all(t);
            case 4:
            case "end":
              return _context106.stop();
          }
        }, _callee105, this);
      }));
    }
  }, {
    key: "getSimulcastLayers",
    value: function getSimulcastLayers(e) {
      var t;
      return !this.simulcastEnabled || !["screen", "regular"].includes(e) ? [] : e === "screen" ? [] : ((t = this.videoLayers) == null ? void 0 : t.layers) || [];
    }
  }, {
    key: "convertSimulcastLayers",
    value: function convertSimulcastLayers(e) {
      if (!!e) return D(S({}, e), {
        layers: (e.layers || []).map(function (t) {
          return D(S({}, t), {
            maxBitrate: t.maxBitrate * 1e3
          });
        })
      });
    }
  }, {
    key: "getSimulcastDefinitionsForPeer",
    value: function getSimulcastDefinitionsForPeer(e, t) {
      var d, l, u;
      if ([!e || !e.role, t === "screen", !this.simulcastEnabled].some(function (h) {
        return !!h;
      })) return [];
      var i = this.getPolicyForRole(e.role.name).publishParams,
        r,
        s,
        a;
      return t === "regular" ? (r = (d = i.simulcast) == null ? void 0 : d.video, s = i.video.width, a = i.video.height) : t === "screen" && (r = (l = i.simulcast) == null ? void 0 : l.screen, s = i.screen.width, a = i.screen.height), ((u = r == null ? void 0 : r.layers) == null ? void 0 : u.map(function (h) {
        var p = _t[h.rid],
          v = {
            width: s / h.scaleResolutionDownBy,
            height: a / h.scaleResolutionDownBy
          };
        return {
          layer: p,
          resolution: v
        };
      })) || [];
    }
  }, {
    key: "getErrorListener",
    value: function getErrorListener() {
      return this.errorListener;
    }
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      var e = this.getTracks();
      var _iterator13 = _createForOfIteratorHelper(e),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _t4 = _step13.value;
          _t4.cleanup();
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      this.room = void 0, this.config = void 0, this.localPeerId = void 0, this.roleDetailsArrived = !1;
    }
  }, {
    key: "setErrorListener",
    value: function setErrorListener(e) {
      this.errorListener = e;
    }
  }, {
    key: "updatePeersPolicy",
    value: function updatePeersPolicy() {
      var _this41 = this;
      this.getPeers().forEach(function (e) {
        var t;
        if (!e.role) {
          (t = _this41.errorListener) == null || t.onError(g.GenericErrors.InvalidRole(m.VALIDATION, ""));
          return;
        }
        e.role = _this41.getPolicyForRole(e.role.name);
      });
    }
  }, {
    key: "setEnv",
    value: function setEnv() {
      var r;
      var t = ((r = this.config) == null ? void 0 : r.initEndpoint).split("https://")[1],
        i = q.PROD;
      t.startsWith(q.PROD) ? i = q.PROD : t.startsWith(q.QA) ? i = q.QA : t.startsWith(q.DEV) && (i = q.DEV), this.env = i, ae.setEnv(i);
    }
  }]);
  return lt;
}();
var Ut = /*#__PURE__*/_createClass(function Ut() {
  var _this42 = this;
  _classCallCheck(this, Ut);
  this.TAG = "[WakeLockManager]";
  this.wakeLock = null;
  this.acquireLock = function () {
    return c(_this42, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee106() {
      return _regeneratorRuntime().wrap(function _callee106$(_context107) {
        while (1) switch (_context107.prev = _context107.next) {
          case 0:
            _context107.next = 2;
            return this.requestWakeLock();
          case 2:
            document == null || document.addEventListener("visibilitychange", this.visibilityHandler);
          case 3:
          case "end":
            return _context107.stop();
        }
      }, _callee106, this);
    }));
  };
  this.cleanup = function () {
    return c(_this42, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee107() {
      var _t5;
      return _regeneratorRuntime().wrap(function _callee107$(_context108) {
        while (1) switch (_context108.prev = _context108.next) {
          case 0:
            if (!(this.wakeLock && !this.wakeLock.released)) {
              _context108.next = 11;
              break;
            }
            _context108.prev = 1;
            _context108.next = 4;
            return this.wakeLock.release();
          case 4:
            o.d(this.TAG, "Wake lock released");
            _context108.next = 11;
            break;
          case 7:
            _context108.prev = 7;
            _context108.t0 = _context108["catch"](1);
            _t5 = _context108.t0;
            o.e(this.TAG, "Error while releasing wake lock", "name=".concat(_t5.name, ", message=").concat(_t5.message));
          case 11:
            this.wakeLock = null;
          case 12:
          case "end":
            return _context108.stop();
        }
      }, _callee107, this, [[1, 7]]);
    }));
  };
  this.visibilityHandler = function () {
    return c(_this42, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee108() {
      return _regeneratorRuntime().wrap(function _callee108$(_context109) {
        while (1) switch (_context109.prev = _context109.next) {
          case 0:
            _context109.t0 = (document == null ? void 0 : document.visibilityState) === "visible" && (!this.wakeLock || this.wakeLock.released);
            if (!_context109.t0) {
              _context109.next = 5;
              break;
            }
            o.d(this.TAG, "Re-acquiring wake lock due to visibility change");
            _context109.next = 5;
            return this.requestWakeLock();
          case 5:
          case "end":
            return _context109.stop();
        }
      }, _callee108, this);
    }));
  };
  this.requestWakeLock = function () {
    return c(_this42, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee109() {
      var _t6;
      return _regeneratorRuntime().wrap(function _callee109$(_context110) {
        while (1) switch (_context110.prev = _context110.next) {
          case 0:
            _context110.prev = 0;
            if ("wakeLock" in navigator) {
              _context110.next = 4;
              break;
            }
            o.d(this.TAG, "Wake lock feature not supported");
            return _context110.abrupt("return");
          case 4:
            _context110.next = 6;
            return navigator.wakeLock.request("screen");
          case 6:
            this.wakeLock = _context110.sent;
            o.d(this.TAG, "Wake lock acquired");
            _context110.next = 14;
            break;
          case 10:
            _context110.prev = 10;
            _context110.t0 = _context110["catch"](0);
            _t6 = _context110.t0;
            o.e(this.TAG, "Error acquiring wake lock", "name=".concat(_t6.name, ", message=").concat(_t6.message));
          case 14:
          case "end":
            return _context110.stop();
        }
      }, _callee109, this, [[0, 10]]);
    }));
  };
});
var Bt = /*#__PURE__*/function () {
  function Bt(e) {
    _classCallCheck(this, Bt);
    this.store = e;
    this.bufferSize = ct;
    this.TAG = "[AnalyticsEventsService]";
    this.transport = null;
    this.pendingEvents = [];
    this.level = Qe.INFO;
  }
  _createClass(Bt, [{
    key: "setTransport",
    value: function setTransport(e) {
      this.transport = e;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.transport = null, this.pendingEvents = [];
    }
  }, {
    key: "queue",
    value: function queue(e) {
      if (e.level >= this.level && (this.pendingEvents.push(e), this.pendingEvents.length > this.bufferSize)) {
        var _t7 = this.pendingEvents.shift();
        o.d(this.TAG, "Max buffer size reached", "Removed event to accommodate new events", _t7);
      }
      return this;
    }
  }, {
    key: "flushFailedClientEvents",
    value: function flushFailedClientEvents() {
      ae.flushFailedEvents();
    }
  }, {
    key: "flush",
    value: function flush() {
      var e;
      try {
        for (; this.pendingEvents.length > 0;) {
          var _t8 = this.pendingEvents.shift();
          _t8 && (_t8.metadata.peer.peer_id = (e = this.store.getLocalPeer()) == null ? void 0 : e.peerId, _t8.metadata.userAgent = this.store.getUserAgent(), this.transport && this.transport.transportProvider.isConnected ? this.transport.sendEvent(_t8) : this.sendClientEventOnHTTP(_t8));
        }
      } catch (t) {
        o.w(this.TAG, "Flush Failed", t);
      }
    }
  }, {
    key: "sendClientEventOnHTTP",
    value: function sendClientEventOnHTTP(e) {
      var r, s, a, d;
      var t = this.store.getRoom(),
        i = this.store.getLocalPeer();
      e.metadata.token = (r = this.store.getConfig()) == null ? void 0 : r.authToken, e.metadata.peer = {
        session_id: t == null ? void 0 : t.sessionId,
        room_id: t == null ? void 0 : t.id,
        room_name: t == null ? void 0 : t.name,
        template_id: t == null ? void 0 : t.templateId,
        joined_at: (s = t == null ? void 0 : t.joinedAt) == null ? void 0 : s.getTime(),
        session_started_at: (a = t == null ? void 0 : t.startedAt) == null ? void 0 : a.getTime(),
        role: (d = i == null ? void 0 : i.role) == null ? void 0 : d.name,
        user_name: i == null ? void 0 : i.name,
        user_data: i == null ? void 0 : i.metadata
      }, ae.sendEvent(e);
    }
  }]);
  return Bt;
}();
var Zi = {
    autoplayFailed: void 0,
    initialized: !1,
    autoplayCheckPromise: void 0
  },
  ut = /*#__PURE__*/function () {
    function ut(e, t, i) {
      var _this43 = this;
      _classCallCheck(this, ut);
      this.store = e;
      this.deviceManager = t;
      this.eventBus = i;
      this.autoPausedTracks = new Set();
      this.TAG = "[AudioSinkManager]:";
      this.volume = 100;
      this.state = S({}, Zi);
      this.handleAudioPaused = function (e) {
        return c(_this43, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee110() {
          var s, i, r;
          return _regeneratorRuntime().wrap(function _callee110$(_context111) {
            while (1) switch (_context111.prev = _context111.next) {
              case 0:
                i = (s = e.target.srcObject) == null ? void 0 : s.getAudioTracks()[0];
                if (i == null ? void 0 : i.enabled) {
                  _context111.next = 3;
                  break;
                }
                return _context111.abrupt("return");
              case 3:
                o.d(this.TAG, "Audio Paused", e.target.id);
                r = this.store.getTrackById(e.target.id);
                _context111.t0 = r;
                if (!_context111.t0) {
                  _context111.next = 14;
                  break;
                }
                if (!ki()) {
                  _context111.next = 13;
                  break;
                }
                _context111.next = 10;
                return $(500);
              case 10:
                this.playAudioFor(r);
                _context111.next = 14;
                break;
              case 13:
                this.autoPausedTracks.add(r);
              case 14:
              case "end":
                return _context111.stop();
            }
          }, _callee110, this);
        }));
      };
      this.handleTrackUpdate = function (_ref12) {
        var e = _ref12.track;
        o.d(_this43.TAG, "Track updated", "".concat(e));
      };
      this.handleTrackAdd = function (r) {
        return c(_this43, [r], function (_ref13) {
          var _this44 = this;
          var e = _ref13.track,
            t = _ref13.peer,
            _ref13$callListener = _ref13.callListener,
            i = _ref13$callListener === void 0 ? !0 : _ref13$callListener;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee112() {
            var a, d, s;
            return _regeneratorRuntime().wrap(function _callee112$(_context113) {
              while (1) switch (_context113.prev = _context113.next) {
                case 0:
                  s = document.createElement("audio");
                  s.style.display = "none";
                  s.id = e.trackId;
                  s.addEventListener("pause", _this44.handleAudioPaused);
                  s.onerror = function () {
                    return c(_this44, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee111() {
                      var u, h, l;
                      return _regeneratorRuntime().wrap(function _callee111$(_context112) {
                        while (1) switch (_context112.prev = _context112.next) {
                          case 0:
                            o.e(this.TAG, "error on audio element", s.error);
                            l = g.TracksErrors.AudioPlaybackError("Audio playback error for track - ".concat(e.trackId, " code - ").concat((u = s == null ? void 0 : s.error) == null ? void 0 : u.code));
                            this.eventBus.analytics.publish(w.audioPlaybackError(l));
                            _context112.t0 = ((h = s == null ? void 0 : s.error) == null ? void 0 : h.code) === MediaError.MEDIA_ERR_DECODE;
                            if (!_context112.t0) {
                              _context112.next = 10;
                              break;
                            }
                            this.removeAudioElement(s, e);
                            _context112.next = 8;
                            return $(500);
                          case 8:
                            _context112.next = 10;
                            return this.handleTrackAdd({
                              track: e,
                              peer: t,
                              callListener: !1
                            });
                          case 10:
                          case "end":
                            return _context112.stop();
                        }
                      }, _callee111, this);
                    }));
                  };
                  e.setAudioElement(s);
                  e.setVolume(_this44.volume);
                  o.d(_this44.TAG, "Audio track added", "".concat(e));
                  _this44.init();
                  (a = _this44.audioSink) == null || a.append(s);
                  _context113.t0 = _this44.outputDevice;
                  if (!_context113.t0) {
                    _context113.next = 14;
                    break;
                  }
                  _context113.next = 14;
                  return e.setOutputDevice(_this44.outputDevice);
                case 14:
                  s.srcObject = new MediaStream([e.nativeTrack]);
                  i && ((d = _this44.listener) == null || d.onTrackUpdate(N.TRACK_ADDED, e, t));
                  _context113.next = 18;
                  return _this44.handleAutoplayError(e);
                case 18:
                case "end":
                  return _context113.stop();
              }
            }, _callee112);
          })();
        });
      };
      this.handleAutoplayError = function (e) {
        return c(_this43, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee113() {
          var _this45 = this;
          return _regeneratorRuntime().wrap(function _callee113$(_context114) {
            while (1) switch (_context114.prev = _context114.next) {
              case 0:
                _context114.t0 = this.state.autoplayFailed === void 0;
                if (!_context114.t0) {
                  _context114.next = 5;
                  break;
                }
                this.state.autoplayCheckPromise || (this.state.autoplayCheckPromise = new Promise(function (t) {
                  _this45.playAudioFor(e).then(t);
                }));
                _context114.next = 5;
                return this.state.autoplayCheckPromise;
              case 5:
                if (!this.state.autoplayFailed) {
                  _context114.next = 8;
                  break;
                }
                this.autoPausedTracks.add(e);
                return _context114.abrupt("return");
              case 8:
                _context114.next = 10;
                return this.playAudioFor(e);
              case 10:
              case "end":
                return _context114.stop();
            }
          }, _callee113, this);
        }));
      };
      this.handleAudioDeviceChange = function (e) {
        e.error || !e.selection || e.type === "video" || _this43.unpauseAudioTracks();
      };
      this.handleTrackRemove = function (e) {
        _this43.autoPausedTracks.delete(e);
        var t = document.getElementById(e.trackId);
        t && _this43.removeAudioElement(t, e), _this43.audioSink && _this43.audioSink.childElementCount === 0 && (_this43.state.autoplayCheckPromise = void 0, _this43.state.autoplayFailed = void 0), o.d(_this43.TAG, "Audio track removed", "".concat(e));
      };
      this.unpauseAudioTracks = function () {
        return c(_this43, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee114() {
          var _this46 = this;
          var e;
          return _regeneratorRuntime().wrap(function _callee114$(_context115) {
            while (1) switch (_context115.prev = _context115.next) {
              case 0:
                e = [];
                this.autoPausedTracks.forEach(function (t) {
                  e.push(_this46.playAudioFor(t));
                });
                _context115.next = 4;
                return Promise.all(e);
              case 4:
              case "end":
                return _context115.stop();
            }
          }, _callee114, this);
        }));
      };
      this.removeAudioElement = function (e, t) {
        e && (o.d(_this43.TAG, "removing audio element", "".concat(t)), e.removeEventListener("pause", _this43.handleAudioPaused), e.srcObject = null, e.remove(), t.setAudioElement(null));
      };
      this.eventBus.audioTrackAdded.subscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.subscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.subscribe(this.handleTrackUpdate), this.eventBus.deviceChange.subscribe(this.handleAudioDeviceChange);
    }
    _createClass(ut, [{
      key: "setListener",
      value: function setListener(e) {
        this.listener = e;
      }
    }, {
      key: "outputDevice",
      get: function get() {
        return this.deviceManager.outputDevice;
      }
    }, {
      key: "getVolume",
      value: function getVolume() {
        return this.volume;
      }
    }, {
      key: "setVolume",
      value: function setVolume(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee115() {
          return _regeneratorRuntime().wrap(function _callee115$(_context116) {
            while (1) switch (_context116.prev = _context116.next) {
              case 0:
                _context116.next = 2;
                return this.store.updateAudioOutputVolume(e);
              case 2:
                this.volume = e;
              case 3:
              case "end":
                return _context116.stop();
            }
          }, _callee115, this);
        }));
      }
    }, {
      key: "unblockAutoplay",
      value: function unblockAutoplay() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee116() {
          return _regeneratorRuntime().wrap(function _callee116$(_context117) {
            while (1) switch (_context117.prev = _context117.next) {
              case 0:
                this.autoPausedTracks.size > 0 && this.unpauseAudioTracks();
              case 1:
              case "end":
                return _context117.stop();
            }
          }, _callee116, this);
        }));
      }
    }, {
      key: "init",
      value: function init(e) {
        if (this.state.initialized || this.audioSink) return;
        this.state.initialized = !0;
        var t = document.createElement("div");
        t.id = "HMS-SDK-audio-sink-".concat((0, _uuid.v4)()), (e && document.getElementById(e) || document.body).append(t), this.audioSink = t, o.d(this.TAG, "audio sink created", this.audioSink);
      }
    }, {
      key: "cleanUp",
      value: function cleanUp() {
        var e;
        (e = this.audioSink) == null || e.remove(), this.audioSink = void 0, this.eventBus.audioTrackAdded.unsubscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.unsubscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.unsubscribe(this.handleTrackUpdate), this.eventBus.deviceChange.unsubscribe(this.handleAudioDeviceChange), this.autoPausedTracks = new Set(), this.state = S({}, Zi);
      }
    }, {
      key: "playAudioFor",
      value: function playAudioFor(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee117() {
          var t, _r8, s;
          return _regeneratorRuntime().wrap(function _callee117$(_context118) {
            while (1) switch (_context118.prev = _context118.next) {
              case 0:
                t = e.getAudioElement();
                if (t) {
                  _context118.next = 4;
                  break;
                }
                o.w(this.TAG, "No audio element found on track", e.trackId);
                return _context118.abrupt("return");
              case 4:
                _context118.prev = 4;
                _context118.next = 7;
                return t.play();
              case 7:
                this.state.autoplayFailed = !1;
                this.autoPausedTracks.delete(e);
                o.d(this.TAG, "Played track", "".concat(e));
                _context118.next = 17;
                break;
              case 12:
                _context118.prev = 12;
                _context118.t0 = _context118["catch"](4);
                this.autoPausedTracks.add(e), o.e(this.TAG, "Failed to play track", "".concat(e), _context118.t0);
                _r8 = _context118.t0;
                if (!this.state.autoplayFailed && _r8.name === "NotAllowedError") {
                  this.state.autoplayFailed = !0;
                  s = g.TracksErrors.AutoplayBlocked(m.AUTOPLAY, "");
                  s.addNativeError(_r8), this.eventBus.analytics.publish(w.autoplayError()), this.eventBus.autoplayError.publish(s);
                }
              case 17:
              case "end":
                return _context118.stop();
            }
          }, _callee117, this, [[4, 12]]);
        }));
      }
    }]);
    return ut;
  }();
var ht = /*#__PURE__*/function () {
  function ht(e, t) {
    var _this47 = this;
    _classCallCheck(this, ht);
    this.store = e;
    this.eventBus = t;
    this.audioInput = [];
    this.audioOutput = [];
    this.videoInput = [];
    this.hasWebcamPermission = !1;
    this.hasMicrophonePermission = !1;
    this.TAG = "[Device Manager]:";
    this.initialized = !1;
    this.videoInputChanged = !1;
    this.audioInputChanged = !1;
    this.updateOutputDevice = function (e) {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee118() {
        var t;
        return _regeneratorRuntime().wrap(function _callee118$(_context119) {
          while (1) switch (_context119.prev = _context119.next) {
            case 0:
              t = this.audioOutput.find(function (i) {
                return i.deviceId === e;
              });
              _context119.t0 = t;
              if (!_context119.t0) {
                _context119.next = 7;
                break;
              }
              this.outputDevice = t;
              _context119.next = 6;
              return this.store.updateAudioOutputDevice(t);
            case 6:
              Q.updateSelection("audioOutput", {
                deviceId: t.deviceId,
                groupId: t.groupId
              });
            case 7:
              return _context119.abrupt("return", t);
            case 8:
            case "end":
              return _context119.stop();
          }
        }, _callee118, this);
      }));
    };
    this.getCurrentSelection = function () {
      var a, d;
      var e = _this47.store.getLocalPeer(),
        t = _this47.createIdentifier((a = e == null ? void 0 : e.audioTrack) == null ? void 0 : a.getMediaTrackSettings()),
        i = _this47.createIdentifier((d = e == null ? void 0 : e.videoTrack) == null ? void 0 : d.getMediaTrackSettings()),
        r = _this47.audioInput.find(function (l) {
          return _this47.createIdentifier(l) === t;
        }),
        s = _this47.videoInput.find(function (l) {
          return _this47.createIdentifier(l) === i;
        });
      return {
        audioInput: r,
        videoInput: s,
        audioOutput: _this47.outputDevice
      };
    };
    this.computeChange = function (e, t) {
      return e.length !== t.length ? !0 : t.some(function (i) {
        return !e.includes(_this47.createIdentifier(i));
      });
    };
    this.enumerateDevices = function () {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee119() {
        var _this48 = this;
        var _e5, _t9, _i6;
        return _regeneratorRuntime().wrap(function _callee119$(_context120) {
          while (1) switch (_context120.prev = _context120.next) {
            case 0:
              _context120.prev = 0;
              _context120.next = 3;
              return navigator.mediaDevices.enumerateDevices();
            case 3:
              _e5 = _context120.sent;
              _t9 = this.videoInput.map(this.createIdentifier);
              _i6 = this.audioInput.map(this.createIdentifier);
              this.audioInput = [], this.audioOutput = [], this.videoInput = [], _e5.forEach(function (r) {
                r.kind === "audioinput" && r.label ? (_this48.hasMicrophonePermission = !0, _this48.audioInput.push(r)) : r.kind === "audiooutput" ? _this48.audioOutput.push(r) : r.kind === "videoinput" && r.label && (_this48.hasWebcamPermission = !0, _this48.videoInput.push(r));
              }), this.videoInputChanged = this.computeChange(_t9, this.videoInput), this.audioInputChanged = this.computeChange(_i6, this.audioInput), Q.setDevices({
                videoInput: _toConsumableArray(this.videoInput),
                audioInput: _toConsumableArray(this.audioInput),
                audioOutput: _toConsumableArray(this.audioOutput)
              }), this.logDevices("Enumerate Devices");
              _context120.next = 12;
              break;
            case 9:
              _context120.prev = 9;
              _context120.t0 = _context120["catch"](0);
              o.e(this.TAG, "Failed enumerating devices", _context120.t0);
            case 12:
            case "end":
              return _context120.stop();
          }
        }, _callee119, this, [[0, 9]]);
      }));
    };
    this.handleDeviceChange = st(function () {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee120() {
        var e;
        return _regeneratorRuntime().wrap(function _callee120$(_context121) {
          while (1) switch (_context121.prev = _context121.next) {
            case 0:
              _context121.next = 2;
              return this.enumerateDevices();
            case 2:
              this.logDevices("After Device Change");
              e = this.store.getLocalPeer();
              _context121.next = 6;
              return this.setOutputDevice(!0);
            case 6:
              _context121.next = 8;
              return this.handleAudioInputDeviceChange(e == null ? void 0 : e.audioTrack);
            case 8:
              _context121.next = 10;
              return this.handleVideoInputDeviceChange(e == null ? void 0 : e.videoTrack);
            case 10:
              this.eventBus.analytics.publish(w.deviceChange({
                selection: this.getCurrentSelection(),
                type: "change",
                devices: this.getDevices()
              }));
            case 11:
            case "end":
              return _context121.stop();
          }
        }, _callee120, this);
      }));
    }, 500).bind(this);
    this.handleAudioInputDeviceChange = function (e) {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee121() {
        var t, i, r;
        return _regeneratorRuntime().wrap(function _callee121$(_context122) {
          while (1) switch (_context122.prev = _context122.next) {
            case 0:
              if (e) {
                _context122.next = 3;
                break;
              }
              o.d(this.TAG, "No Audio track on local peer");
              return _context122.abrupt("return");
            case 3:
              if (this.audioInputChanged) {
                _context122.next = 6;
                break;
              }
              o.d(this.TAG, "No Change in AudioInput Device");
              return _context122.abrupt("return");
            case 6:
              t = this.getNewAudioInputDevice();
              if (!(!t || !t.deviceId)) {
                _context122.next = 10;
                break;
              }
              this.eventBus.analytics.publish(w.deviceChange({
                selection: {
                  audioInput: t
                },
                error: new Error("Audio device not found"),
                devices: this.getDevices(),
                type: "audioInput"
              })), o.w(this.TAG, "Audio device not found");
              return _context122.abrupt("return");
            case 10:
              i = e.settings, r = new Z().codec(i.codec).maxBitrate(i.maxBitrate).deviceId(t.deviceId).build();
              _context122.prev = 11;
              _context122.next = 14;
              return e.setSettings(r, !0);
            case 14:
              this.eventBus.deviceChange.publish({
                devices: this.getDevices(),
                selection: t,
                type: "audioInput"
              });
              this.logDevices("Audio Device Change Success");
              _context122.next = 21;
              break;
            case 18:
              _context122.prev = 18;
              _context122.t0 = _context122["catch"](11);
              o.e(this.TAG, "[Audio Device Change]", _context122.t0), this.eventBus.analytics.publish(w.deviceChange({
                selection: {
                  audioInput: t
                },
                devices: this.getDevices(),
                type: "audioInput",
                error: _context122.t0
              })), this.eventBus.deviceChange.publish({
                error: _context122.t0,
                selection: t,
                type: "audioInput",
                devices: this.getDevices()
              });
            case 21:
            case "end":
              return _context122.stop();
          }
        }, _callee121, this, [[11, 18]]);
      }));
    };
    this.handleVideoInputDeviceChange = function (e) {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee122() {
        var t, i, r;
        return _regeneratorRuntime().wrap(function _callee122$(_context123) {
          while (1) switch (_context123.prev = _context123.next) {
            case 0:
              if (e) {
                _context123.next = 3;
                break;
              }
              o.d(this.TAG, "No video track on local peer");
              return _context123.abrupt("return");
            case 3:
              if (this.videoInputChanged) {
                _context123.next = 6;
                break;
              }
              o.d(this.TAG, "No Change in VideoInput Device");
              return _context123.abrupt("return");
            case 6:
              t = this.videoInput[0];
              if (!(!t || !t.deviceId)) {
                _context123.next = 10;
                break;
              }
              this.eventBus.analytics.publish(w.deviceChange({
                selection: {
                  videoInput: t
                },
                error: new Error("Video device not found"),
                devices: this.getDevices(),
                type: "video"
              })), o.w(this.TAG, "Video device not found");
              return _context123.abrupt("return");
            case 10:
              i = e.settings, r = new Y().codec(i.codec).maxBitrate(i.maxBitrate).maxFramerate(i.maxFramerate).setWidth(i.width).setHeight(i.height).deviceId(t.deviceId).build();
              _context123.prev = 11;
              _context123.next = 14;
              return e.setSettings(r, !0);
            case 14:
              this.eventBus.deviceChange.publish({
                devices: this.getDevices(),
                selection: t,
                type: "video"
              });
              this.logDevices("Video Device Change Success");
              _context123.next = 21;
              break;
            case 18:
              _context123.prev = 18;
              _context123.t0 = _context123["catch"](11);
              o.e(this.TAG, "[Video Device Change]", _context123.t0), this.eventBus.analytics.publish(w.deviceChange({
                selection: {
                  videoInput: t
                },
                devices: this.getDevices(),
                type: "video",
                error: _context123.t0
              })), this.eventBus.deviceChange.publish({
                error: _context123.t0,
                type: "video",
                selection: t,
                devices: this.getDevices()
              });
            case 21:
            case "end":
              return _context123.stop();
          }
        }, _callee122, this, [[11, 18]]);
      }));
    };
    var i = function i(_ref14) {
      var r = _ref14.enabled,
        s = _ref14.track;
      return r && s.source === "regular";
    };
    this.eventBus.localVideoEnabled.waitFor(i).then(function () {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee123() {
        return _regeneratorRuntime().wrap(function _callee123$(_context124) {
          while (1) switch (_context124.prev = _context124.next) {
            case 0:
              _context124.next = 2;
              return this.enumerateDevices();
            case 2:
              this.videoInputChanged && this.eventBus.deviceChange.publish({
                devices: this.getDevices()
              });
            case 3:
            case "end":
              return _context124.stop();
          }
        }, _callee123, this);
      }));
    }), this.eventBus.localAudioEnabled.waitFor(i).then(function () {
      return c(_this47, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee124() {
        return _regeneratorRuntime().wrap(function _callee124$(_context125) {
          while (1) switch (_context125.prev = _context125.next) {
            case 0:
              _context125.next = 2;
              return this.enumerateDevices();
            case 2:
              this.audioInputChanged && this.eventBus.deviceChange.publish({
                devices: this.getDevices()
              });
            case 3:
            case "end":
              return _context125.stop();
          }
        }, _callee124, this);
      }));
    });
  }
  _createClass(ht, [{
    key: "init",
    value: function init() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee125() {
        return _regeneratorRuntime().wrap(function _callee125$(_context126) {
          while (1) switch (_context126.prev = _context126.next) {
            case 0:
              _context126.t0 = this.initialized && !e;
              if (_context126.t0) {
                _context126.next = 11;
                break;
              }
              !this.initialized && navigator.mediaDevices.addEventListener("devicechange", this.handleDeviceChange);
              this.initialized = !0;
              _context126.next = 6;
              return this.enumerateDevices();
            case 6:
              this.logDevices("Init");
              _context126.next = 9;
              return this.setOutputDevice();
            case 9:
              this.eventBus.deviceChange.publish({
                devices: this.getDevices()
              });
              this.eventBus.analytics.publish(w.deviceChange({
                selection: this.getCurrentSelection(),
                type: "list",
                devices: this.getDevices()
              }));
            case 11:
            case "end":
              return _context126.stop();
          }
        }, _callee125, this);
      }));
    }
  }, {
    key: "getDevices",
    value: function getDevices() {
      return {
        audioInput: this.audioInput,
        audioOutput: this.audioOutput,
        videoInput: this.videoInput
      };
    }
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      this.initialized = !1, this.audioInput = [], this.audioOutput = [], this.videoInput = [], this.outputDevice = void 0, navigator.mediaDevices.removeEventListener("devicechange", this.handleDeviceChange);
    }
  }, {
    key: "createIdentifier",
    value: function createIdentifier(e) {
      return e ? "".concat(e.deviceId).concat(e.groupId) : "";
    }
  }, {
    key: "getNewAudioInputDevice",
    value: function getNewAudioInputDevice() {
      var e = this.audioInput.find(function (t) {
        return t.deviceId === "default";
      });
      return e ? this.audioInput.find(function (i) {
        return i.deviceId !== "default" && e.label.includes(i.label);
      }) : this.audioInput[0];
    }
  }, {
    key: "setOutputDevice",
    value: function setOutputDevice() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee126() {
        var _this49 = this;
        var t, i;
        return _regeneratorRuntime().wrap(function _callee126$(_context127) {
          while (1) switch (_context127.prev = _context127.next) {
            case 0:
              t = this.getNewAudioInputDevice(), i = this.createIdentifier(this.outputDevice);
              this.outputDevice = this.getAudioOutputDeviceMatchingInput(t);
              this.outputDevice || (this.outputDevice = this.audioOutput.find(function (r) {
                return _this49.createIdentifier(r) === i;
              }), this.outputDevice || (this.outputDevice = this.audioOutput.find(function (r) {
                return r.deviceId === "default";
              }) || this.audioOutput[0]));
              _context127.next = 5;
              return this.store.updateAudioOutputDevice(this.outputDevice);
            case 5:
              e && i !== this.createIdentifier(this.outputDevice) && (this.eventBus.analytics.publish(w.deviceChange({
                selection: {
                  audioOutput: this.outputDevice
                },
                devices: this.getDevices(),
                type: "audioOutput"
              })), this.eventBus.deviceChange.publish({
                selection: this.outputDevice,
                type: "audioOutput",
                devices: this.getDevices()
              }));
            case 6:
            case "end":
              return _context127.stop();
          }
        }, _callee126, this);
      }));
    }
  }, {
    key: "getAudioOutputDeviceMatchingInput",
    value: function getAudioOutputDeviceMatchingInput(e) {
      var r, s;
      var t = ((s = (r = this.store.getConfig()) == null ? void 0 : r.settings) == null ? void 0 : s.speakerAutoSelectionBlacklist) || [];
      if (t === "all") return;
      var i = (e == null ? void 0 : e.label.toLowerCase()) || "";
      if (!t.some(function (a) {
        return i.includes(a.toLowerCase());
      }) && (e == null ? void 0 : e.groupId)) return this.audioOutput.find(function (a) {
        return e.deviceId !== "default" && a.label === e.label;
      });
    }
  }, {
    key: "logDevices",
    value: function logDevices() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      o.d(this.TAG, e, JSON.stringify({
        videoInput: _toConsumableArray(this.videoInput),
        audioInput: _toConsumableArray(this.audioInput),
        audioOutput: _toConsumableArray(this.audioOutput),
        selected: this.getCurrentSelection()
      }, null, 4));
    }
  }]);
  return ht;
}();
var pt = /*#__PURE__*/function () {
  function pt(e, t) {
    _classCallCheck(this, pt);
    this.deviceManager = e;
    this.audioSinkManager = t;
  }
  _createClass(pt, [{
    key: "getVolume",
    value: function getVolume() {
      return this.audioSinkManager.getVolume();
    }
  }, {
    key: "setVolume",
    value: function setVolume(e) {
      if (e < 0 || e > 100) throw Error("Please pass a valid number between 0-100");
      this.audioSinkManager.setVolume(e);
    }
  }, {
    key: "getDevice",
    value: function getDevice() {
      return this.deviceManager.outputDevice;
    }
  }, {
    key: "setDevice",
    value: function setDevice(e) {
      return this.deviceManager.updateOutputDevice(e);
    }
  }, {
    key: "unblockAutoplay",
    value: function unblockAutoplay() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee127() {
        return _regeneratorRuntime().wrap(function _callee127$(_context128) {
          while (1) switch (_context128.prev = _context128.next) {
            case 0:
              _context128.next = 2;
              return this.audioSinkManager.unblockAutoplay();
            case 2:
              _context128.next = 4;
              return pe.resumeContext();
            case 4:
            case "end":
              return _context128.stop();
          }
        }, _callee127, this);
      }));
    }
  }]);
  return pt;
}();
var G = /*#__PURE__*/_createClass(function G(e, t) {
  var _this50 = this;
  _classCallCheck(this, G);
  this.eventName = e;
  this.eventEmitter = t;
  this.publish = function (e) {
    _this50.eventEmitter.emit(_this50.eventName, e);
  };
  this.subscribe = function (e) {
    _this50.eventEmitter.on(_this50.eventName, e);
  };
  this.subscribeOnce = function (e) {
    _this50.eventEmitter.once(_this50.eventName, e);
  };
  this.unsubscribe = function (e) {
    _this50.eventEmitter.off(_this50.eventName, e);
  };
  this.waitFor = function (e) {
    return _this50.eventEmitter.waitFor(_this50.eventName, {
      filter: e
    });
  };
  this.removeAllListeners = function () {
    _this50.eventEmitter.removeAllListeners(_this50.eventName);
  };
});
var $t = /*#__PURE__*/_createClass(function $t() {
  _classCallCheck(this, $t);
  this.eventEmitter = new _eventemitter.EventEmitter2();
  this.deviceChange = new G(W.DEVICE_CHANGE, this.eventEmitter);
  this.localAudioEnabled = new G(W.LOCAL_AUDIO_ENABLED, this.eventEmitter);
  this.localVideoEnabled = new G(W.LOCAL_VIDEO_ENABLED, this.eventEmitter);
  this.statsUpdate = new G(W.STATS_UPDATE, this.eventEmitter);
  this.trackDegraded = new G(W.TRACK_DEGRADED, this.eventEmitter);
  this.trackRestored = new G(W.TRACK_RESTORED, this.eventEmitter);
  this.trackAudioLevelUpdate = new G(W.TRACK_AUDIO_LEVEL_UPDATE, this.eventEmitter);
  this.audioPluginFailed = new G(W.AUDIO_PLUGIN_FAILED, this.eventEmitter);
  this.localAudioSilence = new G(W.LOCAL_AUDIO_SILENCE, this.eventEmitter);
  this.analytics = new G(W.ANALYTICS, this.eventEmitter);
  this.policyChange = new G(W.POLICY_CHANGE, this.eventEmitter);
  this.localRoleUpdate = new G(W.LOCAL_ROLE_UPDATE, this.eventEmitter);
  this.audioTrackUpdate = new G(W.AUDIO_TRACK_UPDATE, this.eventEmitter);
  this.audioTrackAdded = new G(W.AUDIO_TRACK_ADDED, this.eventEmitter);
  this.audioTrackRemoved = new G(W.AUDIO_TRACK_REMOVED, this.eventEmitter);
  this.autoplayError = new G(W.AUTOPLAY_ERROR, this.eventEmitter);
  this.leave = new G(W.LEAVE, this.eventEmitter);
});
var Wt = /*#__PURE__*/function () {
  function Wt(e, t, i) {
    _classCallCheck(this, Wt);
    this.store = e;
    this.listener = t;
    this.audioListener = i;
  }
  _createClass(Wt, [{
    key: "handleActiveSpeakers",
    value: function handleActiveSpeakers(e) {
      var _this51 = this;
      var s, a, d;
      var t = e["speaker-list"],
        i = t.map(function (l) {
          return {
            audioLevel: l.level,
            peer: _this51.store.getPeerById(l.peer_id),
            track: _this51.store.getTrackById(l.track_id)
          };
        });
      (s = this.audioListener) == null || s.onAudioLevelUpdate(i), this.store.updateSpeakers(i);
      var r = t[0];
      if (r) {
        var l = this.store.getPeerById(r.peer_id);
        (a = this.listener) == null || a.onPeerUpdate(z.BECAME_DOMINANT_SPEAKER, l);
      } else (d = this.listener) == null || d.onPeerUpdate(z.RESIGNED_DOMINANT_SPEAKER, null);
    }
  }]);
  return Wt;
}();
var A;
(function (y) {
  y.ROOM_STATE = "room-state", y.PEER_JOIN = "on-peer-join", y.PEER_LEAVE = "on-peer-leave", y.PEER_LIST = "peer-list", y.TRACK_METADATA_ADD = "on-track-add", y.TRACK_UPDATE = "on-track-update", y.CHANGE_TRACK_MUTE_STATE_UPDATE = "on-change-track-mute-state-request", y.ACTIVE_SPEAKERS = "active-speakers", y.CONNECTION_QUALITY = "on-connection-quality-update", y.SFU_STATS = "sfu-stats", y.ON_SFU_TRACK_LAYER_UPDATE = "on-track-layer-update", y.BROADCAST = "on-broadcast", y.ROLE_CHANGE = "on-role-change", y.POLICY_CHANGE = "on-policy-change", y.ROLE_CHANGE_REQUEST = "on-role-change-request", y.TRACK_UPDATE_REQUEST = "on-track-update-request", y.PEER_UPDATE = "on-peer-update", y.PEER_LEAVE_REQUEST = "on-peer-leave-request", y.UNSUPPORTED = "unsupported", y.RTMP_START = "on-rtmp-start", y.RTMP_STOP = "on-rtmp-stop", y.RECORDING_START = "on-record-start", y.RECORDING_STOP = "on-record-stop", y.HLS_START = "on-hls-start", y.HLS_STOP = "on-hls-stop", y.METADATA_CHANGE = "on-metadata-change";
})(A || (A = {}));
var Kt = /*#__PURE__*/function () {
  function Kt(e, t) {
    _classCallCheck(this, Kt);
    this.store = e;
    this.listener = t;
    this.TAG = "[BroadcastManager]";
  }
  _createClass(Kt, [{
    key: "handleNotification",
    value: function handleNotification(e, t) {
      e === A.BROADCAST && this.handleBroadcast(t);
    }
  }, {
    key: "handleBroadcast",
    value: function handleBroadcast(e) {
      var u;
      var t = e.peer,
        i = e.info,
        r = e.roles,
        s = this.getSender(t),
        a = e.private ? this.store.getLocalPeer() : void 0,
        d = [];
      if (r == null ? void 0 : r.length) {
        var h = this.store.getKnownRoles();
        var _iterator14 = _createForOfIteratorHelper(r),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _p = _step14.value;
            h[_p] && d.push(h[_p]);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
      var l = new Ae(D(S({}, i), {
        sender: s,
        recipientRoles: d,
        recipientPeer: a,
        time: new Date(e.timestamp)
      }));
      o.d(this.TAG, "Received Message from sender=".concat(t == null ? void 0 : t.peer_id, ": ").concat(l)), (u = this.listener) == null || u.onMessageReceived(l);
    }
  }, {
    key: "getSender",
    value: function getSender(e) {
      var t = e ? this.store.getPeerById(e.peer_id) : void 0;
      return !t && e && (t = new de({
        peerId: e.peer_id,
        name: e.info.name,
        isLocal: !1,
        customerUserId: e.info.user_id,
        metadata: e.info.data
      })), t;
    }
  }]);
  return Kt;
}();
var qt = /*#__PURE__*/function () {
  function qt(e) {
    _classCallCheck(this, qt);
    this.listener = e;
  }
  _createClass(qt, [{
    key: "handleQualityUpdate",
    value: function handleQualityUpdate(e) {
      var r;
      var i = e.peers.map(function (s) {
        return {
          peerID: s.peer_id,
          downlinkQuality: s.downlink_score
        };
      });
      (r = this.listener) == null || r.onConnectionQualityUpdate(i);
    }
  }]);
  return qt;
}();
var jt = /*#__PURE__*/function () {
  function jt(e, t, i, r) {
    var _this52 = this;
    _classCallCheck(this, jt);
    this.store = e;
    this.peerManager = t;
    this.trackManager = i;
    this.listener = r;
    this.TAG = "[PeerListManager]";
    this.handleInitialPeerList = function (e) {
      var t = Object.values(e.peers);
      _this52.peerManager.handlePeerList(t);
    };
    this.handleReconnectPeerList = function (e) {
      _this52.handleRepeatedPeerList(e.peers);
    };
    this.handlePreviewRoomState = function (e) {
      if (!_this52.store.hasRoleDetailsArrived()) return;
      var t = e.peers;
      if (t == null) {
        e.peer_count === 0 && _this52.handleRepeatedPeerList({});
        return;
      }
      Object.keys(t).forEach(function (i) {
        t[i].tracks = {}, t[i].is_from_room_state = !0;
      }), _this52.handleRepeatedPeerList(t);
    };
    this.handleRepeatedPeerList = function (e) {
      var t = _this52.store.getRemotePeers(),
        i = Object.values(e),
        r = t.filter(function (a) {
          return !e[a.peerId];
        });
      r.length > 0 && o.d(_this52.TAG, "".concat(r)), r.forEach(function (a) {
        var l;
        var d = {
          peer_id: a.peerId,
          role: ((l = a.role) == null ? void 0 : l.name) || "",
          info: {
            name: a.name,
            data: a.metadata || "",
            user_id: a.customerUserId || ""
          },
          tracks: {}
        };
        _this52.peerManager.handlePeerLeave(d);
      });
      var s = [];
      i.forEach(function (a) {
        var d = _this52.store.getPeerById(a.peer_id),
          l = Object.values(a.tracks);
        d && (_this52.store.getPeerTracks(d.peerId).forEach(function (h) {
          var p;
          a.tracks[h.trackId] || (_this52.removePeerTrack(d, h.trackId), (p = _this52.listener) == null || p.onTrackUpdate(N.TRACK_REMOVED, h, d));
        }), l.forEach(function (h) {
          _this52.store.getTrackById(h.track_id) || _this52.store.setTrackState({
            peerId: d.peerId,
            trackInfo: h
          });
        }), _this52.trackManager.handleTrackUpdate({
          peer: {
            info: a.info,
            peer_id: a.peer_id
          },
          tracks: a.tracks
        }), _this52.peerManager.handlePeerUpdate(a)), s.push(a);
      }), s.length > 0 && _this52.peerManager.handlePeerList(s);
    };
  }
  _createClass(jt, [{
    key: "handleNotification",
    value: function handleNotification(e, t, i) {
      if (e === A.PEER_LIST) {
        var _r9 = t;
        i ? (o.d(this.TAG, "RECONNECT_PEER_LIST event", JSON.stringify(_r9, null, 2)), this.handleReconnectPeerList(_r9)) : (o.d(this.TAG, "PEER_LIST event", JSON.stringify(_r9, null, 2)), this.handleInitialPeerList(_r9));
      } else if (e === A.ROOM_STATE) {
        var _r10 = t;
        this.handlePreviewRoomState(_r10);
      }
    }
  }, {
    key: "removePeerTrack",
    value: function removePeerTrack(e, t) {
      var i, r;
      if (o.d(this.TAG, "removing track - ".concat(t, " from ").concat(e)), ((i = e.audioTrack) == null ? void 0 : i.trackId) === t) e.audioTrack = void 0;else if (((r = e.videoTrack) == null ? void 0 : r.trackId) === t) e.videoTrack = void 0;else {
        var s = e.auxiliaryTracks.findIndex(function (a) {
          return a.trackId === t;
        });
        s >= 0 && e.auxiliaryTracks.splice(s, 1);
      }
    }
  }]);
  return jt;
}();
var K = function K(n) {
  return n ? new Date(n) : void 0;
};
var Jt = /*#__PURE__*/function () {
  function Jt(e, t, i) {
    var _this53 = this;
    _classCallCheck(this, Jt);
    this.store = e;
    this.trackManager = t;
    this.listener = i;
    this.TAG = "[PeerManager]";
    this.handlePeerList = function (e) {
      var r, s;
      if (e.length === 0) {
        (r = _this53.listener) == null || r.onPeerUpdate(z.PEER_LIST, []);
        return;
      }
      var t = [],
        i = new Set(e.map(function (a) {
          return a.peer_id;
        }));
      _this53.store.getRemotePeers().forEach(function (_ref15) {
        var a = _ref15.peerId,
          d = _ref15.fromRoomState;
        !i.has(a) && d && _this53.store.removePeer(a);
      });
      var _iterator15 = _createForOfIteratorHelper(e),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var _a = _step15.value;
          t.push(_this53.makePeer(_a));
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      (s = _this53.listener) == null || s.onPeerUpdate(z.PEER_LIST, t), _this53.trackManager.processPendingTracks();
    };
    this.handlePeerJoin = function (e) {
      var i;
      var t = _this53.makePeer(e);
      (i = _this53.listener) == null || i.onPeerUpdate(z.PEER_JOINED, t), _this53.trackManager.processPendingTracks();
    };
    this.handlePeerLeave = function (e) {
      var i, r, s, a;
      var t = _this53.store.getPeerById(e.peer_id);
      _this53.store.removePeer(e.peer_id), o.d(_this53.TAG, "PEER_LEAVE", e.peer_id, "remainingPeers=".concat(_this53.store.getPeers().length)), !!t && (t.audioTrack && ((i = _this53.listener) == null || i.onTrackUpdate(N.TRACK_REMOVED, t.audioTrack, t)), t.videoTrack && ((r = _this53.listener) == null || r.onTrackUpdate(N.TRACK_REMOVED, t.videoTrack, t)), (s = t.auxiliaryTracks) == null || s.forEach(function (d) {
        var l;
        (l = _this53.listener) == null || l.onTrackUpdate(N.TRACK_REMOVED, d, t);
      }), (a = _this53.listener) == null || a.onPeerUpdate(z.PEER_LEFT, t));
    };
  }
  _createClass(Jt, [{
    key: "handleNotification",
    value: function handleNotification(e, t) {
      switch (e) {
        case A.PEER_JOIN:
          {
            var _i7 = t;
            this.handlePeerJoin(_i7);
            break;
          }
        case A.PEER_LEAVE:
          {
            var _i8 = t;
            this.handlePeerLeave(_i8);
            break;
          }
        case A.PEER_UPDATE:
          this.handlePeerUpdate(t);
          break;
        default:
          break;
      }
    }
  }, {
    key: "handlePeerUpdate",
    value: function handlePeerUpdate(e) {
      var i;
      var t = this.store.getPeerById(e.peer_id);
      if (!!t) {
        if (t.role && t.role.name !== e.role) {
          var _r11 = this.store.getPolicyForRole(e.role);
          t.updateRole(_r11), this.updateSimulcastLayersForPeer(t), (i = this.listener) == null || i.onPeerUpdate(z.ROLE_UPDATED, t);
        }
        this.handlePeerInfoUpdate(S({
          peer: t
        }, e.info));
      }
    }
  }, {
    key: "handlePeerInfoUpdate",
    value: function handlePeerInfoUpdate(_ref16) {
      var e = _ref16.peer,
        t = _ref16.name,
        i = _ref16.data;
      var r, s;
      !e || (t && e.name !== t && (e.updateName(t), (r = this.listener) == null || r.onPeerUpdate(z.NAME_UPDATED, e)), i && e.metadata !== i && (e.updateMetadata(i), (s = this.listener) == null || s.onPeerUpdate(z.METADATA_UPDATED, e)));
    }
  }, {
    key: "makePeer",
    value: function makePeer(e) {
      var t = this.store.getPeerById(e.peer_id);
      t || (t = new ze({
        peerId: e.peer_id,
        name: e.info.name,
        customerUserId: e.info.user_id,
        metadata: e.info.data,
        role: this.store.getPolicyForRole(e.role),
        joinedAt: K(e.joined_at),
        fromRoomState: !!e.is_from_room_state
      }), this.store.addPeer(t), o.d(this.TAG, "adding to the peerList", "".concat(t)));
      for (var _i9 in e.tracks) this.store.setTrackState({
        peerId: e.peer_id,
        trackInfo: e.tracks[_i9]
      });
      return t;
    }
  }, {
    key: "updateSimulcastLayersForPeer",
    value: function updateSimulcastLayersForPeer(e) {
      var _this54 = this;
      this.store.getPeerTracks(e.peerId).forEach(function (t) {
        if (t.type === "video" && ["regular", "screen"].includes(t.source)) {
          var _i10 = t,
            _r12 = _this54.store.getSimulcastDefinitionsForPeer(e, _i10.source);
          _i10.setSimulcastDefinitons(_r12);
        }
      });
    }
  }]);
  return Jt;
}();
var zt = /*#__PURE__*/function () {
  function zt(e, t) {
    _classCallCheck(this, zt);
    this.store = e;
    this.eventBus = t;
  }
  _createClass(zt, [{
    key: "handlePolicyChange",
    value: function handlePolicyChange(e) {
      var t = this.store.getLocalPeer();
      if (t && !t.role) {
        var _r13 = e.known_roles[e.name];
        t.updateRole(_r13);
      }
      this.store.setKnownRoles(e);
      var i = this.store.getRoom();
      if (i ? i.templateId = e.template_id : o.w("[PolicyChangeManager]", "on policy change - room not present"), (t == null ? void 0 : t.role) && t.role.name !== e.name) {
        var _r14 = this.store.getPolicyForRole(e.name),
          s = t.role;
        t.updateRole(_r14), this.eventBus.localRoleUpdate.publish({
          oldRole: s,
          newRole: _r14
        });
      }
      this.eventBus.policyChange.publish(e);
    }
  }]);
  return zt;
}();
var Qt = /*#__PURE__*/function () {
  function Qt(e, t) {
    _classCallCheck(this, Qt);
    this.store = e;
    this.listener = t;
  }
  _createClass(Qt, [{
    key: "handleNotification",
    value: function handleNotification(e, t) {
      switch (e) {
        case A.ROLE_CHANGE_REQUEST:
          this.handleRoleChangeRequest(t);
          break;
        case A.TRACK_UPDATE_REQUEST:
          this.handleTrackUpdateRequest(t);
          break;
        case A.CHANGE_TRACK_MUTE_STATE_UPDATE:
          this.handleChangeTrackStateRequest(t);
          break;
        default:
          return;
      }
    }
  }, {
    key: "handleRoleChangeRequest",
    value: function handleRoleChangeRequest(e) {
      var i;
      var t = {
        requestedBy: e.requested_by ? this.store.getPeerById(e.requested_by) : void 0,
        role: this.store.getPolicyForRole(e.role),
        token: e.token
      };
      (i = this.listener) == null || i.onRoleChangeRequest(t);
    }
  }, {
    key: "handleTrackUpdateRequest",
    value: function handleTrackUpdateRequest(e) {
      var _this55 = this;
      var t = e.requested_by,
        i = e.track_id,
        r = e.mute,
        s = t ? this.store.getPeerById(t) : void 0,
        a = this.store.getLocalPeerTracks().find(function (l) {
          return l.publishedTrackId === i;
        });
      if (!a) return;
      var d = function d() {
        var l;
        (l = _this55.listener) == null || l.onChangeTrackStateRequest({
          requestedBy: s,
          track: a,
          enabled: !r
        });
      };
      if (r) {
        if (a.enabled === !r) return;
        a.setEnabled(!r).then(d);
      } else d();
    }
  }, {
    key: "handleChangeTrackStateRequest",
    value: function handleChangeTrackStateRequest(e) {
      var _this56 = this;
      var u;
      var t = e.type,
        i = e.source,
        r = e.value,
        s = e.requested_by,
        a = s ? this.store.getPeerById(s) : void 0,
        d = !r,
        l = this.getTracksToBeUpdated({
          type: t,
          source: i,
          enabled: d
        });
      if (l.length !== 0) if (d) (u = this.listener) == null || u.onChangeMultiTrackStateRequest({
        requestedBy: a,
        tracks: l,
        type: t,
        source: i,
        enabled: !0
      });else {
        var h = [];
        var _iterator16 = _createForOfIteratorHelper(l),
          _step16;
        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _p2 = _step16.value;
            h.push(_p2.setEnabled(!1));
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
        Promise.all(h).then(function () {
          var p;
          (p = _this56.listener) == null || p.onChangeMultiTrackStateRequest({
            requestedBy: a,
            tracks: l,
            enabled: !1
          });
        });
      }
    }
  }, {
    key: "getTracksToBeUpdated",
    value: function getTracksToBeUpdated(_ref17) {
      var e = _ref17.type,
        t = _ref17.source,
        i = _ref17.enabled;
      var s = this.store.getLocalPeerTracks();
      return e && (s = s.filter(function (a) {
        return a.type === e;
      })), t && (s = s.filter(function (a) {
        return a.source === t;
      })), s.filter(function (a) {
        return a.enabled !== i;
      });
    }
  }]);
  return Qt;
}();
var Yt = /*#__PURE__*/function () {
  function Yt(e, t) {
    _classCallCheck(this, Yt);
    this.store = e;
    this.listener = t;
    this.TAG = "[RoomUpdateManager]";
  }
  _createClass(Yt, [{
    key: "handleNotification",
    value: function handleNotification(e, t) {
      switch (e) {
        case A.PEER_LIST:
          this.onRoomState(t.room);
          break;
        case A.RTMP_START:
          this.onRTMPStart(t);
          break;
        case A.RTMP_STOP:
          this.onRTMPStop(t);
          break;
        case A.RECORDING_START:
          this.onRecordingStart(t);
          break;
        case A.RECORDING_STOP:
          this.onRecordingStop(t);
          break;
        case A.ROOM_STATE:
          this.handlePreviewRoomState(t);
          break;
        default:
          this.onHLS(e, t);
          break;
      }
    }
  }, {
    key: "handlePreviewRoomState",
    value: function handlePreviewRoomState(e) {
      var t = e.room;
      this.onRoomState(t, e.peer_count);
    }
  }, {
    key: "onRoomState",
    value: function onRoomState(e, t) {
      var u, h, p;
      var i = e.recording,
        r = e.streaming,
        s = e.session_id,
        a = e.started_at,
        d = e.name,
        l = this.store.getRoom();
      if (!l) {
        o.w(this.TAG, "on room state - room not present");
        return;
      }
      l.peerCount = t, l.name = d, l.recording.server.running = !!(i == null ? void 0 : i.sfu.enabled), l.recording.browser.running = !!(i == null ? void 0 : i.browser.enabled), l.rtmp.running = !!((u = r == null ? void 0 : r.rtmp) == null ? void 0 : u.enabled), l.rtmp.startedAt = K((h = r == null ? void 0 : r.rtmp) == null ? void 0 : h.started_at), l.recording.server.startedAt = K(i == null ? void 0 : i.sfu.started_at), l.recording.browser.startedAt = K(i == null ? void 0 : i.browser.started_at), l.recording.hls = this.getPeerListHLSRecording(i), l.hls = this.convertHls(r == null ? void 0 : r.hls), l.sessionId = s, l.startedAt = K(a), (p = this.listener) == null || p.onRoomUpdate(le.RECORDING_STATE_UPDATED, l);
    }
  }, {
    key: "onRTMPStart",
    value: function onRTMPStart(e) {
      var t;
      this.setRTMPStatus(!((t = e.error) == null ? void 0 : t.code), e);
    }
  }, {
    key: "onRTMPStop",
    value: function onRTMPStop(e) {
      this.setRTMPStatus(!1, e);
    }
  }, {
    key: "onRecordingStart",
    value: function onRecordingStart(e) {
      var t;
      this.setRecordingStatus(!((t = e.error) == null ? void 0 : t.code), e);
    }
  }, {
    key: "onRecordingStop",
    value: function onRecordingStop(e) {
      this.setRecordingStatus(!1, e);
    }
  }, {
    key: "onHLS",
    value: function onHLS(e, t) {
      var r, s;
      if (![A.HLS_START, A.HLS_STOP].includes(e)) return;
      var i = this.store.getRoom();
      if (!i) {
        o.w(this.TAG, "on hls - room not present");
        return;
      }
      t.enabled = e === A.HLS_START && !((r = t.error) == null ? void 0 : r.code), i.hls = this.convertHls(t), i.recording.hls = this.getHLSRecording(t), (s = this.listener) == null || s.onRoomUpdate(le.HLS_STREAMING_STATE_UPDATED, i);
    }
  }, {
    key: "convertHls",
    value: function convertHls(e) {
      var i;
      var t = {
        running: !!(e == null ? void 0 : e.enabled),
        variants: [],
        error: this.toSdkError(e == null ? void 0 : e.error)
      };
      return (i = e == null ? void 0 : e.variants) == null || i.forEach(function (r) {
        t.variants.push({
          meetingURL: r.meeting_url,
          url: r.url,
          metadata: r.metadata,
          startedAt: K(r.started_at)
        });
      }), t;
    }
  }, {
    key: "getHLSRecording",
    value: function getHLSRecording(e) {
      var i, r, s;
      var t = {
        running: !1
      };
      return (e == null ? void 0 : e.hls_recording) && (t = {
        running: !!(e == null ? void 0 : e.enabled),
        singleFilePerLayer: !!((i = e.hls_recording) == null ? void 0 : i.single_file_per_layer),
        hlsVod: !!((r = e.hls_recording) == null ? void 0 : r.hls_vod),
        startedAt: K((s = e == null ? void 0 : e.variants) == null ? void 0 : s[0].started_at),
        error: this.toSdkError(e.error)
      }), t;
    }
  }, {
    key: "getPeerListHLSRecording",
    value: function getPeerListHLSRecording(e) {
      var i, r;
      var t = e == null ? void 0 : e.hls;
      return {
        running: !!(t == null ? void 0 : t.enabled),
        startedAt: K(t == null ? void 0 : t.started_at),
        singleFilePerLayer: !!((i = t == null ? void 0 : t.config) == null ? void 0 : i.single_file_per_layer),
        hlsVod: !!((r = t == null ? void 0 : t.config) == null ? void 0 : r.hls_vod)
      };
    }
  }, {
    key: "setRecordingStatus",
    value: function setRecordingStatus(e, t) {
      var s;
      var i = this.store.getRoom();
      if (!i) {
        o.w(this.TAG, "set recording status running=".concat(e, " - room not present"));
        return;
      }
      var r;
      t.type === "sfu" ? (i.recording.server = {
        running: e,
        startedAt: e ? K(t.started_at) : void 0,
        error: this.toSdkError(t.error)
      }, r = le.SERVER_RECORDING_STATE_UPDATED) : (i.recording.browser = {
        running: e,
        startedAt: e ? K(t.started_at) : void 0,
        error: this.toSdkError(t.error)
      }, r = le.BROWSER_RECORDING_STATE_UPDATED), (s = this.listener) == null || s.onRoomUpdate(r, i);
    }
  }, {
    key: "setRTMPStatus",
    value: function setRTMPStatus(e, t) {
      var r;
      var i = this.store.getRoom();
      if (!i) {
        o.w(this.TAG, "on policy change - room not present");
        return;
      }
      i.rtmp = {
        running: e,
        startedAt: e ? K(t.started_at) : void 0,
        error: this.toSdkError(t.error)
      }, (r = this.listener) == null || r.onRoomUpdate(le.RTMP_STREAMING_STATE_UPDATED, i);
    }
  }, {
    key: "toSdkError",
    value: function toSdkError(e) {
      if (!(e == null ? void 0 : e.code)) return;
      var t = e.message || "error in streaming/recording",
        i = new T(e.code, "ServerErrors", m.NONE, t, t);
      return o.e(this.TAG, "error in streaming/recording", i), i;
    }
  }]);
  return Yt;
}();
var Xt = /*#__PURE__*/function () {
  function Xt(e, t) {
    _classCallCheck(this, Xt);
    this.store = e;
    this.listener = t;
  }
  _createClass(Xt, [{
    key: "handleNotification",
    value: function handleNotification(e, t) {
      e === A.METADATA_CHANGE && this.handleMetadataChange(t);
    }
  }, {
    key: "handleMetadataChange",
    value: function handleMetadataChange(e) {
      var _this57 = this;
      var i;
      var t = e.values.map(function (r) {
        return {
          key: r.key,
          value: r.data,
          updatedAt: K(r.updated_at),
          updatedBy: r.updated_by ? _this57.store.getPeerById(r.updated_by) : void 0
        };
      });
      (i = this.listener) == null || i.onSessionStoreUpdate(t);
    }
  }]);
  return Xt;
}();
var Zt = /*#__PURE__*/function () {
  function Zt(e, t, i) {
    var _this58 = this;
    _classCallCheck(this, Zt);
    this.store = e;
    this.eventBus = t;
    this.listener = i;
    this.TAG = "[TrackManager]";
    this.tracksToProcess = new Map();
    this.handleTrackAdd = function (e) {
      o.d(_this58.TAG, "ONTRACKADD", "".concat(e)), _this58.store.addTrack(e), _this58.tracksToProcess.set(e.trackId, e), _this58.processPendingTracks();
    };
    this.handleTrackRemove = function (e) {
      var s;
      o.d(_this58.TAG, "ONTRACKREMOVE", "".concat(e));
      var t = _this58.store.getTrackState(e.trackId);
      if (!t) return;
      if (!_this58.store.hasTrack(e)) {
        o.d(_this58.TAG, "Track not found in store");
        return;
      }
      e.type === x.AUDIO && _this58.eventBus.audioTrackRemoved.publish(e), _this58.store.removeTrack(e);
      var r = _this58.store.getPeerById(t.peerId);
      !r || (_this58.removePeerTracks(r, e), (s = _this58.listener) == null || s.onTrackUpdate(N.TRACK_REMOVED, e, r));
    };
    this.handleTrackLayerUpdate = function (e) {
      for (var _t10 in e.tracks) {
        var _i11 = e.tracks[_t10],
          _r15 = _this58.store.getTrackById(_t10);
        !_r15 || !_this58.store.getPeerByTrackId(_t10) || _r15 instanceof X && _this58.setLayer(_r15, _i11);
      }
    };
    this.handleTrackUpdate = function (e) {
      var i, r;
      var t = _this58.store.getPeerById(e.peer.peer_id);
      if (!t) {
        o.d(_this58.TAG, "Track Update ignored - Peer not added to store");
        return;
      }
      for (var s in e.tracks) {
        var _a2 = Object.assign({}, (i = _this58.store.getTrackState(s)) == null ? void 0 : i.trackInfo),
          _d2 = e.tracks[s],
          l = _this58.store.getTrackById(s);
        if (_this58.store.setTrackState({
          peerId: e.peer.peer_id,
          trackInfo: S(S({}, _a2), _d2)
        }), !l || _this58.tracksToProcess.has(s)) _this58.processPendingTracks();else {
          l.setEnabled(!_d2.mute);
          var u = _this58.processTrackUpdate(l, _a2, _d2);
          u && ((r = _this58.listener) == null || r.onTrackUpdate(u, l, t));
        }
      }
    };
  }
  _createClass(Zt, [{
    key: "handleTrackMetadataAdd",
    value: function handleTrackMetadataAdd(e) {
      o.d(this.TAG, "TRACK_METADATA_ADD", JSON.stringify(e, null, 2));
      for (var _t11 in e.tracks) this.store.setTrackState({
        peerId: e.peer.peer_id,
        trackInfo: e.tracks[_t11]
      });
      this.processPendingTracks();
    }
  }, {
    key: "processPendingTracks",
    value: function processPendingTracks() {
      var _this59 = this;
      new Map(this.tracksToProcess).forEach(function (t) {
        var s;
        var i = _this59.store.getTrackState(t.trackId);
        if (!i) {
          o.d(_this59.TAG, "TrackState not added to store", "peerId - ".concat(t.peerId), "trackId -".concat(t.trackId));
          return;
        }
        var r = _this59.store.getPeerById(i.peerId);
        if (!r) {
          o.d(_this59.TAG, "Peer not added to store, peerId", i.peerId);
          return;
        }
        t.source = i.trackInfo.source, t.peerId = r.peerId, t.logIdentifier = r.name, t.setEnabled(!i.trackInfo.mute), _this59.addAudioTrack(r, t), _this59.addVideoTrack(r, t), t.type === x.AUDIO ? _this59.eventBus.audioTrackAdded.publish({
          track: t,
          peer: r
        }) : (s = _this59.listener) == null || s.onTrackUpdate(N.TRACK_ADDED, t, r), _this59.tracksToProcess.delete(t.trackId);
      });
    }
  }, {
    key: "setLayer",
    value: function setLayer(e, t) {
      var s, a;
      var i = this.store.getPeerByTrackId(e.trackId);
      if (!i) return;
      e.setLayerFromServer(t) ? (s = this.listener) == null || s.onTrackUpdate(N.TRACK_DEGRADED, e, i) : (a = this.listener) == null || a.onTrackUpdate(N.TRACK_RESTORED, e, i);
    }
  }, {
    key: "removePeerTracks",
    value: function removePeerTracks(e, t) {
      var i = e.auxiliaryTracks.indexOf(t);
      i > -1 ? (e.auxiliaryTracks.splice(i, 1), o.d(this.TAG, "auxiliary track removed", "".concat(t))) : t.type === x.AUDIO && e.audioTrack === t ? (e.audioTrack = void 0, o.d(this.TAG, "audio track removed", "".concat(t))) : t.type === x.VIDEO && e.videoTrack === t && (e.videoTrack = void 0, o.d(this.TAG, "video track removed", "".concat(t)));
    }
  }, {
    key: "addAudioTrack",
    value: function addAudioTrack(e, t) {
      var i;
      t.type === x.AUDIO && (t.source === "regular" && (!e.audioTrack || ((i = e.audioTrack) == null ? void 0 : i.trackId) === t.trackId) ? e.audioTrack = t : e.auxiliaryTracks.push(t), o.d(this.TAG, "audio track added", "".concat(t)));
    }
  }, {
    key: "addVideoTrack",
    value: function addVideoTrack(e, t) {
      var s;
      if (t.type !== x.VIDEO) return;
      var i = t,
        r = this.store.getSimulcastDefinitionsForPeer(e, i.source);
      i.setSimulcastDefinitons(r), t.source === "regular" && (!e.videoTrack || ((s = e.videoTrack) == null ? void 0 : s.trackId) === t.trackId) ? e.videoTrack = i : e.auxiliaryTracks.push(i), o.d(this.TAG, "video track added", "".concat(t));
    }
  }, {
    key: "processTrackUpdate",
    value: function processTrackUpdate(e, t, i) {
      var r;
      return t.mute !== i.mute ? (r = i.mute ? N.TRACK_MUTED : N.TRACK_UNMUTED, e.type === x.AUDIO && this.eventBus.audioTrackUpdate.publish({
        track: e,
        enabled: !i.mute
      })) : t.description !== i.description && (r = N.TRACK_DESCRIPTION_CHANGED), r;
    }
  }]);
  return Zt;
}();
var mt = /*#__PURE__*/function () {
  function mt(e, t, i, r, s) {
    var _this60 = this;
    _classCallCheck(this, mt);
    this.store = e;
    this.listener = i;
    this.audioListener = r;
    this.connectionQualityListener = s;
    this.TAG = "[HMSNotificationManager]";
    this.hasConsistentRoomStateArrived = !1;
    this.ignoreNotification = function (e) {
      if (e === A.PEER_LIST) _this60.hasConsistentRoomStateArrived = !0;else if (e === A.ROOM_STATE) return _this60.hasConsistentRoomStateArrived;
      return !1;
    };
    this.handleTrackAdd = function (e) {
      _this60.trackManager.handleTrackAdd(e);
    };
    this.handleTrackRemove = function (e) {
      _this60.trackManager.handleTrackRemove(e);
    };
    this.updateLocalPeer = function (_ref18) {
      var e = _ref18.name,
        t = _ref18.metadata;
      var i = _this60.store.getLocalPeer();
      _this60.peerManager.handlePeerInfoUpdate({
        peer: i,
        name: e,
        data: t
      });
    };
    this.trackManager = new Zt(this.store, t, this.listener), this.peerManager = new Jt(this.store, this.trackManager, this.listener), this.peerListManager = new jt(this.store, this.peerManager, this.trackManager, this.listener), this.broadcastManager = new Kt(this.store, this.listener), this.policyChangeManager = new zt(this.store, t), this.requestManager = new Qt(this.store, this.listener), this.activeSpeakerManager = new Wt(this.store, this.listener, this.audioListener), this.connectionQualityManager = new qt(this.connectionQualityListener), this.roomUpdateManager = new Yt(this.store, this.listener), this.sessionMetadataManager = new Xt(this.store, this.listener);
  }
  _createClass(mt, [{
    key: "setListener",
    value: function setListener(e) {
      this.listener = e, this.trackManager.listener = e, this.peerManager.listener = e, this.peerListManager.listener = e, this.broadcastManager.listener = e, this.requestManager.listener = e, this.activeSpeakerManager.listener = e, this.roomUpdateManager.listener = e, this.sessionMetadataManager.listener = e;
    }
  }, {
    key: "setAudioListener",
    value: function setAudioListener(e) {
      this.audioListener = e, this.activeSpeakerManager.audioListener = e;
    }
  }, {
    key: "setConnectionQualityListener",
    value: function setConnectionQualityListener(e) {
      this.connectionQualityListener = e, this.connectionQualityManager.listener = e;
    }
  }, {
    key: "handleNotification",
    value: function handleNotification(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      var s, a;
      var i = e.method,
        r = e.params;
      [A.ACTIVE_SPEAKERS, A.SFU_STATS, A.CONNECTION_QUALITY, void 0].includes(i) || o.d(this.TAG, "Received notification - ".concat(i), {
        notification: r
      }), i === A.SFU_STATS && ((s = window.HMS) == null ? void 0 : s.ON_SFU_STATS) && typeof ((a = window.HMS) == null ? void 0 : a.ON_SFU_STATS) == "function" && window.HMS.ON_SFU_STATS(e.params), !this.ignoreNotification(i) && (this.roomUpdateManager.handleNotification(i, r), this.peerManager.handleNotification(i, r), this.requestManager.handleNotification(i, r), this.peerListManager.handleNotification(i, r, t), this.broadcastManager.handleNotification(i, r), this.sessionMetadataManager.handleNotification(i, r), this.handleIsolatedMethods(i, r));
    }
  }, {
    key: "handleIsolatedMethods",
    value: function handleIsolatedMethods(e, t) {
      switch (e) {
        case A.TRACK_METADATA_ADD:
          {
            this.trackManager.handleTrackMetadataAdd(t);
            break;
          }
        case A.TRACK_UPDATE:
          {
            this.trackManager.handleTrackUpdate(t);
            break;
          }
        case A.ON_SFU_TRACK_LAYER_UPDATE:
          {
            this.trackManager.handleTrackLayerUpdate(t);
            break;
          }
        case A.ACTIVE_SPEAKERS:
          this.activeSpeakerManager.handleActiveSpeakers(t);
          break;
        case A.CONNECTION_QUALITY:
          this.connectionQualityManager.handleQualityUpdate(t);
          break;
        case A.POLICY_CHANGE:
          this.policyChangeManager.handlePolicyChange(t);
          break;
        default:
          break;
      }
    }
  }]);
  return mt;
}();
var gt = /*#__PURE__*/_createClass(function gt(e) {
  _classCallCheck(this, gt);
  this.type = e.type, this.source = e.source || "regular", this.description = "", e instanceof Te ? (this.mute = !e.enabled, this.track_id = e.publishedTrackId, this.stream_id = e.stream.id) : (this.mute = e.mute, this.track_id = e.track_id, this.stream_id = e.stream_id);
});
var Ke = /*#__PURE__*/function () {
  function Ke(e) {
    _classCallCheck(this, Ke);
    this.TAG = "[AudioContextManager]";
    this.audioContext = new AudioContext(), this.source = this.audioContext.createMediaElementSource(e), this.source.connect(this.audioContext.destination);
  }
  _createClass(Ke, [{
    key: "resumeContext",
    value: function resumeContext() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee128() {
        return _regeneratorRuntime().wrap(function _callee128$(_context129) {
          while (1) switch (_context129.prev = _context129.next) {
            case 0:
              _context129.t0 = this.audioContext.state === "suspended";
              if (!_context129.t0) {
                _context129.next = 5;
                break;
              }
              _context129.next = 4;
              return this.audioContext.resume();
            case 4:
              o.d(this.TAG, "AudioContext is resumed");
            case 5:
            case "end":
              return _context129.stop();
          }
        }, _callee128, this);
      }));
    }
  }, {
    key: "getAudioTrack",
    value: function getAudioTrack() {
      return this.destinationNode && this.source.disconnect(this.destinationNode), this.destinationNode = this.audioContext.createMediaStreamDestination(), this.source.connect(this.destinationNode), this.destinationNode.stream.getAudioTracks()[0];
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      var _this61 = this;
      this.audioContext.state !== "closed" && this.audioContext.close().catch(function (e) {
        o.d(_this61.TAG, "AudioContext close error", e.message);
      });
    }
  }]);
  return Ke;
}();
var Me = /*#__PURE__*/function (_Ur) {
  _inherits(Me, _Ur);
  var _super12 = _createSuper(Me);
  function Me() {
    _classCallCheck(this, Me);
    return _super12.apply(this, arguments);
  }
  _createClass(Me, [{
    key: "on",
    value: function on(e, t) {
      return _get(_getPrototypeOf(Me.prototype), "on", this).call(this, e, t);
    }
  }, {
    key: "off",
    value: function off(e, t) {
      return _get(_getPrototypeOf(Me.prototype), "off", this).call(this, e, t);
    }
  }, {
    key: "emit",
    value: function emit(e, t) {
      return _get(_getPrototypeOf(Me.prototype), "emit", this).call(this, e, t);
    }
  }, {
    key: "listeners",
    value: function listeners(e) {
      return _get(_getPrototypeOf(Me.prototype), "listeners", this).call(this, e);
    }
  }]);
  return Me;
}(_eventemitter.EventEmitter2);
var ei = /*#__PURE__*/function (_Me) {
  _inherits(ei, _Me);
  var _super13 = _createSuper(ei);
  function ei() {
    var _this62;
    _classCallCheck(this, ei);
    _this62 = _super13.apply(this, arguments);
    _this62.audioElement = null;
    _this62.TAG = "[PlaylistAudioManager]";
    _this62.seeked = !1;
    return _this62;
  }
  _createClass(ei, [{
    key: "play",
    value: function play(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee130() {
        var _this63 = this;
        return _regeneratorRuntime().wrap(function _callee130$(_context131) {
          while (1) switch (_context131.prev = _context131.next) {
            case 0:
              return _context131.abrupt("return", (this.audioElement = this.getAudioElement(), new Promise(function (t, i) {
                _this63.audioElement = _this63.getAudioElement(), _this63.audioElement.src = e, _this63.seeked = !1, _this63.audioElement.onerror = function () {
                  var r = "Error loading ".concat(e);
                  o.e(_this63.TAG, r), _this63.stop(), i(r);
                }, _this63.audioElement.oncanplaythrough = function () {
                  return c(_this63, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee129() {
                    var _r16;
                    return _regeneratorRuntime().wrap(function _callee129$(_context130) {
                      while (1) switch (_context130.prev = _context130.next) {
                        case 0:
                          _context130.prev = 0;
                          if (this.audioElement) {
                            _context130.next = 3;
                            break;
                          }
                          return _context130.abrupt("return");
                        case 3:
                          if (!(this.audioContextManager.resumeContext(), this.track)) {
                            _context130.next = 13;
                            break;
                          }
                          if (!this.seeked) {
                            _context130.next = 8;
                            break;
                          }
                          this.seeked = !1;
                          _context130.next = 11;
                          break;
                        case 8:
                          _context130.next = 10;
                          return this.audioElement.play();
                        case 10:
                          t([this.track]);
                        case 11:
                          _context130.next = 17;
                          break;
                        case 13:
                          _context130.next = 15;
                          return this.audioElement.play();
                        case 15:
                          _r16 = this.audioContextManager.getAudioTrack();
                          this.track = _r16, t([_r16]);
                        case 17:
                          _context130.next = 22;
                          break;
                        case 19:
                          _context130.prev = 19;
                          _context130.t0 = _context130["catch"](0);
                          o.e(this.TAG, "Error playing audio", e, _context130.t0.message), i(_context130.t0);
                        case 22:
                        case "end":
                          return _context130.stop();
                      }
                    }, _callee129, this, [[0, 19]]);
                  }));
                }, _this63.audioElement.onseeked = function () {
                  _this63.seeked = !0;
                };
              })));
            case 1:
            case "end":
              return _context131.stop();
          }
        }, _callee130, this);
      }));
    }
  }, {
    key: "getTracks",
    value: function getTracks() {
      return this.track ? [this.track.id] : [];
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this.audioElement;
    }
  }, {
    key: "stop",
    value: function stop() {
      var e, t, i;
      (e = this.audioElement) == null || e.pause(), (t = this.audioElement) == null || t.removeAttribute("src"), this.audioElement = null, (i = this.audioContextManager) == null || i.cleanup(), this.track = void 0;
    }
  }, {
    key: "getAudioElement",
    value: function getAudioElement() {
      var _this64 = this;
      if (this.audioElement) return this.audioElement;
      var e = document.createElement("audio");
      return e.crossOrigin = "anonymous", e.addEventListener("timeupdate", function (t) {
        return _this64.emit("progress", t);
      }), e.addEventListener("ended", function () {
        _this64.emit("ended", null);
      }), this.audioContextManager = new Ke(e), e;
    }
  }]);
  return ei;
}(Me);
var ti = /*#__PURE__*/function (_Me2) {
  _inherits(ti, _Me2);
  var _super14 = _createSuper(ti);
  function ti() {
    var _this65;
    _classCallCheck(this, ti);
    _this65 = _super14.apply(this, arguments);
    _this65.TAG = "[PlaylistVideoManager]";
    _this65.videoElement = null;
    _this65.canvasContext = null;
    _this65.tracks = [];
    _this65.DEFAUL_FPS = 24;
    _this65.seeked = !1;
    _this65.drawImage = function () {
      var e, t, i;
      _this65.videoElement && !_this65.videoElement.paused && !_this65.videoElement.ended && ((i = _this65.canvasContext) == null || i.drawImage(_this65.videoElement, 0, 0, (e = _this65.canvas) == null ? void 0 : e.width, (t = _this65.canvas) == null ? void 0 : t.height), _this65.timer = setTimeout(function () {
        _this65.drawImage();
      }, 1e3 / _this65.DEFAUL_FPS));
    };
    return _this65;
  }
  _createClass(ti, [{
    key: "play",
    value: function play(e) {
      var _this66 = this;
      return this.videoElement = this.getVideoElement(), this.createCanvas(), new Promise(function (t, i) {
        _this66.videoElement = _this66.getVideoElement(), _this66.videoElement.src = e, _this66.seeked = !1, _this66.videoElement.onerror = function () {
          var r = "Error loading ".concat(e);
          o.e(_this66.TAG, r), _this66.stop(), i(r);
        }, _this66.videoElement.oncanplaythrough = function () {
          return c(_this66, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee131() {
            var _this67 = this;
            var r, s, a, _d3, l;
            return _regeneratorRuntime().wrap(function _callee131$(_context132) {
              while (1) switch (_context132.prev = _context132.next) {
                case 0:
                  _context132.prev = 0;
                  if (this.videoElement) {
                    _context132.next = 3;
                    break;
                  }
                  return _context132.abrupt("return");
                case 3:
                  if (!(this.canvas.width = this.videoElement.videoWidth, this.canvas.height = this.videoElement.videoHeight, this.tracks.length === 0)) {
                    _context132.next = 18;
                    break;
                  }
                  this.clearCanvasAndTracks();
                  _d3 = this.canvas.captureStream();
                  if (_d3) {
                    _context132.next = 9;
                    break;
                  }
                  o.e(this.TAG, "Browser does not support captureStream");
                  return _context132.abrupt("return");
                case 9:
                  this.videoElement.onplay = this.drawImage;
                  _context132.next = 12;
                  return this.audioContextManager.resumeContext();
                case 12:
                  _context132.next = 14;
                  return this.videoElement.play();
                case 14:
                  l = this.audioContextManager.getAudioTrack();
                  _d3.addTrack(l), _d3.getTracks().forEach(function (u) {
                    _this67.tracks.push(u);
                  }), t(this.tracks);
                  _context132.next = 25;
                  break;
                case 18:
                  if (!this.seeked) {
                    _context132.next = 22;
                    break;
                  }
                  this.seeked = !1, (a = this.canvasContext) == null || a.drawImage(this.videoElement, 0, 0, (r = this.canvas) == null ? void 0 : r.width, (s = this.canvas) == null ? void 0 : s.height);
                  _context132.next = 25;
                  break;
                case 22:
                  _context132.next = 24;
                  return this.videoElement.play();
                case 24:
                  t(this.tracks);
                case 25:
                  _context132.next = 30;
                  break;
                case 27:
                  _context132.prev = 27;
                  _context132.t0 = _context132["catch"](0);
                  o.e(this.TAG, "Error playing video", e, _context132.t0.message), i(_context132.t0);
                case 30:
                case "end":
                  return _context132.stop();
              }
            }, _callee131, this, [[0, 27]]);
          }));
        }, _this66.videoElement.onseeked = function () {
          _this66.seeked = !0;
        };
      });
    }
  }, {
    key: "getTracks",
    value: function getTracks() {
      return this.tracks.map(function (e) {
        return e.id;
      });
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this.videoElement;
    }
  }, {
    key: "stop",
    value: function stop() {
      var e, t, i;
      (e = this.videoElement) == null || e.pause(), (t = this.videoElement) == null || t.removeAttribute("src"), this.videoElement = null, (i = this.audioContextManager) == null || i.cleanup(), this.clearCanvasAndTracks();
    }
  }, {
    key: "clearCanvasAndTracks",
    value: function clearCanvasAndTracks() {
      var e;
      this.tracks = [], (e = this.canvasContext) == null || e.clearRect(0, 0, this.canvas.width, this.canvas.height), clearTimeout(this.timer);
    }
  }, {
    key: "getVideoElement",
    value: function getVideoElement() {
      var _this68 = this;
      if (this.videoElement) return this.videoElement;
      var e = document.createElement("video");
      return e.crossOrigin = "anonymous", e.addEventListener("timeupdate", function (t) {
        return _this68.emit("progress", t);
      }), e.addEventListener("ended", function () {
        _this68.emit("ended", null);
      }), this.audioContextManager = new Ke(e), e;
    }
  }, {
    key: "createCanvas",
    value: function createCanvas() {
      this.canvas || (this.canvas = document.createElement("canvas"), this.canvasContext = this.canvas.getContext("2d"));
    }
  }]);
  return ti;
}(Me);
var vt = {
    audio: {
      list: [],
      currentIndex: -1,
      isAutoplayOn: !0
    },
    video: {
      list: [],
      currentIndex: -1,
      isAutoplayOn: !0
    }
  },
  St = /*#__PURE__*/function (_Me3) {
    _inherits(St, _Me3);
    var _super15 = _createSuper(St);
    function St(e, t) {
      var _this69;
      _classCallCheck(this, St);
      _this69 = _super15.call(this);
      _this69.sdk = e;
      _this69.eventBus = t;
      _this69.state = {
        audio: S({}, vt.audio),
        video: S({}, vt.video)
      };
      _this69.TAG = "[PlaylistManager]";
      _this69.handlePausePlaylist = function (i) {
        return c(_assertThisInitialized(_this69), [i], function (_ref19) {
          var _this70 = this;
          var e = _ref19.enabled,
            t = _ref19.track;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee132() {
            var s, r;
            return _regeneratorRuntime().wrap(function _callee132$(_context133) {
              while (1) switch (_context133.prev = _context133.next) {
                case 0:
                  if (!e) {
                    _context133.next = 2;
                    break;
                  }
                  return _context133.abrupt("return");
                case 2:
                  t.source === "audioplaylist" && (r = I.audio), t.source === "videoplaylist" && (r = I.video), !!r && ((s = _this70.getElement(r)) == null || s.pause());
                case 3:
                case "end":
                  return _context133.stop();
              }
            }, _callee132);
          })();
        });
      };
      _this69.addTrack = function (e, t) {
        return c(_assertThisInitialized(_this69), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee133() {
          return _regeneratorRuntime().wrap(function _callee133$(_context134) {
            while (1) switch (_context134.prev = _context134.next) {
              case 0:
                _context134.next = 2;
                return this.sdk.addTrack(e, t);
              case 2:
                o.d(this.TAG, "Playlist track added", ue(e));
              case 3:
              case "end":
                return _context134.stop();
            }
          }, _callee133, this);
        }));
      };
      _this69.removeTrack = function (e) {
        return c(_assertThisInitialized(_this69), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee134() {
          return _regeneratorRuntime().wrap(function _callee134$(_context135) {
            while (1) switch (_context135.prev = _context135.next) {
              case 0:
                _context135.next = 2;
                return this.sdk.removeTrack(e, !0);
              case 2:
                o.d(this.TAG, "Playlist track removed", e);
              case 3:
              case "end":
                return _context135.stop();
            }
          }, _callee134, this);
        }));
      };
      _this69.audioManager = new ei(), _this69.videoManager = new ti(), _this69.addListeners();
      return _this69;
    }
    _createClass(St, [{
      key: "getList",
      value: function getList() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        return this.state[e].list;
      }
    }, {
      key: "setList",
      value: function setList(e) {
        var _this71 = this;
        if (!e || e.length === 0) {
          o.w(this.TAG, "Please pass in a list of HMSPlaylistItem's");
          return;
        }
        e.forEach(function (t) {
          _this71.state[t.type].list.includes(t) || _this71.state[t.type].list.push(t);
        });
      }
    }, {
      key: "clearList",
      value: function clearList(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee135() {
          return _regeneratorRuntime().wrap(function _callee135$(_context136) {
            while (1) switch (_context136.prev = _context136.next) {
              case 0:
                _context136.t0 = this.isPlaying(e);
                if (!_context136.t0) {
                  _context136.next = 4;
                  break;
                }
                _context136.next = 4;
                return this.stop(e);
              case 4:
                this.state[e].list = [];
              case 5:
              case "end":
                return _context136.stop();
            }
          }, _callee135, this);
        }));
      }
    }, {
      key: "removeItem",
      value: function removeItem(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee136() {
          var _this$state$t, i, r, s;
          return _regeneratorRuntime().wrap(function _callee136$(_context137) {
            while (1) switch (_context137.prev = _context137.next) {
              case 0:
                _this$state$t = this.state[t], i = _this$state$t.list, r = _this$state$t.currentIndex, s = i.findIndex(function (a) {
                  return e === a.id;
                });
                if (!(s > -1)) {
                  _context137.next = 10;
                  break;
                }
                _context137.t1 = r === s && this.isPlaying(t);
                if (!_context137.t1) {
                  _context137.next = 6;
                  break;
                }
                _context137.next = 6;
                return this.stop(t);
              case 6:
                i.splice(s, 1);
                _context137.t0 = !0;
                _context137.next = 11;
                break;
              case 10:
                _context137.t0 = !1;
              case 11:
                return _context137.abrupt("return", _context137.t0);
              case 12:
              case "end":
                return _context137.stop();
            }
          }, _callee136, this);
        }));
      }
    }, {
      key: "seek",
      value: function seek(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : I.audio;
        var i = this.state[t].currentIndex;
        if (i === -1) throw g.PlaylistErrors.NoEntryToPlay(m.PLAYLIST, "No item is currently playing");
        var r = this.getElement(t);
        if (r) {
          var s = Math.max(r.currentTime + e, 0);
          r.currentTime = Math.min(s, r.duration);
        }
      }
    }, {
      key: "seekTo",
      value: function seekTo(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : I.audio;
        var i = this.state[t].currentIndex;
        if (i === -1) throw g.PlaylistErrors.NoEntryToPlay(m.PLAYLIST, "No item is currently playing");
        if (e < 0) throw Error("value cannot be negative");
        var r = this.getElement(t);
        r && (r.currentTime = Math.min(e, r.duration));
      }
    }, {
      key: "setVolume",
      value: function setVolume(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : I.audio;
        if (e < 0 || e > 100) throw Error("Please pass a valid number between 0-100");
        var i = this.getElement(t);
        i && (i.volume = e * .01);
      }
    }, {
      key: "getVolume",
      value: function getVolume() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = this.getElement(e);
        return t ? t.volume * 100 : 0;
      }
    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = this.getElement(e);
        return (t == null ? void 0 : t.currentTime) || 0;
      }
    }, {
      key: "getCurrentIndex",
      value: function getCurrentIndex() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        return this.state[e].currentIndex;
      }
    }, {
      key: "getCurrentProgress",
      value: function getCurrentProgress() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var a;
        var _this$state$e = this.state[e],
          t = _this$state$e.list,
          i = _this$state$e.currentIndex,
          r = (a = t[i]) == null ? void 0 : a.url,
          s = this.getElement(e);
        return !r || !s ? 0 : Math.floor(100 * (s.currentTime / s.duration));
      }
    }, {
      key: "getCurrentSelection",
      value: function getCurrentSelection() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var _this$state$e2 = this.state[e],
          t = _this$state$e2.list,
          i = _this$state$e2.currentIndex;
        if (i !== -1) return t[i];
      }
    }, {
      key: "isPlaying",
      value: function isPlaying() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = this.getElement(e);
        return !!t && !t.paused;
      }
    }, {
      key: "setIsAutoplayOn",
      value: function setIsAutoplayOn() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = arguments.length > 1 ? arguments[1] : undefined;
        this.state[e].isAutoplayOn = t;
      }
    }, {
      key: "getPlaybackRate",
      value: function getPlaybackRate() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = this.getElement(e);
        return t ? t.playbackRate : 1;
      }
    }, {
      key: "setPlaybackRate",
      value: function setPlaybackRate() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = arguments.length > 1 ? arguments[1] : undefined;
        if (t < .25 || t > 2) throw Error("Please pass a value between 0.25 and 2.0");
        var i = this.getElement(e);
        i && (i.playbackRate = t);
      }
    }, {
      key: "setEnabled",
      value: function setEnabled(r, s) {
        return c(this, arguments, function (e, _ref20) {
          var _this72 = this;
          var t = _ref20.id,
            _ref20$type = _ref20.type,
            i = _ref20$type === void 0 ? I.audio : _ref20$type;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee137() {
            var d, l;
            return _regeneratorRuntime().wrap(function _callee137$(_context138) {
              while (1) switch (_context138.prev = _context138.next) {
                case 0:
                  d = _this72.state[i].list.findIndex(function (u) {
                    return u.id === t;
                  });
                  if (!(!t || d === -1)) {
                    _context138.next = 4;
                    break;
                  }
                  o.w(_this72.TAG, "Pass a valid id");
                  return _context138.abrupt("return");
                case 4:
                  l = _this72.state[i].list[d].url;
                  if (!e) {
                    _context138.next = 10;
                    break;
                  }
                  _context138.next = 8;
                  return _this72.play(l, i);
                case 8:
                  _context138.next = 12;
                  break;
                case 10:
                  _context138.next = 12;
                  return _this72.pause(l, i);
                case 12:
                  _this72.state[i].currentIndex = d;
                  _this72.setDuration(i);
                case 14:
                case "end":
                  return _context138.stop();
              }
            }, _callee137);
          })();
        });
      }
    }, {
      key: "playNext",
      value: function playNext() {
        return c(this, arguments, function () {
          var _this73 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee138() {
            var _this73$state$e, t, i;
            return _regeneratorRuntime().wrap(function _callee138$(_context139) {
              while (1) switch (_context139.prev = _context139.next) {
                case 0:
                  _this73$state$e = _this73.state[e], t = _this73$state$e.list, i = _this73$state$e.currentIndex;
                  if (!(i >= t.length - 1)) {
                    _context139.next = 3;
                    break;
                  }
                  throw g.PlaylistErrors.NoEntryToPlay(m.PLAYLIST, "Reached end of playlist");
                case 3:
                  _context139.next = 5;
                  return _this73.play(t[i + 1].url, e);
                case 5:
                  _this73.state[e].currentIndex = i + 1;
                  _this73.setDuration(e);
                case 7:
                case "end":
                  return _context139.stop();
              }
            }, _callee138);
          })();
        });
      }
    }, {
      key: "playPrevious",
      value: function playPrevious() {
        return c(this, arguments, function () {
          var _this74 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee139() {
            var _this74$state$e, t, i;
            return _regeneratorRuntime().wrap(function _callee139$(_context140) {
              while (1) switch (_context140.prev = _context140.next) {
                case 0:
                  _this74$state$e = _this74.state[e], t = _this74$state$e.list, i = _this74$state$e.currentIndex;
                  if (!(i <= 0)) {
                    _context140.next = 3;
                    break;
                  }
                  throw g.PlaylistErrors.NoEntryToPlay(m.PLAYLIST, "Reached start of playlist");
                case 3:
                  _context140.next = 5;
                  return _this74.play(t[i - 1].url, e);
                case 5:
                  _this74.state[e].currentIndex = i - 1;
                  _this74.setDuration(e);
                case 7:
                case "end":
                  return _context140.stop();
              }
            }, _callee139);
          })();
        });
      }
    }, {
      key: "stop",
      value: function stop() {
        return c(this, arguments, function () {
          var _this75 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee140() {
            var i, t;
            return _regeneratorRuntime().wrap(function _callee140$(_context141) {
              while (1) switch (_context141.prev = _context141.next) {
                case 0:
                  t = e === I.audio ? _this75.audioManager : _this75.videoManager;
                  (i = t.getElement()) == null || i.pause();
                  _context141.next = 4;
                  return _this75.removeTracks(e);
                case 4:
                  t.stop();
                  _this75.state[e].currentIndex = -1;
                case 6:
                case "end":
                  return _context141.stop();
              }
            }, _callee140);
          })();
        });
      }
    }, {
      key: "cleanup",
      value: function cleanup() {
        this.state = {
          audio: S({}, vt.audio),
          video: S({}, vt.video)
        }, this.eventBus.localAudioEnabled.unsubscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.unsubscribe(this.handlePausePlaylist), this.audioManager.stop(), this.videoManager.stop();
      }
    }, {
      key: "onProgress",
      value: function onProgress(e) {
        var _this76 = this;
        this.videoManager.on("progress", function () {
          try {
            e({
              type: I.video,
              progress: _this76.getCurrentProgress(I.video)
            });
          } catch (t) {
            o.e(_this76.TAG, "Error in onProgress callback");
          }
        }), this.audioManager.on("progress", function () {
          try {
            e({
              type: I.audio,
              progress: _this76.getCurrentProgress(I.audio)
            });
          } catch (t) {
            o.e(_this76.TAG, "Error in onProgress callback");
          }
        });
      }
    }, {
      key: "onNewTrackStart",
      value: function onNewTrackStart(e) {
        this.on("newTrackStart", e);
      }
    }, {
      key: "onPlaylistEnded",
      value: function onPlaylistEnded(e) {
        this.on("playlistEnded", e);
      }
    }, {
      key: "onCurrentTrackEnded",
      value: function onCurrentTrackEnded(e) {
        this.on("currentTrackEnded", e);
      }
    }, {
      key: "getElement",
      value: function getElement() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        return e === I.audio ? this.audioManager.getElement() : this.videoManager.getElement();
      }
    }, {
      key: "removeTracks",
      value: function removeTracks() {
        return c(this, arguments, function () {
          var _this77 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee141() {
            var i, _iterator17, _step17, _r17;
            return _regeneratorRuntime().wrap(function _callee141$(_context142) {
              while (1) switch (_context142.prev = _context142.next) {
                case 0:
                  i = (e === I.audio ? _this77.audioManager : _this77.videoManager).getTracks();
                  _iterator17 = _createForOfIteratorHelper(i);
                  _context142.prev = 2;
                  _iterator17.s();
                case 4:
                  if ((_step17 = _iterator17.n()).done) {
                    _context142.next = 10;
                    break;
                  }
                  _r17 = _step17.value;
                  _context142.next = 8;
                  return _this77.removeTrack(_r17);
                case 8:
                  _context142.next = 4;
                  break;
                case 10:
                  _context142.next = 15;
                  break;
                case 12:
                  _context142.prev = 12;
                  _context142.t0 = _context142["catch"](2);
                  _iterator17.e(_context142.t0);
                case 15:
                  _context142.prev = 15;
                  _iterator17.f();
                  return _context142.finish(15);
                case 18:
                case "end":
                  return _context142.stop();
              }
            }, _callee141, null, [[2, 12, 15, 18]]);
          })();
        });
      }
    }, {
      key: "play",
      value: function play(i) {
        return c(this, arguments, function (e) {
          var _this78 = this;
          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee142() {
            var r, s, _a3, _iterator18, _step18, _d4;
            return _regeneratorRuntime().wrap(function _callee142$(_context143) {
              while (1) switch (_context143.prev = _context143.next) {
                case 0:
                  r = t === I.audio ? _this78.audioManager : _this78.videoManager, s = r.getElement();
                  if (!_this78.isItemCurrentlyPlaying(e, t)) {
                    _context143.next = 4;
                    break;
                  }
                  o.w(_this78.TAG, "The ".concat(t, " is currently playing"));
                  return _context143.abrupt("return");
                case 4:
                  if (!(s == null ? void 0 : s.src.includes(e))) {
                    _context143.next = 9;
                    break;
                  }
                  _context143.next = 7;
                  return s.play();
                case 7:
                  _context143.next = 30;
                  break;
                case 9:
                  s == null || s.pause();
                  _context143.next = 12;
                  return r.play(e);
                case 12:
                  _a3 = _context143.sent;
                  _iterator18 = _createForOfIteratorHelper(_a3);
                  _context143.prev = 14;
                  _iterator18.s();
                case 16:
                  if ((_step18 = _iterator18.n()).done) {
                    _context143.next = 22;
                    break;
                  }
                  _d4 = _step18.value;
                  _context143.next = 20;
                  return _this78.addTrack(_d4, t === I.audio ? "audioplaylist" : "videoplaylist");
                case 20:
                  _context143.next = 16;
                  break;
                case 22:
                  _context143.next = 27;
                  break;
                case 24:
                  _context143.prev = 24;
                  _context143.t0 = _context143["catch"](14);
                  _iterator18.e(_context143.t0);
                case 27:
                  _context143.prev = 27;
                  _iterator18.f();
                  return _context143.finish(27);
                case 30:
                case "end":
                  return _context143.stop();
              }
            }, _callee142, null, [[14, 24, 27, 30]]);
          })();
        });
      }
    }, {
      key: "isItemCurrentlyPlaying",
      value: function isItemCurrentlyPlaying(e, t) {
        var i = this.getElement(t);
        return !!(i && !i.paused && i.src.includes(e));
      }
    }, {
      key: "setDuration",
      value: function setDuration() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
        var t = this.getElement(e),
          _this$state$e3 = this.state[e],
          i = _this$state$e3.list,
          r = _this$state$e3.currentIndex;
        i[r] && (i[r].duration = (t == null ? void 0 : t.duration) || 0), this.emit("newTrackStart", i[r]);
      }
    }, {
      key: "pause",
      value: function pause(i) {
        return c(this, arguments, function (e) {
          var _this79 = this;
          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee143() {
            var r;
            return _regeneratorRuntime().wrap(function _callee143$(_context144) {
              while (1) switch (_context144.prev = _context144.next) {
                case 0:
                  r = _this79.getElement(t);
                  r && !r.paused && r.src.includes(e) ? (r.pause(), o.d(_this79.TAG, "paused url", e)) : o.w(_this79.TAG, "The passed in url is not currently playing");
                case 2:
                case "end":
                  return _context144.stop();
              }
            }, _callee143);
          })();
        });
      }
    }, {
      key: "addListeners",
      value: function addListeners() {
        var _this80 = this;
        this.audioManager.on("ended", function () {
          return _this80.handleEnded(I.audio);
        }), this.videoManager.on("ended", function () {
          return _this80.handleEnded(I.video);
        }), this.eventBus.localAudioEnabled.subscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.subscribe(this.handlePausePlaylist);
      }
    }, {
      key: "handleEnded",
      value: function handleEnded() {
        return c(this, arguments, function () {
          var _this81 = this;
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : I.audio;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee144() {
            var _this81$state$e, t, i, r;
            return _regeneratorRuntime().wrap(function _callee144$(_context145) {
              while (1) switch (_context145.prev = _context145.next) {
                case 0:
                  _this81$state$e = _this81.state[e], t = _this81$state$e.list, i = _this81$state$e.currentIndex, r = _this81$state$e.isAutoplayOn;
                  if (!(i === t.length - 1)) {
                    _context145.next = 7;
                    break;
                  }
                  _context145.next = 4;
                  return _this81.stop(e);
                case 4:
                  _this81.emit("playlistEnded", e);
                  _context145.next = 13;
                  break;
                case 7:
                  if (!r) {
                    _context145.next = 11;
                    break;
                  }
                  _this81.playNext(e);
                  _context145.next = 13;
                  break;
                case 11:
                  _context145.next = 13;
                  return _this81.pause(t[i].url, e);
                case 13:
                  _this81.emit("currentTrackEnded", t[i]);
                case 14:
                case "end":
                  return _context145.stop();
              }
            }, _callee144);
          })();
        });
      }
    }]);
    return St;
  }(Me);
var ii = /*#__PURE__*/function () {
  function ii(e) {
    _classCallCheck(this, ii);
    this.transport = e;
    this.observedKeys = new Set();
  }
  _createClass(ii, [{
    key: "get",
    value: function get(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee145() {
        var _yield$this$transport, t, i;
        return _regeneratorRuntime().wrap(function _callee145$(_context146) {
          while (1) switch (_context146.prev = _context146.next) {
            case 0:
              _context146.next = 2;
              return this.transport.getSessionMetadata(e);
            case 2:
              _yield$this$transport = _context146.sent;
              t = _yield$this$transport.data;
              i = _yield$this$transport.updated_at;
              return _context146.abrupt("return", {
                value: t,
                updatedAt: K(i)
              });
            case 6:
            case "end":
              return _context146.stop();
          }
        }, _callee145, this);
      }));
    }
  }, {
    key: "set",
    value: function set(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee146() {
        var _yield$this$transport2, i, r, s;
        return _regeneratorRuntime().wrap(function _callee146$(_context147) {
          while (1) switch (_context147.prev = _context147.next) {
            case 0:
              _context147.next = 2;
              return this.transport.setSessionMetadata({
                key: e,
                data: t
              });
            case 2:
              _yield$this$transport2 = _context147.sent;
              i = _yield$this$transport2.data;
              r = _yield$this$transport2.updated_at;
              s = K(r);
              return _context147.abrupt("return", {
                value: i,
                updatedAt: s
              });
            case 7:
            case "end":
              return _context147.stop();
          }
        }, _callee146, this);
      }));
    }
  }, {
    key: "observe",
    value: function observe(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee147() {
        var _this82 = this;
        var t;
        return _regeneratorRuntime().wrap(function _callee147$(_context148) {
          while (1) switch (_context148.prev = _context148.next) {
            case 0:
              t = new Set(this.observedKeys);
              if (!(e.forEach(function (i) {
                return _this82.observedKeys.add(i);
              }), this.observedKeys.size !== t.size)) {
                _context148.next = 10;
                break;
              }
              _context148.prev = 2;
              _context148.next = 5;
              return this.transport.listenMetadataChange(Array.from(this.observedKeys));
            case 5:
              _context148.next = 10;
              break;
            case 7:
              _context148.prev = 7;
              _context148.t0 = _context148["catch"](2);
              throw this.observedKeys = t, _context148.t0;
            case 10:
            case "end":
              return _context148.stop();
          }
        }, _callee147, this, [[2, 7]]);
      }));
    }
  }, {
    key: "unobserve",
    value: function unobserve(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee148() {
        var t;
        return _regeneratorRuntime().wrap(function _callee148$(_context149) {
          while (1) switch (_context149.prev = _context149.next) {
            case 0:
              t = new Set(this.observedKeys);
              if (!(this.observedKeys = new Set(_toConsumableArray(this.observedKeys).filter(function (i) {
                return !e.includes(i);
              })), this.observedKeys.size !== t.size)) {
                _context149.next = 10;
                break;
              }
              _context149.prev = 2;
              _context149.next = 5;
              return this.transport.listenMetadataChange(Array.from(this.observedKeys));
            case 5:
              _context149.next = 10;
              break;
            case 7:
              _context149.prev = 7;
              _context149.t0 = _context149["catch"](2);
              throw this.observedKeys = t, _context149.t0;
            case 10:
            case "end":
              return _context149.stop();
          }
        }, _callee148, this, [[2, 7]]);
      }));
    }
  }]);
  return ii;
}();
var ri = /*#__PURE__*/_createClass(function ri(e, t) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "https://prod-init.100ms.live/init";
  var a = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;
  _classCallCheck(this, ri);
  this.authToken = e;
  this.peerId = t;
  this.peerName = i;
  this.data = r;
  this.endpoint = s;
  this.autoSubscribeVideo = a;
});
var R;
(function (s) {
  s[s.ConnectFailed = 0] = "ConnectFailed", s[s.SignalDisconnect = 1] = "SignalDisconnect", s[s.JoinWSMessageFailed = 2] = "JoinWSMessageFailed", s[s.PublishIceConnectionFailed = 3] = "PublishIceConnectionFailed", s[s.SubscribeIceConnectionFailed = 4] = "SubscribeIceConnectionFailed";
})(R || (R = {}));
var er = (_er = {}, _defineProperty(_er, 0, []), _defineProperty(_er, 1, []), _defineProperty(_er, 2, [1]), _defineProperty(_er, 3, [1]), _defineProperty(_er, 4, [1]), _er);
var L;
(function (d) {
  d.Disconnected = "Disconnected", d.Connecting = "Connecting", d.Joined = "Joined", d.Preview = "Preview", d.Failed = "Failed", d.Reconnecting = "Reconnecting", d.Leaving = "Leaving";
})(L || (L = {}));
var si = /*#__PURE__*/_createClass(function si(e) {
  var _this83 = this;
  _classCallCheck(this, si);
  this.promise = new Promise(function (t, i) {
    _this83.resolve = t, _this83.reject = i, e(t, i);
  });
});
var ai = /*#__PURE__*/function () {
  function ai(e, t) {
    _classCallCheck(this, ai);
    this.onStateChange = e;
    this.sendEvent = t;
    this.TAG = "[RetryScheduler]";
    this.inProgress = new Map();
    this.retryTaskIds = [];
  }
  _createClass(ai, [{
    key: "schedule",
    value: function schedule(d) {
      return c(this, arguments, function (_ref21) {
        var _this84 = this;
        var e = _ref21.category,
          t = _ref21.error,
          i = _ref21.task,
          r = _ref21.originalState,
          _ref21$maxFailedRetri = _ref21.maxFailedRetries,
          s = _ref21$maxFailedRetri === void 0 ? We : _ref21$maxFailedRetri,
          _ref21$changeState = _ref21.changeState,
          a = _ref21$changeState === void 0 ? !0 : _ref21$changeState;
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee149() {
          return _regeneratorRuntime().wrap(function _callee149$(_context150) {
            while (1) switch (_context150.prev = _context150.next) {
              case 0:
                _context150.next = 2;
                return _this84.scheduleTask({
                  category: e,
                  error: t,
                  changeState: a,
                  task: i,
                  originalState: r,
                  maxFailedRetries: s
                });
              case 2:
              case "end":
                return _context150.stop();
            }
          }, _callee149);
        })();
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.retryTaskIds.forEach(function (e) {
        return clearTimeout(e);
      }), this.retryTaskIds = [], this.inProgress.clear();
    }
  }, {
    key: "isTaskInProgress",
    value: function isTaskInProgress(e) {
      return !!this.inProgress.get(e);
    }
  }, {
    key: "scheduleTask",
    value: function scheduleTask(l) {
      return c(this, arguments, function (_ref22) {
        var _this85 = this;
        var e = _ref22.category,
          t = _ref22.error,
          i = _ref22.changeState,
          r = _ref22.task,
          s = _ref22.originalState,
          _ref22$maxFailedRetri = _ref22.maxFailedRetries,
          a = _ref22$maxFailedRetri === void 0 ? We : _ref22$maxFailedRetri,
          _ref22$failedRetryCou = _ref22.failedRetryCount,
          d = _ref22$failedRetryCou === void 0 ? 0 : _ref22$failedRetryCou;
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee150() {
          var f, H, u, h, _f, _H, j, p, v, _f2;
          return _regeneratorRuntime().wrap(function _callee150$(_context151) {
            while (1) switch (_context151.prev = _context151.next) {
              case 0:
                if (!(o.d(_this85.TAG, "schedule: ", {
                  category: R[e],
                  error: t
                }), d === 0)) {
                  _context151.next = 9;
                  break;
                }
                f = _this85.inProgress.get(e);
                if (!f) {
                  _context151.next = 7;
                  break;
                }
                o.d(_this85.TAG, "schedule: Already a task for ".concat(R[e], " scheduled, waiting for its completion"));
                _context151.next = 6;
                return f.promise;
              case 6:
                return _context151.abrupt("return");
              case 7:
                H = new si(function (j, ge) {});
                _this85.inProgress.set(e, H), _this85.sendEvent(t, e);
              case 9:
                u = !1, h = er[e];
                _context151.t0 = _regeneratorRuntime().keys(h);
              case 11:
                if ((_context151.t1 = _context151.t0()).done) {
                  _context151.next = 30;
                  break;
                }
                _f = _context151.t1.value;
                _H = h[parseInt(_f)];
                _context151.prev = 14;
                j = _this85.inProgress.get(_H);
                _context151.t2 = j;
                if (!_context151.t2) {
                  _context151.next = 22;
                  break;
                }
                o.d(_this85.TAG, "schedule: Suspending retry task of ".concat(R[e], ", waiting for ").concat(R[_H], " to recover"));
                _context151.next = 21;
                return j.promise;
              case 21:
                o.d(_this85.TAG, "schedule: Resuming retry task ".concat(R[e], " as it's dependency ").concat(R[_H], " is recovered"));
              case 22:
                _context151.next = 28;
                break;
              case 24:
                _context151.prev = 24;
                _context151.t3 = _context151["catch"](14);
                o.d(_this85.TAG, "schedule: Stopping retry task of ".concat(R[e], " as it's dependency ").concat(R[_H], " failed to recover")), u = !0;
                return _context151.abrupt("break", 30);
              case 28:
                _context151.next = 11;
                break;
              case 30:
                if (!(d >= a || u)) {
                  _context151.next = 37;
                  break;
                }
                if (!(t.description += ". [".concat(R[e], "] Could not recover after ").concat(d, " tries"), u && (t.description += " Could not recover all of it's required dependencies - [".concat(h.map(function (f) {
                  return R[f];
                }).toString(), "]")), t.isTerminal = !0, _this85.inProgress.delete(e), _this85.sendEvent(t, e), _this85.reset(), i)) {
                  _context151.next = 35;
                  break;
                }
                _this85.onStateChange(L.Failed, t);
                _context151.next = 36;
                break;
              case 35:
                throw t;
              case 36:
                return _context151.abrupt("return");
              case 37:
                i && _this85.onStateChange(L.Reconnecting, t);
                p = _this85.getDelayForRetryCount(e, d);
                o.i(_this85.TAG, "schedule: [".concat(R[e], "] [failedRetryCount=").concat(d, "] Scheduling retry task in ").concat(p, "ms"));
                _context151.prev = 40;
                _context151.next = 43;
                return _this85.setTimeoutPromise(r, p);
              case 43:
                v = _context151.sent;
                _context151.next = 49;
                break;
              case 46:
                _context151.prev = 46;
                _context151.t4 = _context151["catch"](40);
                v = !1, o.w(_this85.TAG, "[".concat(R[e], "] Un-caught exception ").concat(_context151.t4.name, " in retry-task, initiating retry"), _context151.t4);
              case 49:
                if (!v) {
                  _context151.next = 54;
                  break;
                }
                _f2 = _this85.inProgress.get(e);
                _this85.inProgress.delete(e), _f2 == null || _f2.resolve(d), i && _this85.inProgress.size === 0 && _this85.onStateChange(s), o.i(_this85.TAG, "schedule: [".concat(R[e], "] [failedRetryCount=").concat(d, "] Recovered \u267B\uFE0F"));
                _context151.next = 56;
                break;
              case 54:
                _context151.next = 56;
                return _this85.scheduleTask({
                  category: e,
                  error: t,
                  changeState: i,
                  task: r,
                  originalState: s,
                  maxFailedRetries: a,
                  failedRetryCount: d + 1
                });
              case 56:
              case "end":
                return _context151.stop();
            }
          }, _callee150, null, [[14, 24], [40, 46]]);
        })();
      });
    }
  }, {
    key: "getBaseDelayForTask",
    value: function getBaseDelayForTask(e, t) {
      return e === R.JoinWSMessageFailed ? 2 : Math.pow(2, t);
    }
  }, {
    key: "getDelayForRetryCount",
    value: function getDelayForRetryCount(e, t) {
      var i = this.getBaseDelayForTask(e, t),
        r = e === R.JoinWSMessageFailed ? Math.random() * 2 : Math.random();
      return Math.round(Math.min(i + r, Ui) * 1e3);
    }
  }, {
    key: "setTimeoutPromise",
    value: function setTimeoutPromise(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee152() {
        var _this86 = this;
        return _regeneratorRuntime().wrap(function _callee152$(_context153) {
          while (1) switch (_context153.prev = _context153.next) {
            case 0:
              return _context153.abrupt("return", new Promise(function (i, r) {
                var s = window.setTimeout(function () {
                  return c(_this86, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee151() {
                    var _a4;
                    return _regeneratorRuntime().wrap(function _callee151$(_context152) {
                      while (1) switch (_context152.prev = _context152.next) {
                        case 0:
                          _context152.prev = 0;
                          _context152.next = 3;
                          return e();
                        case 3:
                          _a4 = _context152.sent;
                          _a4 && this.retryTaskIds.splice(this.retryTaskIds.indexOf(s), 1), i(_a4);
                          _context152.next = 10;
                          break;
                        case 7:
                          _context152.prev = 7;
                          _context152.t0 = _context152["catch"](0);
                          r(_context152.t0);
                        case 10:
                        case "end":
                          return _context152.stop();
                      }
                    }, _callee151, this, [[0, 7]]);
                  }));
                }, t);
                _this86.retryTaskIds.push(s);
              }));
            case 1:
            case "end":
              return _context153.stop();
          }
        }, _callee152);
      }));
    }
  }]);
  return ai;
}();
var ni = /*#__PURE__*/function (_fe) {
  _inherits(ni, _fe);
  var _super16 = _createSuper(ni);
  function ni() {
    var _this87;
    _classCallCheck(this, ni);
    _this87 = _super16.call(this, ct);
    _this87.localStorage = new ie("hms-analytics");
    _this87.localStorage.clear(), _this87.initLocalStorageQueue();
    return _this87;
  }
  _createClass(ni, [{
    key: "enqueue",
    value: function enqueue(e) {
      _get(_getPrototypeOf(ni.prototype), "enqueue", this).call(this, e), this.localStorage.set(this.storage);
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      var e = _get(_getPrototypeOf(ni.prototype), "dequeue", this).call(this);
      return this.localStorage.set(this.storage), e;
    }
  }, {
    key: "initLocalStorageQueue",
    value: function initLocalStorageQueue() {
      var _this88 = this;
      var e;
      (e = this.localStorage.get()) == null || e.forEach(function (t) {
        var i = new O(t);
        _get(_getPrototypeOf(ni.prototype), "enqueue", _this88).call(_this88, i);
      });
    }
  }]);
  return ni;
}(fe);
var oi = /*#__PURE__*/function () {
  function oi() {
    _classCallCheck(this, oi);
    this.TAG = "[AnalyticsTransport]";
  }
  _createClass(oi, [{
    key: "sendEvent",
    value: function sendEvent(e) {
      try {
        this.sendSingleEvent(e), this.flushFailedEvents();
      } catch (t) {
        o.w(this.TAG, "sendEvent failed", t);
      }
    }
  }, {
    key: "flushFailedEvents",
    value: function flushFailedEvents(e) {
      var t;
      try {
        for (o.d(this.TAG, "Flushing failed events", this.failedEvents); this.failedEvents.size() > 0;) {
          var _i12 = this.failedEvents.dequeue();
          _i12 && (((t = _i12.metadata) == null ? void 0 : t.peer.peer_id) === e || !_i12.metadata.peer.peer_id ? this.sendSingleEvent(_i12) : ae.sendEvent(_i12));
        }
      } catch (i) {
        o.w(this.TAG, "flushFailedEvents failed", i);
      }
    }
  }, {
    key: "sendSingleEvent",
    value: function sendSingleEvent(e) {
      try {
        this.transportProvider.sendEvent(e), o.d(this.TAG, "Sent event", e.name, e);
      } catch (t) {
        throw o.w(this.TAG, "".concat(this.transportProvider.TAG, ".sendEvent failed, adding to local storage events"), {
          event: e,
          error: t
        }), this.failedEvents.enqueue(e), t;
      }
    }
  }]);
  return oi;
}();
var ci = /*#__PURE__*/function (_oi) {
  _inherits(ci, _oi);
  var _super17 = _createSuper(ci);
  function ci(e) {
    var _this89;
    _classCallCheck(this, ci);
    _this89 = _super17.call(this);
    _this89.transportProvider = e;
    _this89.failedEvents = new ni();
    return _this89;
  }
  return _createClass(ci);
}(oi);
var U;
(function (t) {
  t[t.Publish = 0] = "Publish", t[t.Subscribe = 1] = "Subscribe";
})(U || (U = {}));
var tr = "[VALIDATIONS]";
function ne(n) {
  return n != null;
}
var di = function di() {
    if (!ne(RTCPeerConnection)) {
      var n = g.GenericErrors.MissingRTCPeerConnection();
      throw o.e(tr, n), n;
    }
  },
  li = function li() {
    if (!ne(navigator.mediaDevices)) {
      var n = g.GenericErrors.MissingMediaDevices();
      throw o.e(tr, n), n;
    }
  };
function ir(n, e) {
  var r;
  var t = (0, _sdpTransform.parse)(n.sdp);
  if (!((r = t.origin) == null ? void 0 : r.username.startsWith("mozilla"))) return n;
  var i = e ? Array.from(e.values()) : [];
  return t.media.forEach(function (s) {
    var l, u, h;
    var a = (l = s.msid) == null ? void 0 : l.split(" ")[0],
      d = (u = i.find(function (p) {
        return p.type === s.type && p.stream_id === a;
      })) == null ? void 0 : u.track_id;
    d && (s.msid = (h = s.msid) == null ? void 0 : h.replace(/\s(.+)/, " ".concat(d)));
  }), {
    type: n.type,
    sdp: (0, _sdpTransform.write)(t)
  };
}
function rr(n, e) {
  var s;
  if (!(n == null ? void 0 : n.sdp) || !e) return;
  var i = (0, _sdpTransform.parse)(n.sdp).media.find(function (a) {
    return ne(a.mid) && parseInt(a.mid) === parseInt(e);
  });
  return (s = i == null ? void 0 : i.msid) == null ? void 0 : s.split(" ")[1];
}
function sr(n) {
  return n.sdp.includes("usedtx=1") ? n : {
    type: n.type,
    sdp: n.sdp.replace("useinbandfec=1", "useinbandfec=1;usedtx=1")
  };
}
var oe = "[HMSConnection]",
  Ne = /*#__PURE__*/function () {
    function Ne(e, t) {
      _classCallCheck(this, Ne);
      this.candidates = new Array();
      this.role = e, this.signal = t;
    }
    _createClass(Ne, [{
      key: "iceConnectionState",
      get: function get() {
        return this.nativeConnection.iceConnectionState;
      }
    }, {
      key: "connectionState",
      get: function get() {
        return this.nativeConnection.connectionState;
      }
    }, {
      key: "action",
      get: function get() {
        return this.role === U.Publish ? m.PUBLISH : m.SUBSCRIBE;
      }
    }, {
      key: "addTransceiver",
      value: function addTransceiver(e, t) {
        return this.nativeConnection.addTransceiver(e, t);
      }
    }, {
      key: "createOffer",
      value: function createOffer(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee153() {
          var _i13;
          return _regeneratorRuntime().wrap(function _callee153$(_context154) {
            while (1) switch (_context154.prev = _context154.next) {
              case 0:
                _context154.prev = 0;
                _context154.next = 3;
                return this.nativeConnection.createOffer(t);
              case 3:
                _i13 = _context154.sent;
                return _context154.abrupt("return", (o.d(oe, "[role=".concat(this.role, "] createOffer offer=").concat(JSON.stringify(_i13, null, 1))), sr(ir(_i13, e))));
              case 7:
                _context154.prev = 7;
                _context154.t0 = _context154["catch"](0);
                throw g.WebrtcErrors.CreateOfferFailed(this.action, _context154.t0.message);
              case 10:
              case "end":
                return _context154.stop();
            }
          }, _callee153, this, [[0, 7]]);
        }));
      }
    }, {
      key: "createAnswer",
      value: function createAnswer() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee154() {
          var _t12;
          return _regeneratorRuntime().wrap(function _callee154$(_context155) {
            while (1) switch (_context155.prev = _context155.next) {
              case 0:
                _context155.prev = 0;
                _context155.next = 3;
                return this.nativeConnection.createAnswer(e);
              case 3:
                _t12 = _context155.sent;
                return _context155.abrupt("return", (o.d(oe, "[role=".concat(this.role, "] createAnswer answer=").concat(JSON.stringify(_t12, null, 1))), _t12));
              case 7:
                _context155.prev = 7;
                _context155.t0 = _context155["catch"](0);
                throw g.WebrtcErrors.CreateAnswerFailed(this.action, _context155.t0.message);
              case 10:
              case "end":
                return _context155.stop();
            }
          }, _callee154, this, [[0, 7]]);
        }));
      }
    }, {
      key: "setLocalDescription",
      value: function setLocalDescription(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee155() {
          return _regeneratorRuntime().wrap(function _callee155$(_context156) {
            while (1) switch (_context156.prev = _context156.next) {
              case 0:
                _context156.prev = 0;
                o.d(oe, "[role=".concat(this.role, "] setLocalDescription description=").concat(JSON.stringify(e, null, 1)));
                _context156.next = 4;
                return this.nativeConnection.setLocalDescription(e);
              case 4:
                _context156.next = 9;
                break;
              case 6:
                _context156.prev = 6;
                _context156.t0 = _context156["catch"](0);
                throw g.WebrtcErrors.SetLocalDescriptionFailed(this.action, _context156.t0.message);
              case 9:
              case "end":
                return _context156.stop();
            }
          }, _callee155, this, [[0, 6]]);
        }));
      }
    }, {
      key: "setRemoteDescription",
      value: function setRemoteDescription(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee156() {
          return _regeneratorRuntime().wrap(function _callee156$(_context157) {
            while (1) switch (_context157.prev = _context157.next) {
              case 0:
                _context157.prev = 0;
                o.d(oe, "[role=".concat(this.role, "] setRemoteDescription description=").concat(JSON.stringify(e, null, 1)));
                _context157.next = 4;
                return this.nativeConnection.setRemoteDescription(e);
              case 4:
                _context157.next = 9;
                break;
              case 6:
                _context157.prev = 6;
                _context157.t0 = _context157["catch"](0);
                throw g.WebrtcErrors.SetRemoteDescriptionFailed(this.action, _context157.t0.message);
              case 9:
              case "end":
                return _context157.stop();
            }
          }, _callee156, this, [[0, 6]]);
        }));
      }
    }, {
      key: "addIceCandidate",
      value: function addIceCandidate(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee157() {
          return _regeneratorRuntime().wrap(function _callee157$(_context158) {
            while (1) switch (_context158.prev = _context158.next) {
              case 0:
                if (!(this.nativeConnection.signalingState === "closed")) {
                  _context158.next = 3;
                  break;
                }
                o.d(oe, "[role=".concat(this.role, "] addIceCandidate signalling state closed"));
                return _context158.abrupt("return");
              case 3:
                o.d(oe, "[role=".concat(this.role, "] addIceCandidate candidate=").concat(JSON.stringify(e, null, 1)));
                _context158.next = 6;
                return this.nativeConnection.addIceCandidate(e);
              case 6:
              case "end":
                return _context158.stop();
            }
          }, _callee157, this);
        }));
      }
    }, {
      key: "remoteDescription",
      get: function get() {
        return this.nativeConnection.remoteDescription;
      }
    }, {
      key: "getSenders",
      value: function getSenders() {
        return this.nativeConnection.getSenders();
      }
    }, {
      key: "logSelectedIceCandidatePairs",
      value: function logSelectedIceCandidatePairs() {
        var _this90 = this;
        try {
          (this.role === U.Publish ? this.getSenders() : this.getReceivers()).forEach(function (t) {
            var r;
            var i = (r = t.track) == null ? void 0 : r.kind;
            if (t.transport) {
              var s = t.transport.iceTransport,
                _a5 = function _a5() {
                  typeof s.getSelectedCandidatePair == "function" && (_this90.selectedCandidatePair = s.getSelectedCandidatePair(), o.d(oe, "".concat(U[_this90.role], " connection"), "selected ".concat(i || "unknown", " candidate pair"), JSON.stringify(_this90.selectedCandidatePair, null, 2)));
                };
              typeof s.onselectedcandidatepairchange == "function" && (s.onselectedcandidatepairchange = _a5), _a5();
            }
          });
        } catch (e) {
          o.w(oe, "Error in logging selected ice candidate pair for ".concat(U[this.role], " connection"), e);
        }
      }
    }, {
      key: "removeTrack",
      value: function removeTrack(e) {
        this.nativeConnection.signalingState !== "closed" && this.nativeConnection.removeTrack(e);
      }
    }, {
      key: "setMaxBitrateAndFramerate",
      value: function setMaxBitrateAndFramerate(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee158() {
          var t, i, r, s;
          return _regeneratorRuntime().wrap(function _callee158$(_context159) {
            while (1) switch (_context159.prev = _context159.next) {
              case 0:
                t = e.settings.maxBitrate, i = e instanceof ee && e.settings.maxFramerate, r = this.getSenders().find(function (s) {
                  var a;
                  return ((a = s == null ? void 0 : s.track) == null ? void 0 : a.id) === e.getTrackIDBeingSent();
                });
                if (!r) {
                  _context159.next = 8;
                  break;
                }
                s = r.getParameters();
                s.encodings.length > 0 && (t && (s.encodings[0].maxBitrate = t * 1e3), i && (s.encodings[0].maxFramerate = i));
                _context159.next = 6;
                return r.setParameters(s);
              case 6:
                _context159.next = 9;
                break;
              case 8:
                o.w(oe, "no sender found to setMaxBitrate for track - ".concat(e.trackId, ", sentTrackId - ").concat(e.getTrackIDBeingSent()));
              case 9:
              case "end":
                return _context159.stop();
            }
          }, _callee158, this);
        }));
      }
    }, {
      key: "getStats",
      value: function getStats() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee159() {
          return _regeneratorRuntime().wrap(function _callee159$(_context160) {
            while (1) switch (_context160.prev = _context160.next) {
              case 0:
                _context160.next = 2;
                return this.nativeConnection.getStats();
              case 2:
                return _context160.abrupt("return", _context160.sent);
              case 3:
              case "end":
                return _context160.stop();
            }
          }, _callee159, this);
        }));
      }
    }, {
      key: "close",
      value: function close() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee160() {
          return _regeneratorRuntime().wrap(function _callee160$(_context161) {
            while (1) switch (_context161.prev = _context161.next) {
              case 0:
                this.nativeConnection.close();
              case 1:
              case "end":
                return _context161.stop();
            }
          }, _callee160, this);
        }));
      }
    }, {
      key: "getReceivers",
      value: function getReceivers() {
        return this.nativeConnection.getReceivers();
      }
    }]);
    return Ne;
  }();
var Tt = /*#__PURE__*/function (_Ne) {
  _inherits(Tt, _Ne);
  var _super18 = _createSuper(Tt);
  function Tt(e, t, i) {
    var _this91;
    _classCallCheck(this, Tt);
    _this91 = _super18.call(this, U.Publish, e);
    _this91.TAG = "[HMSPublishConnection]";
    _this91.observer = i, _this91.nativeConnection = new RTCPeerConnection(t), _this91.nativeConnection.createDataChannel(ot, {
      protocol: "SCTP"
    }), _this91.nativeConnection.onicecandidate = function (_ref23) {
      var r = _ref23.candidate;
      r && e.trickle(_this91.role, r);
    }, _this91.nativeConnection.oniceconnectionstatechange = function () {
      _this91.observer.onIceConnectionChange(_this91.nativeConnection.iceConnectionState);
    }, _this91.nativeConnection.onconnectionstatechange = function () {
      _this91.observer.onConnectionStateChange(_this91.nativeConnection.connectionState);
    };
    return _this91;
  }
  _createClass(Tt, [{
    key: "initAfterJoin",
    value: function initAfterJoin() {
      var _this92 = this;
      this.nativeConnection.onnegotiationneeded = function () {
        return c(_this92, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee161() {
          return _regeneratorRuntime().wrap(function _callee161$(_context162) {
            while (1) switch (_context162.prev = _context162.next) {
              case 0:
                o.d(this.TAG, "onnegotiationneeded");
                _context162.next = 3;
                return this.observer.onRenegotiationNeeded();
              case 3:
              case "end":
                return _context162.stop();
            }
          }, _callee161, this);
        }));
      };
    }
  }]);
  return Tt;
}(Ne);
var ft = /*#__PURE__*/function () {
  function ft(e, t) {
    var _this93 = this;
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    _classCallCheck(this, ft);
    this.TAG = "[HMSDataChannel]";
    this.nativeChannel = e, this.observer = t, this.metadata = i, e.onmessage = function (r) {
      _this93.observer.onMessage(r.data);
    };
  }
  _createClass(ft, [{
    key: "id",
    get: function get() {
      return this.nativeChannel.id;
    }
  }, {
    key: "label",
    get: function get() {
      return this.nativeChannel.label;
    }
  }, {
    key: "readyState",
    get: function get() {
      return this.nativeChannel.readyState;
    }
  }, {
    key: "send",
    value: function send(e) {
      o.d(this.TAG, "[".concat(this.metadata, "] Sending [size=").concat(e.length, "] message=").concat(e)), this.nativeChannel.send(e);
    }
  }, {
    key: "close",
    value: function close() {
      this.nativeChannel.close();
    }
  }]);
  return ft;
}();
var Et = /*#__PURE__*/function (_Ne2) {
  _inherits(Et, _Ne2);
  var _super19 = _createSuper(Et);
  function Et(e, t, i) {
    var _this94;
    _classCallCheck(this, Et);
    _this94 = _super19.call(this, U.Subscribe, e);
    _this94.TAG = "[HMSSubscribeConnection]";
    _this94.remoteStreams = new Map();
    _this94.MAX_RETRIES = 3;
    _this94.pendingMessageQueue = [];
    _this94.eventEmitter = new _eventemitter.default({
      maxListeners: 60
    });
    _this94.handlePendingApiMessages = function () {
      _this94.eventEmitter.emit("open", !0), _this94.pendingMessageQueue.length > 0 && (o.d(_this94.TAG, "Found pending message queue, sending messages"), _this94.pendingMessageQueue.forEach(function (e) {
        return _this94.sendOverApiDataChannel(e);
      }), _this94.pendingMessageQueue.length = 0);
    };
    _this94.sendMessage = function (e, t) {
      return c(_assertThisInitialized(_this94), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee162() {
        var r, i, s, _a6, l;
        return _regeneratorRuntime().wrap(function _callee162$(_context163) {
          while (1) switch (_context163.prev = _context163.next) {
            case 0:
              _context163.t0 = ((r = this.apiChannel) == null ? void 0 : r.readyState) !== "open";
              if (!_context163.t0) {
                _context163.next = 4;
                break;
              }
              _context163.next = 4;
              return this.eventEmitter.waitFor("open");
            case 4:
              s = 0;
            case 5:
              if (!(s < this.MAX_RETRIES)) {
                _context163.next = 26;
                break;
              }
              this.apiChannel.send(e);
              _context163.next = 9;
              return this.waitForResponse(t);
            case 9:
              i = _context163.sent;
              _a6 = i.error;
              if (!_a6) {
                _context163.next = 22;
                break;
              }
              if (!(_a6.code === 404)) {
                _context163.next = 15;
                break;
              }
              o.d(this.TAG, "Track not found ".concat(t), {
                request: e,
                try: s + 1,
                error: _a6
              });
              return _context163.abrupt("break", 26);
            case 15:
              if (!(o.e(this.TAG, "Failed sending ".concat(t), {
                request: e,
                try: s + 1,
                error: _a6
              }), !(_a6.code / 100 == 5 || _a6.code === 429))) {
                _context163.next = 17;
                break;
              }
              throw Error("code=".concat(_a6.code, ", message=").concat(_a6.message));
            case 17:
              l = (2 + Math.random() * 2) * 1e3;
              _context163.next = 20;
              return $(l);
            case 20:
              _context163.next = 23;
              break;
            case 22:
              return _context163.abrupt("break", 26);
            case 23:
              s++;
              _context163.next = 5;
              break;
            case 26:
              return _context163.abrupt("return", i);
            case 27:
            case "end":
              return _context163.stop();
          }
        }, _callee162, this);
      }));
    };
    _this94.waitForResponse = function (e) {
      return c(_assertThisInitialized(_this94), null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee163() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee163$(_context164) {
          while (1) switch (_context164.prev = _context164.next) {
            case 0:
              _context164.next = 2;
              return this.eventEmitter.waitFor("message", function (r) {
                return r.includes(e);
              });
            case 2:
              t = _context164.sent;
              i = JSON.parse(t[0]);
              return _context164.abrupt("return", (o.d(this.TAG, "response for ".concat(e, " -"), JSON.stringify(i, null, 2)), i));
            case 5:
            case "end":
              return _context164.stop();
          }
        }, _callee163, this);
      }));
    };
    _this94.observer = i, _this94.nativeConnection = new RTCPeerConnection(t), _this94.initNativeConnectionCallbacks();
    return _this94;
  }
  _createClass(Et, [{
    key: "initNativeConnectionCallbacks",
    value: function initNativeConnectionCallbacks() {
      var _this95 = this;
      this.nativeConnection.oniceconnectionstatechange = function () {
        _this95.observer.onIceConnectionChange(_this95.nativeConnection.iceConnectionState);
      }, this.nativeConnection.onconnectionstatechange = function () {
        _this95.observer.onConnectionStateChange(_this95.nativeConnection.connectionState);
      }, this.nativeConnection.ondatachannel = function (e) {
        e.channel.label === ot && (_this95.apiChannel = new ft(e.channel, {
          onMessage: function onMessage(t) {
            _this95.eventEmitter.emit("message", t), _this95.observer.onApiChannelMessage(t);
          }
        }, "role=".concat(_this95.role)), e.channel.onopen = _this95.handlePendingApiMessages);
      }, this.nativeConnection.onicecandidate = function (e) {
        e.candidate !== null && _this95.signal.trickle(_this95.role, e.candidate);
      }, this.nativeConnection.ontrack = function (e) {
        var l;
        var t = e.streams[0],
          i = t.id;
        if (!_this95.remoteStreams.has(i)) {
          var u = new we(t, _this95);
          _this95.remoteStreams.set(i, u);
        }
        t.addEventListener("removetrack", function (u) {
          if (u.track.id !== e.track.id) return;
          var h = r.tracks.findIndex(function (p) {
            var v;
            return p.nativeTrack.id === u.track.id && e.transceiver.mid === ((v = p.transceiver) == null ? void 0 : v.mid);
          });
          if (h >= 0) {
            var _p3 = r.tracks[h];
            _this95.observer.onTrackRemove(_p3), r.tracks.splice(h, 1), r.tracks.length === 0 && _this95.remoteStreams.delete(i);
          }
        });
        var r = _this95.remoteStreams.get(i),
          s = e.track.kind === "audio" ? Ee : X,
          a = new s(r, e.track);
        a.transceiver = e.transceiver;
        var d = rr(_this95.remoteDescription, (l = e.transceiver) == null ? void 0 : l.mid);
        d && a.setSdpTrackId(d), r.tracks.push(a), _this95.observer.onTrackAdd(a);
      };
    }
  }, {
    key: "sendOverApiDataChannel",
    value: function sendOverApiDataChannel(e) {
      this.apiChannel && this.apiChannel.readyState === "open" ? this.apiChannel.send(e) : (o.w(this.TAG, "API Data channel not ".concat(this.apiChannel ? "open" : "present", ", queueing"), e), this.pendingMessageQueue.push(e));
    }
  }, {
    key: "sendOverApiDataChannelWithResponse",
    value: function sendOverApiDataChannelWithResponse(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee164() {
        var i, r;
        return _regeneratorRuntime().wrap(function _callee164$(_context165) {
          while (1) switch (_context165.prev = _context165.next) {
            case 0:
              i = (0, _uuid.v4)(), r = JSON.stringify(S({
                id: t || i,
                jsonrpc: "2.0"
              }, e));
              return _context165.abrupt("return", this.sendMessage(r, i));
            case 2:
            case "end":
              return _context165.stop();
          }
        }, _callee164, this);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      var _this96 = this;
      var e = function e(t) {
        return _get(_getPrototypeOf(Et.prototype), t, _this96);
      };
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee165() {
        var i;
        return _regeneratorRuntime().wrap(function _callee165$(_context166) {
          while (1) switch (_context166.prev = _context166.next) {
            case 0:
              _context166.next = 2;
              return e("close").call(this);
            case 2:
              (i = this.apiChannel) == null || i.close();
            case 3:
            case "end":
              return _context166.stop();
          }
        }, _callee165, this);
      }));
    }
  }]);
  return Et;
}(Ne);
var nr = function nr(n, e, t) {
    return c(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee166() {
      var s, i, r, _a7, _d5, l;
      return _regeneratorRuntime().wrap(function _callee166$(_context167) {
        while (1) switch (_context167.prev = _context167.next) {
          case 0:
            r = {};
            if (!((s = n.transceiver) == null ? void 0 : s.sender.track)) {
              _context167.next = 14;
              break;
            }
            _context167.prev = 2;
            _context167.next = 5;
            return n.transceiver.sender.getStats();
          case 5:
            i = _context167.sent;
            _a7 = {}, _d5 = {}, l = {};
            i == null || i.forEach(function (u) {
              switch (u.type) {
                case "outbound-rtp":
                  _d5[u.id] = u;
                  break;
                case "remote-inbound-rtp":
                  l[u.ssrc] = u;
                  break;
                case "codec":
                  _a7[u.id] = u.mimeType;
                  break;
                default:
                  break;
              }
            }), Object.keys(S({}, _d5)).forEach(function (u) {
              var j;
              var h = (j = _d5[u]) == null ? void 0 : j.codecId,
                p = h ? _a7[h] : void 0,
                v;
              p && (v = p.substring(p.indexOf("/") + 1));
              var f = _d5[u],
                H = l[f.ssrc];
              r[u] = D(S({}, f), {
                bitrate: hi("bytesSent", f, t == null ? void 0 : t[u]),
                packetsLost: H == null ? void 0 : H.packetsLost,
                jitter: H == null ? void 0 : H.jitter,
                roundTripTime: H == null ? void 0 : H.roundTripTime,
                totalRoundTripTime: H == null ? void 0 : H.totalRoundTripTime,
                peerName: e,
                peerID: n.peerId,
                codec: v
              });
            });
            _context167.next = 13;
            break;
          case 10:
            _context167.prev = 10;
            _context167.t0 = _context167["catch"](2);
            o.w("[HMSWebrtcStats]", "Error in getting local track stats", n, _context167.t0, _context167.t0.name);
          case 13:
            return _context167.abrupt("return", r);
          case 14:
          case "end":
            return _context167.stop();
        }
      }, _callee166, null, [[2, 10]]);
    }));
  },
  or = function or(n, e, t) {
    return c(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee167() {
      var d, i, r, s, a;
      return _regeneratorRuntime().wrap(function _callee167$(_context168) {
        while (1) switch (_context168.prev = _context168.next) {
          case 0:
            _context168.prev = 0;
            _context168.next = 3;
            return (d = n.transceiver) == null ? void 0 : d.receiver.getStats();
          case 3:
            i = _context168.sent;
            _context168.next = 9;
            break;
          case 6:
            _context168.prev = 6;
            _context168.t0 = _context168["catch"](0);
            o.w("[HMSWebrtcStats]", "Error in getting remote track stats", n, _context168.t0);
          case 9:
            r = Kr(i), s = hi("bytesReceived", r, t), a = pi("packetsLost", r, t);
            return _context168.abrupt("return", ((r == null ? void 0 : r.remote) && Object.assign(r.remote, {
              packetsLostRate: pi("packetsLost", r.remote, t == null ? void 0 : t.remote)
            }), r && Object.assign(r, {
              bitrate: s,
              packetsLostRate: a,
              peerId: n.peerId,
              peerName: e,
              codec: r.codec
            })));
          case 11:
          case "end":
            return _context168.stop();
        }
      }, _callee167, null, [[0, 6]]);
    }));
  },
  Kr = function Kr(n) {
    var e,
      t,
      i = {};
    n == null || n.forEach(function (a) {
      switch (a.type) {
        case "inbound-rtp":
          e = a;
          break;
        case "outbound-rtp":
          e = a;
          break;
        case "remote-inbound-rtp":
          t = a;
          break;
        case "codec":
          i[a.id] = a.mimeType;
          break;
        default:
          break;
      }
    });
    var r = (e == null ? void 0 : e.codecId) ? i[e.codecId] : void 0,
      s;
    return r && (s = r.substring(r.indexOf("/") + 1)), e && Object.assign(e, {
      remote: t,
      codec: s
    });
  },
  ui = function ui(n, e, t) {
    var i = qr(e),
      r = hi(n === "publish" ? "bytesSent" : "bytesReceived", i, t && t[n]);
    return i && Object.assign(i, {
      bitrate: r
    });
  },
  qr = function qr(n) {
    var e;
    return n.forEach(function (t) {
      t.type === "transport" && (e = n.get(t.selectedCandidatePairId));
    }), e || n.forEach(function (t) {
      t.type === "candidate-pair" && t.selected && (e = t);
    }), e;
  },
  cr = function cr(n) {
    var e = {
      packetsLost: 0,
      jitter: 0
    };
    return n == null || n.forEach(function (t) {
      t.packetsLost && (e.packetsLost += t.packetsLost), t.jitter > e.jitter && (e.jitter = t.jitter);
    }), e;
  },
  dr = function dr(n, e) {
    return Array.from(new Set(n.concat(e)));
  },
  hi = function hi(n, e, t) {
    return pi(n, e, t) * 8;
  },
  pi = function pi(n, e, t) {
    var i = e && e[n],
      r = t ? t[n] : null;
    return [e, t, ne(i), ne(r)].every(function (a) {
      return !!a;
    }) ? mi(i, r, e == null ? void 0 : e.timestamp, t == null ? void 0 : t.timestamp) * 1e3 : 0;
  },
  mi = function mi(n, e, t, i) {
    return ne(n) && ne(e) && t && i ? (n - e) / (t - i) : 0;
  };
var kt = /*#__PURE__*/function () {
  function kt(e, t) {
    _classCallCheck(this, kt);
    this.getStats = e;
    this.store = t;
    this.TAG = "[HMSWebrtcStats]";
    this.peerStats = {};
    this.remoteTrackStats = {};
    this.localTrackStats = {};
    var i;
    this.localPeerID = (i = this.store.getLocalPeer()) == null ? void 0 : i.peerId;
  }
  _createClass(kt, [{
    key: "getLocalPeerStats",
    value: function getLocalPeerStats() {
      return this.peerStats[this.localPeerID];
    }
  }, {
    key: "getRemoteTrackStats",
    value: function getRemoteTrackStats(e) {
      return this.remoteTrackStats[e];
    }
  }, {
    key: "getLocalTrackStats",
    value: function getLocalTrackStats() {
      return this.localTrackStats;
    }
  }, {
    key: "updateStats",
    value: function updateStats() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee168() {
        return _regeneratorRuntime().wrap(function _callee168$(_context169) {
          while (1) switch (_context169.prev = _context169.next) {
            case 0:
              _context169.next = 2;
              return this.updateLocalPeerStats();
            case 2:
              _context169.next = 4;
              return this.updateLocalTrackStats();
            case 4:
              _context169.next = 6;
              return this.updateRemoteTrackStats();
            case 6:
            case "end":
              return _context169.stop();
          }
        }, _callee168, this);
      }));
    }
  }, {
    key: "updateLocalPeerStats",
    value: function updateLocalPeerStats() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee169() {
        var h, p, v, f, H, j, e, t, i, r, s, _cr, a, d, l, u;
        return _regeneratorRuntime().wrap(function _callee169$(_context170) {
          while (1) switch (_context170.prev = _context170.next) {
            case 0:
              e = this.getLocalPeerStats();
              _context170.prev = 1;
              _context170.next = 4;
              return (p = (h = this.getStats).publish) == null ? void 0 : p.call(h);
            case 4:
              t = _context170.sent;
              _context170.next = 10;
              break;
            case 7:
              _context170.prev = 7;
              _context170.t0 = _context170["catch"](1);
              o.w(this.TAG, "Error in getting publish stats", _context170.t0);
            case 10:
              i = t && ui("publish", t, e);
              _context170.prev = 11;
              _context170.next = 14;
              return (f = (v = this.getStats).subscribe) == null ? void 0 : f.call(v);
            case 14:
              r = _context170.sent;
              _context170.next = 20;
              break;
            case 17:
              _context170.prev = 17;
              _context170.t1 = _context170["catch"](11);
              o.w(this.TAG, "Error in getting subscribe stats", _context170.t1);
            case 20:
              s = r && ui("subscribe", r, e), _cr = cr(r), a = _cr.packetsLost, d = _cr.jitter, l = mi(a, (H = e == null ? void 0 : e.subscribe) == null ? void 0 : H.packetsLost, s == null ? void 0 : s.timestamp, (j = e == null ? void 0 : e.subscribe) == null ? void 0 : j.timestamp), u = s && Object.assign(s, {
                packetsLostRate: l,
                jitter: d,
                packetsLost: a
              });
              this.peerStats[this.localPeerID] = {
                publish: i,
                subscribe: u
              };
            case 22:
            case "end":
              return _context170.stop();
          }
        }, _callee169, this, [[1, 7], [11, 17]]);
      }));
    }
  }, {
    key: "updateRemoteTrackStats",
    value: function updateRemoteTrackStats() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee170() {
        var _this97 = this;
        var i, e, t, _iterator19, _step19, _r18, s, _a8, _d6;
        return _regeneratorRuntime().wrap(function _callee170$(_context171) {
          while (1) switch (_context171.prev = _context171.next) {
            case 0:
              e = Array.from(this.store.getTracksMap().values()).filter(function (r) {
                return r instanceof X || r instanceof Ee;
              }), t = e.map(function (r) {
                return r.trackId;
              });
              Object.keys(this.remoteTrackStats).forEach(function (r) {
                t.includes(r) || delete _this97.remoteTrackStats[r];
              });
              _iterator19 = _createForOfIteratorHelper(e);
              _context171.prev = 3;
              _iterator19.s();
            case 5:
              if ((_step19 = _iterator19.n()).done) {
                _context171.next = 15;
                break;
              }
              _r18 = _step19.value;
              s = _r18.peerId && ((i = this.store.getPeerById(_r18.peerId)) == null ? void 0 : i.name);
              _a8 = this.getRemoteTrackStats(_r18.trackId);
              _context171.next = 11;
              return or(_r18, s, _a8);
            case 11:
              _d6 = _context171.sent;
              _d6 && (this.remoteTrackStats[_r18.trackId] = _d6);
            case 13:
              _context171.next = 5;
              break;
            case 15:
              _context171.next = 20;
              break;
            case 17:
              _context171.prev = 17;
              _context171.t0 = _context171["catch"](3);
              _iterator19.e(_context171.t0);
            case 20:
              _context171.prev = 20;
              _iterator19.f();
              return _context171.finish(20);
            case 23:
            case "end":
              return _context171.stop();
          }
        }, _callee170, this, [[3, 17, 20, 23]]);
      }));
    }
  }, {
    key: "updateLocalTrackStats",
    value: function updateLocalTrackStats() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee171() {
        var i, e, t, _iterator20, _step20, _r19, s, _a9, _d7;
        return _regeneratorRuntime().wrap(function _callee171$(_context172) {
          while (1) switch (_context172.prev = _context172.next) {
            case 0:
              e = this.store.getLocalPeerTracks().reduce(function (r, s) {
                return r[s.getTrackIDBeingSent()] = s, r;
              }, {}), t = dr(Object.keys(this.localTrackStats), Object.keys(e));
              _iterator20 = _createForOfIteratorHelper(t);
              _context172.prev = 2;
              _iterator20.s();
            case 4:
              if ((_step20 = _iterator20.n()).done) {
                _context172.next = 18;
                break;
              }
              _r19 = _step20.value;
              s = e[_r19];
              if (!s) {
                _context172.next = 15;
                break;
              }
              _a9 = (i = this.store.getLocalPeer()) == null ? void 0 : i.name;
              _context172.next = 11;
              return nr(s, _a9, this.localTrackStats[_r19]);
            case 11:
              _d7 = _context172.sent;
              _d7 && (this.localTrackStats[_r19] = _d7);
              _context172.next = 16;
              break;
            case 15:
              delete this.localTrackStats[_r19];
            case 16:
              _context172.next = 4;
              break;
            case 18:
              _context172.next = 23;
              break;
            case 20:
              _context172.prev = 20;
              _context172.t0 = _context172["catch"](2);
              _iterator20.e(_context172.t0);
            case 23:
              _context172.prev = 23;
              _iterator20.f();
              return _context172.finish(23);
            case 26:
            case "end":
              return _context172.stop();
          }
        }, _callee171, this, [[2, 20, 23, 26]]);
      }));
    }
  }]);
  return kt;
}();
exports.HMSWebrtcStats = kt;
var yt = /*#__PURE__*/function () {
  function yt(e, t, i, r) {
    var _this98 = this;
    _classCallCheck(this, yt);
    this.store = e;
    this.eventBus = t;
    this.publishConnection = i;
    this.subscribeConnection = r;
    this.TAG = "[HMSWebrtcInternals]";
    this.interval = qi;
    this.isMonitored = !1;
    this.handleStatsUpdate = function () {
      return c(_this98, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee172() {
        var e;
        return _regeneratorRuntime().wrap(function _callee172$(_context173) {
          while (1) switch (_context173.prev = _context173.next) {
            case 0:
              _context173.next = 2;
              return (e = this.hmsStats) == null ? void 0 : e.updateStats();
            case 2:
              this.eventBus.statsUpdate.publish(this.hmsStats);
            case 3:
            case "end":
              return _context173.stop();
          }
        }, _callee172, this);
      }));
    };
  }
  _createClass(yt, [{
    key: "getPublishPeerConnection",
    value: function getPublishPeerConnection() {
      return this.publishConnection;
    }
  }, {
    key: "getSubscribePeerConnection",
    value: function getSubscribePeerConnection() {
      return this.subscribeConnection;
    }
  }, {
    key: "getCurrentStats",
    value: function getCurrentStats() {
      return this.hmsStats;
    }
  }, {
    key: "onStatsChange",
    value: function onStatsChange(e) {
      var _this99 = this;
      return this.eventBus.statsUpdate.subscribe(e), function () {
        _this99.eventBus.statsUpdate.unsubscribe(e);
      };
    }
  }, {
    key: "setPeerConnections",
    value: function setPeerConnections(_ref24) {
      var e = _ref24.publish,
        t = _ref24.subscribe;
      var i, r;
      this.publishConnection = e, this.subscribeConnection = t, this.hmsStats = new kt({
        publish: (i = this.publishConnection) == null ? void 0 : i.getStats.bind(this.publishConnection),
        subscribe: (r = this.subscribeConnection) == null ? void 0 : r.getStats.bind(this.subscribeConnection)
      }, this.store);
    }
  }, {
    key: "start",
    value: function start() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee173() {
        var _this100 = this;
        return _regeneratorRuntime().wrap(function _callee173$(_context174) {
          while (1) switch (_context174.prev = _context174.next) {
            case 0:
              if (!this.isMonitored) {
                _context174.next = 3;
                break;
              }
              o.d(this.TAG, "Already started");
              return _context174.abrupt("return");
            case 3:
              this.stop(), this.isMonitored = !0, o.d(this.TAG, "Starting Webrtc Stats Monitor"), this.startLoop().then(function () {
                return o.d(_this100.TAG, "Stopping Webrtc Stats Monitor");
              }).catch(function (e) {
                return o.e(_this100.TAG, e.message);
              });
            case 4:
            case "end":
              return _context174.stop();
          }
        }, _callee173, this);
      }));
    }
  }, {
    key: "stop",
    value: function stop() {
      this.isMonitored = !1;
    }
  }, {
    key: "startLoop",
    value: function startLoop() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee174() {
        return _regeneratorRuntime().wrap(function _callee174$(_context175) {
          while (1) switch (_context175.prev = _context175.next) {
            case 0:
              if (!this.isMonitored) {
                _context175.next = 7;
                break;
              }
              _context175.next = 3;
              return this.handleStatsUpdate();
            case 3:
              _context175.next = 5;
              return $(this.interval);
            case 5:
              _context175.next = 0;
              break;
            case 7:
            case "end":
              return _context175.stop();
          }
        }, _callee174, this);
      }));
    }
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      this.stop(), this.eventBus.statsUpdate.removeAllListeners();
    }
  }]);
  return yt;
}();
exports.HMSWebrtcInternals = yt;
var Mt = "[InitService]",
  At = /*#__PURE__*/function () {
    function At() {
      _classCallCheck(this, At);
    }
    _createClass(At, null, [{
      key: "handleError",
      value: function handleError(e, t) {
        switch (e.status) {
          case 404:
            throw g.APIErrors.EndpointUnreachable(m.INIT, t.message || e.statusText);
          case 200:
            break;
          default:
            throw g.APIErrors.ServerErrors(t.code || e.status, m.INIT, t.message || (e == null ? void 0 : e.statusText));
        }
      }
    }, {
      key: "fetchInitConfig",
      value: function fetchInitConfig(a) {
        return c(this, arguments, function (_ref25) {
          var _this101 = this;
          var e = _ref25.token,
            t = _ref25.peerId,
            i = _ref25.userAgent,
            _ref25$initEndpoint = _ref25.initEndpoint,
            r = _ref25$initEndpoint === void 0 ? "https://prod-init.100ms.live" : _ref25$initEndpoint,
            _ref25$region = _ref25.region,
            s = _ref25$region === void 0 ? "" : _ref25$region;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee175() {
            var d, l, u, h, _u;
            return _regeneratorRuntime().wrap(function _callee175$(_context176) {
              while (1) switch (_context176.prev = _context176.next) {
                case 0:
                  o.d(Mt, "fetchInitConfig: initEndpoint=".concat(r, " token=").concat(e, " peerId=").concat(t, " region=").concat(s, " "));
                  d = jr(r, t, i, s);
                  _context176.prev = 2;
                  _context176.next = 5;
                  return fetch(d, {
                    headers: {
                      Authorization: "Bearer ".concat(e)
                    }
                  });
                case 5:
                  l = _context176.sent;
                  _context176.prev = 6;
                  _context176.next = 9;
                  return l.clone().json();
                case 9:
                  u = _context176.sent;
                  return _context176.abrupt("return", (_this101.handleError(l, u), o.d(Mt, "config is ".concat(JSON.stringify(u, null, 2))), Jr(u)));
                case 13:
                  _context176.prev = 13;
                  _context176.t0 = _context176["catch"](6);
                  _context176.next = 17;
                  return l.text();
                case 17:
                  h = _context176.sent;
                  throw o.e(Mt, "json error", _context176.t0.message, h), g.APIErrors.ServerErrors(l.status, m.INIT, h);
                case 19:
                  _context176.next = 25;
                  break;
                case 21:
                  _context176.prev = 21;
                  _context176.t1 = _context176["catch"](2);
                  _u = _context176.t1;
                  throw ["Failed to fetch", "NetworkError", "ECONNRESET"].some(function (h) {
                    return _u.message.includes(h);
                  }) ? g.APIErrors.EndpointUnreachable(m.INIT, _u.message) : _u;
                case 25:
                case "end":
                  return _context176.stop();
              }
            }, _callee175, null, [[2, 21], [6, 13]]);
          })();
        });
      }
    }]);
    return At;
  }();
function jr(n, e, t, i) {
  try {
    var _r20 = new URL("/init", n);
    return i && i.trim().length > 0 && _r20.searchParams.set("region", i.trim()), _r20.searchParams.set("peer_id", e), _r20.searchParams.set("user_agent_v2", t), _r20.toString();
  } catch (r) {
    var s = r;
    throw o.e(Mt, s.name, s.message), s;
  }
}
function Jr(n) {
  var e;
  return D(S({}, n), {
    rtcConfiguration: D(S({}, n.rtcConfiguration), {
      iceServers: (e = n.rtcConfiguration) == null ? void 0 : e.ice_servers
    })
  });
}
var ce;
(function (i) {
  i.FLAG_SERVER_SUB_DEGRADATION = "subscribeDegradation", i.FLAG_SERVER_SIMULCAST = "simulcast", i.FLAG_NON_WEBRTC_DISABLE_OFFER = "nonWebRTCDisableOffer";
})(ce || (ce = {}));
var Pt = /*#__PURE__*/function () {
  function Pt(e) {
    var _this102 = this;
    _classCallCheck(this, Pt);
    this.TAG = "[SIGNAL]: ";
    this.pongResponseTimes = new fe(Wi);
    this.isJoinCompleted = !1;
    this.pendingTrickle = [];
    this.socket = null;
    this.callbacks = new Map();
    this._isConnected = !1;
    this.id = 0;
    this.onCloseHandler = function () {};
    this.offlineListener = function () {
      o.d(_this102.TAG, "Window network offline"), _this102.setIsConnected(!1, "Window network offline");
    };
    this.onlineListener = function () {
      o.d(_this102.TAG, "Window network online"), _this102.observer.onNetworkOnline();
    };
    this.observer = e, window.addEventListener("offline", this.offlineListener), window.addEventListener("online", this.onlineListener), this.onMessageHandler = this.onMessageHandler.bind(this);
  }
  _createClass(Pt, [{
    key: "isConnected",
    get: function get() {
      return this._isConnected;
    }
  }, {
    key: "setIsConnected",
    value: function setIsConnected(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      o.d(this.TAG, "isConnected set id: ".concat(this.id, ", oldValue: ").concat(this._isConnected, ", newValue: ").concat(e)), this._isConnected !== e && (this._isConnected && !e ? (this._isConnected = e, this.rejectPendingCalls(t), this.observer.onOffline(t)) : !this._isConnected && e && (this._isConnected = e, this.observer.onOnline()));
    }
  }, {
    key: "getPongResponseTimes",
    value: function getPongResponseTimes() {
      return this.pongResponseTimes.toList();
    }
  }, {
    key: "internalCall",
    value: function internalCall(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee176() {
        var _this103 = this;
        var s, i, r, _d8;
        return _regeneratorRuntime().wrap(function _callee176$(_context177) {
          while (1) switch (_context177.prev = _context177.next) {
            case 0:
              i = (0, _uuid.v4)(), r = {
                method: e,
                params: t,
                id: i,
                jsonrpc: "2.0"
              };
              (s = this.socket) == null || s.send(JSON.stringify(r));
              _context177.prev = 2;
              _context177.next = 5;
              return new Promise(function (d, l) {
                _this103.callbacks.set(i, {
                  resolve: d,
                  reject: l,
                  metadata: {
                    method: e
                  }
                });
              });
            case 5:
              return _context177.abrupt("return", _context177.sent);
            case 8:
              _context177.prev = 8;
              _context177.t0 = _context177["catch"](2);
              if (!(_context177.t0 instanceof T)) {
                _context177.next = 12;
                break;
              }
              throw _context177.t0;
            case 12:
              _d8 = _context177.t0;
              throw g.WebsocketMethodErrors.ServerErrors(Number(_d8.code), Lt(e), _d8.message);
            case 14:
            case "end":
              return _context177.stop();
          }
        }, _callee176, this, [[2, 8]]);
      }));
    }
  }, {
    key: "notify",
    value: function notify(e, t) {
      var r, s;
      var i = {
        method: e,
        params: t
      };
      ((r = this.socket) == null ? void 0 : r.readyState) === WebSocket.OPEN && ((s = this.socket) == null || s.send(JSON.stringify(i)));
    }
  }, {
    key: "open",
    value: function open(e) {
      var _this104 = this;
      return new Promise(function (t, i) {
        var r = !1;
        _this104.socket && (_this104.socket.close(), _this104.socket.removeEventListener("close", _this104.onCloseHandler), _this104.socket.removeEventListener("message", _this104.onMessageHandler)), _this104.socket = new WebSocket(e);
        var s = function s(d) {
          o.e(_this104.TAG, "Error from websocket", d), r = !0, i(g.WebSocketConnectionErrors.FailedToConnect(m.JOIN, "Error opening websocket connection"));
        };
        _this104.onCloseHandler = function (d) {
          o.e("Websocket closed code=".concat(d.code)), r ? _this104.setIsConnected(!1, "code: ".concat(d.code).concat(d.code !== 1e3 ? ", unexpected websocket close" : "")) : (r = !0, i(g.WebSocketConnectionErrors.AbnormalClose(m.JOIN, "Error opening websocket connection - websocket closed unexpectedly with code=".concat(d.code))));
        }, _this104.socket.addEventListener("error", s);
        var a = function a() {
          var d, l;
          r = !0, t(), _this104.setIsConnected(!0), _this104.id++, (d = _this104.socket) == null || d.removeEventListener("open", a), (l = _this104.socket) == null || l.removeEventListener("error", s), _this104.pingPongLoop(_this104.id);
        };
        _this104.socket.addEventListener("open", a), _this104.socket.addEventListener("close", _this104.onCloseHandler), _this104.socket.addEventListener("message", _this104.onMessageHandler);
      });
    }
  }, {
    key: "close",
    value: function close() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee177() {
        return _regeneratorRuntime().wrap(function _callee177$(_context178) {
          while (1) switch (_context178.prev = _context178.next) {
            case 0:
              window.removeEventListener("offline", this.offlineListener), window.removeEventListener("online", this.onlineListener), this.socket ? (this.socket.close(1e3, "Normal Close"), this.setIsConnected(!1, "code: 1000, normal websocket close"), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)) : this.setIsConnected(!1, "websocket not connected yet");
            case 1:
            case "end":
              return _context178.stop();
          }
        }, _callee177, this);
      }));
    }
  }, {
    key: "join",
    value: function join(e, t, i, r, s, a) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee178() {
        var _this105 = this;
        var d, l;
        return _regeneratorRuntime().wrap(function _callee178$(_context179) {
          while (1) switch (_context179.prev = _context179.next) {
            case 0:
              if (this.isConnected) {
                _context179.next = 2;
                break;
              }
              throw g.WebSocketConnectionErrors.WebSocketConnectionLost(m.JOIN, "Failed to send join over WS connection");
            case 2:
              d = {
                name: e,
                disableVidAutoSub: i,
                data: t,
                offer: a,
                server_sub_degrade: r,
                simulcast: s
              };
              _context179.next = 5;
              return this.internalCall(b.JOIN, d);
            case 5:
              l = _context179.sent;
              return _context179.abrupt("return", (this.isJoinCompleted = !0, this.pendingTrickle.forEach(function (_ref26) {
                var u = _ref26.target,
                  h = _ref26.candidate;
                return _this105.trickle(u, h);
              }), this.pendingTrickle.length = 0, o.d(this.TAG, "join: response=".concat(JSON.stringify(l, null, 1))), l));
            case 7:
            case "end":
              return _context179.stop();
          }
        }, _callee178, this);
      }));
    }
  }, {
    key: "trickle",
    value: function trickle(e, t) {
      this.isJoinCompleted ? this.notify(b.TRICKLE, {
        target: e,
        candidate: t
      }) : this.pendingTrickle.push({
        target: e,
        candidate: t
      });
    }
  }, {
    key: "offer",
    value: function offer(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee179() {
        return _regeneratorRuntime().wrap(function _callee179$(_context180) {
          while (1) switch (_context180.prev = _context180.next) {
            case 0:
              _context180.next = 2;
              return this.call(b.OFFER, {
                desc: e,
                tracks: Object.fromEntries(t)
              });
            case 2:
              return _context180.abrupt("return", _context180.sent);
            case 3:
            case "end":
              return _context180.stop();
          }
        }, _callee179, this);
      }));
    }
  }, {
    key: "answer",
    value: function answer(e) {
      this.notify(b.ANSWER, {
        desc: e
      });
    }
  }, {
    key: "trackUpdate",
    value: function trackUpdate(e) {
      this.notify(b.TRACK_UPDATE, {
        version: "1.0",
        tracks: Object.fromEntries(e)
      });
    }
  }, {
    key: "broadcast",
    value: function broadcast(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee180() {
        return _regeneratorRuntime().wrap(function _callee180$(_context181) {
          while (1) switch (_context181.prev = _context181.next) {
            case 0:
              _context181.next = 2;
              return this.call(b.BROADCAST, S({
                version: "1.0"
              }, e.toSignalParams()));
            case 2:
              return _context181.abrupt("return", _context181.sent);
            case 3:
            case "end":
              return _context181.stop();
          }
        }, _callee180, this);
      }));
    }
  }, {
    key: "leave",
    value: function leave() {
      this.notify(b.LEAVE, {
        version: "1.0"
      });
    }
  }, {
    key: "endRoom",
    value: function endRoom(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee181() {
        return _regeneratorRuntime().wrap(function _callee181$(_context182) {
          while (1) switch (_context182.prev = _context182.next) {
            case 0:
              _context182.next = 2;
              return this.call(b.END_ROOM, {
                lock: e,
                reason: t
              });
            case 2:
            case "end":
              return _context182.stop();
          }
        }, _callee181, this);
      }));
    }
  }, {
    key: "sendEvent",
    value: function sendEvent(e) {
      if (!this.isConnected) throw Error("".concat(this.TAG, " not connected. Could not send event ").concat(e));
      this.notify(b.ANALYTICS, e.toSignalParams());
    }
  }, {
    key: "ping",
    value: function ping(e) {
      var t = Date.now(),
        i = new Promise(function (s) {
          setTimeout(function () {
            s(Date.now() - t);
          }, e + 1);
        }),
        r = this.internalCall(b.PING, {
          timestamp: t
        }).then(function () {
          return Date.now() - t;
        }).catch(function () {
          return Date.now() - t;
        });
      return Promise.race([i, r]);
    }
  }, {
    key: "requestRoleChange",
    value: function requestRoleChange(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee182() {
        return _regeneratorRuntime().wrap(function _callee182$(_context183) {
          while (1) switch (_context183.prev = _context183.next) {
            case 0:
              _context183.next = 2;
              return this.call(b.ROLE_CHANGE_REQUEST, e);
            case 2:
            case "end":
              return _context183.stop();
          }
        }, _callee182, this);
      }));
    }
  }, {
    key: "requestBulkRoleChange",
    value: function requestBulkRoleChange(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee183() {
        return _regeneratorRuntime().wrap(function _callee183$(_context184) {
          while (1) switch (_context184.prev = _context184.next) {
            case 0:
              _context184.next = 2;
              return this.call(b.ROLE_CHANGE_REQUEST, e);
            case 2:
            case "end":
              return _context184.stop();
          }
        }, _callee183, this);
      }));
    }
  }, {
    key: "acceptRoleChangeRequest",
    value: function acceptRoleChangeRequest(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee184() {
        return _regeneratorRuntime().wrap(function _callee184$(_context185) {
          while (1) switch (_context185.prev = _context185.next) {
            case 0:
              _context185.next = 2;
              return this.call(b.ROLE_CHANGE, e);
            case 2:
            case "end":
              return _context185.stop();
          }
        }, _callee184, this);
      }));
    }
  }, {
    key: "requestTrackStateChange",
    value: function requestTrackStateChange(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee185() {
        return _regeneratorRuntime().wrap(function _callee185$(_context186) {
          while (1) switch (_context186.prev = _context186.next) {
            case 0:
              _context186.next = 2;
              return this.call(b.TRACK_UPDATE_REQUEST, e);
            case 2:
            case "end":
              return _context186.stop();
          }
        }, _callee185, this);
      }));
    }
  }, {
    key: "requestMultiTrackStateChange",
    value: function requestMultiTrackStateChange(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee186() {
        return _regeneratorRuntime().wrap(function _callee186$(_context187) {
          while (1) switch (_context187.prev = _context187.next) {
            case 0:
              _context187.next = 2;
              return this.call(b.CHANGE_TRACK_MUTE_STATE_REQUEST, e);
            case 2:
            case "end":
              return _context187.stop();
          }
        }, _callee186, this);
      }));
    }
  }, {
    key: "removePeer",
    value: function removePeer(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee187() {
        return _regeneratorRuntime().wrap(function _callee187$(_context188) {
          while (1) switch (_context188.prev = _context188.next) {
            case 0:
              _context188.next = 2;
              return this.call(b.PEER_LEAVE_REQUEST, e);
            case 2:
            case "end":
              return _context188.stop();
          }
        }, _callee187, this);
      }));
    }
  }, {
    key: "startRTMPOrRecording",
    value: function startRTMPOrRecording(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee188() {
        return _regeneratorRuntime().wrap(function _callee188$(_context189) {
          while (1) switch (_context189.prev = _context189.next) {
            case 0:
              _context189.next = 2;
              return this.call(b.START_RTMP_OR_RECORDING_REQUEST, S({
                version: "1.0"
              }, e));
            case 2:
            case "end":
              return _context189.stop();
          }
        }, _callee188, this);
      }));
    }
  }, {
    key: "stopRTMPAndRecording",
    value: function stopRTMPAndRecording() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee189() {
        return _regeneratorRuntime().wrap(function _callee189$(_context190) {
          while (1) switch (_context190.prev = _context190.next) {
            case 0:
              _context190.next = 2;
              return this.call(b.STOP_RTMP_AND_RECORDING_REQUEST, {
                version: "1.0"
              });
            case 2:
            case "end":
              return _context190.stop();
          }
        }, _callee189, this);
      }));
    }
  }, {
    key: "startHLSStreaming",
    value: function startHLSStreaming(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee190() {
        return _regeneratorRuntime().wrap(function _callee190$(_context191) {
          while (1) switch (_context191.prev = _context191.next) {
            case 0:
              _context191.next = 2;
              return this.call(b.START_HLS_STREAMING, S({
                version: "1.0"
              }, e));
            case 2:
            case "end":
              return _context191.stop();
          }
        }, _callee190, this);
      }));
    }
  }, {
    key: "stopHLSStreaming",
    value: function stopHLSStreaming(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee191() {
        return _regeneratorRuntime().wrap(function _callee191$(_context192) {
          while (1) switch (_context192.prev = _context192.next) {
            case 0:
              _context192.next = 2;
              return this.call(b.STOP_HLS_STREAMING, S({
                version: "1.0"
              }, e));
            case 2:
            case "end":
              return _context192.stop();
          }
        }, _callee191, this);
      }));
    }
  }, {
    key: "sendHLSTimedMetadata",
    value: function sendHLSTimedMetadata(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee192() {
        return _regeneratorRuntime().wrap(function _callee192$(_context193) {
          while (1) switch (_context193.prev = _context193.next) {
            case 0:
              _context193.next = 2;
              return this.call(b.HLS_TIMED_METADATA, S({
                version: "1.0"
              }, e));
            case 2:
            case "end":
              return _context193.stop();
          }
        }, _callee192, this);
      }));
    }
  }, {
    key: "updatePeer",
    value: function updatePeer(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee193() {
        return _regeneratorRuntime().wrap(function _callee193$(_context194) {
          while (1) switch (_context194.prev = _context194.next) {
            case 0:
              _context194.next = 2;
              return this.call(b.UPDATE_PEER_METADATA, S({
                version: "1.0"
              }, e));
            case 2:
            case "end":
              return _context194.stop();
          }
        }, _callee193, this);
      }));
    }
  }, {
    key: "setSessionMetadata",
    value: function setSessionMetadata(e) {
      if (!this.isConnected) throw g.WebSocketConnectionErrors.WebSocketConnectionLost(m.RECONNECT_SIGNAL, "Failed to set session store value due to network disconnection");
      return this.call(b.SET_METADATA, S({
        version: "1.1"
      }, e));
    }
  }, {
    key: "listenMetadataChange",
    value: function listenMetadataChange(e) {
      if (!this.isConnected) throw g.WebSocketConnectionErrors.WebSocketConnectionLost(m.RECONNECT_SIGNAL, "Failed to observe session store key due to network disconnection");
      return this.call(b.LISTEN_METADATA_CHANGE, {
        version: "1.1",
        keys: e
      });
    }
  }, {
    key: "getSessionMetadata",
    value: function getSessionMetadata(e) {
      if (!this.isConnected) throw g.WebSocketConnectionErrors.WebSocketConnectionLost(m.RECONNECT_SIGNAL, "Failed to set session store value due to network disconnection");
      return this.call(b.GET_METADATA, {
        key: e,
        version: "1.1"
      });
    }
  }, {
    key: "onMessageHandler",
    value: function onMessageHandler(e) {
      var t = e.data,
        i = JSON.parse(t);
      if (i.id) this.handleResponseWithId(i);else if (i.method) this.handleResponseWithMethod(i);else throw Error("WebSocket message has no 'method' or 'id' field, message=".concat(i));
    }
  }, {
    key: "handleResponseWithId",
    value: function handleResponseWithId(e) {
      var t = e,
        i = t.id;
      if (this.callbacks.has(i)) {
        var _r21 = this.callbacks.get(i);
        this.callbacks.delete(i), t.result ? _r21.resolve(t.result) : _r21.reject(t.error);
      } else this.observer.onNotification(t);
    }
  }, {
    key: "handleResponseWithMethod",
    value: function handleResponseWithMethod(e) {
      switch (e.method) {
        case b.OFFER:
          this.observer.onOffer(e.params);
          break;
        case b.TRICKLE:
          this.observer.onTrickle(e.params);
          break;
        case b.SERVER_ERROR:
          this.observer.onServerError(g.WebsocketMethodErrors.ServerErrors(Number(e.params.code), m.NONE, e.params.message));
          break;
        case b.SERVER_WARNING:
          o.w(this.TAG, e.params);
          break;
        default:
          this.observer.onNotification(e);
          break;
      }
    }
  }, {
    key: "rejectPendingCalls",
    value: function rejectPendingCalls() {
      var _this106 = this;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      this.callbacks.forEach(function (t, i) {
        var r, s, a, d;
        ((r = t.metadata) == null ? void 0 : r.method) !== b.PING && (o.e(_this106.TAG, "rejecting pending callback ".concat((s = t.metadata) == null ? void 0 : s.method, ", id=").concat(i)), t.reject(g.WebSocketConnectionErrors.WebSocketConnectionLost(((a = t.metadata) == null ? void 0 : a.method) ? Lt((d = t.metadata) == null ? void 0 : d.method) : m.RECONNECT_SIGNAL, e)), _this106.callbacks.delete(i));
      });
    }
  }, {
    key: "pingPongLoop",
    value: function pingPongLoop(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee194() {
        var _this107 = this;
        var i, r, t, s;
        return _regeneratorRuntime().wrap(function _callee194$(_context195) {
          while (1) switch (_context195.prev = _context195.next) {
            case 0:
              t = ((i = window.HMS) == null ? void 0 : i.PING_TIMEOUT) || Bi;
              if (!this.isConnected) {
                _context195.next = 6;
                break;
              }
              _context195.next = 4;
              return this.ping(t);
            case 4:
              s = _context195.sent;
              this.pongResponseTimes.enqueue(s), s > t ? (o.d(this.TAG, "Pong timeout ".concat(e, ", pageHidden=").concat(Mi())), this.id === e && this.setIsConnected(!1, "ping pong failure")) : setTimeout(function () {
                return _this107.pingPongLoop(e);
              }, ((r = window.HMS) == null ? void 0 : r.PING_INTERVAL) || $i);
            case 6:
            case "end":
              return _context195.stop();
          }
        }, _callee194, this);
      }));
    }
  }, {
    key: "call",
    value: function call(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee195() {
        var i, r, s, l;
        return _regeneratorRuntime().wrap(function _callee195$(_context196) {
          while (1) switch (_context196.prev = _context196.next) {
            case 0:
              i = 3, r = g.WebsocketMethodErrors.ServerErrors(500, e, "Default ".concat(e, " error"));
              s = 1;
            case 2:
              if (!(s <= i)) {
                _context196.next = 20;
                break;
              }
              _context196.prev = 3;
              o.d(this.TAG, "Try number ".concat(s, " sending ").concat(e), t);
              _context196.next = 7;
              return this.internalCall(e, t);
            case 7:
              return _context196.abrupt("return", _context196.sent);
            case 10:
              _context196.prev = 10;
              _context196.t0 = _context196["catch"](3);
              if (!(r = _context196.t0, o.e(this.TAG, "Failed sending ".concat(e, " try: ").concat(s), {
                method: e,
                params: t,
                error: r
              }), !(parseInt("".concat(r.code / 100)) === 5 || r.code === 429))) {
                _context196.next = 14;
                break;
              }
              return _context196.abrupt("break", 20);
            case 14:
              l = (2 + Math.random() * 2) * 1e3;
              _context196.next = 17;
              return $(l);
            case 17:
              s++;
              _context196.next = 2;
              break;
            case 20:
              throw o.e("Sending ".concat(e, " over WS failed after ").concat(Math.min(s, i), " retries"), {
                method: e,
                params: t,
                error: r
              }), r;
            case 21:
            case "end":
              return _context196.stop();
          }
        }, _callee195, this, [[3, 10]]);
      }));
    }
  }]);
  return Pt;
}();
var lr = function lr() {
  if (!B || typeof navigator.connection == "undefined") return;
  var n = navigator.connection;
  return {
    downlink: n.downlink,
    downlinkMax: n.downlinkMax,
    effectiveType: n.effectiveType,
    rtt: n.rtt,
    saveData: n.saveData,
    type: n.type
  };
};
var P = "[HMSTransport]:",
  bt = /*#__PURE__*/function () {
    function bt(e, t, i, r, s, a) {
      var _this108 = this;
      _classCallCheck(this, bt);
      this.observer = e;
      this.deviceManager = t;
      this.store = i;
      this.eventBus = r;
      this.analyticsEventsService = s;
      this.analyticsTimer = a;
      this.state = L.Disconnected;
      this.trackStates = new Map();
      this.publishConnection = null;
      this.subscribeConnection = null;
      this.maxSubscribeBitrate = 0;
      this.joinRetryCount = 0;
      this.callbacks = new Map();
      this.signalObserver = {
        onOffer: function onOffer(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee196() {
            var _iterator21, _step21, _i14, _t13, _i15;
            return _regeneratorRuntime().wrap(function _callee196$(_context197) {
              while (1) switch (_context197.prev = _context197.next) {
                case 0:
                  _context197.prev = 0;
                  if (this.subscribeConnection) {
                    _context197.next = 3;
                    break;
                  }
                  return _context197.abrupt("return");
                case 3:
                  _context197.next = 5;
                  return this.subscribeConnection.setRemoteDescription(e);
                case 5:
                  o.d(P, "[SUBSCRIBE] Adding ".concat(this.subscribeConnection.candidates.length, " ice-candidates"), this.subscribeConnection.candidates);
                  _iterator21 = _createForOfIteratorHelper(this.subscribeConnection.candidates);
                  _context197.prev = 7;
                  _iterator21.s();
                case 9:
                  if ((_step21 = _iterator21.n()).done) {
                    _context197.next = 15;
                    break;
                  }
                  _i14 = _step21.value;
                  _context197.next = 13;
                  return this.subscribeConnection.addIceCandidate(_i14);
                case 13:
                  _context197.next = 9;
                  break;
                case 15:
                  _context197.next = 20;
                  break;
                case 17:
                  _context197.prev = 17;
                  _context197.t0 = _context197["catch"](7);
                  _iterator21.e(_context197.t0);
                case 20:
                  _context197.prev = 20;
                  _iterator21.f();
                  return _context197.finish(20);
                case 23:
                  this.subscribeConnection.candidates.length = 0;
                  _context197.next = 26;
                  return this.subscribeConnection.createAnswer();
                case 26:
                  _t13 = _context197.sent;
                  _context197.next = 29;
                  return this.subscribeConnection.setLocalDescription(_t13);
                case 29:
                  this.signal.answer(_t13);
                  o.d(P, "[role=SUBSCRIBE] onOffer renegotiation DONE \u2705");
                  _context197.next = 37;
                  break;
                case 33:
                  _context197.prev = 33;
                  _context197.t1 = _context197["catch"](0);
                  o.d(P, "[role=SUBSCRIBE] onOffer renegotiation FAILED \u274C", _context197.t1), this.state = L.Failed;
                  _context197.t1 instanceof T ? _i15 = _context197.t1 : _i15 = g.GenericErrors.Unknown(m.PUBLISH, _context197.t1.message), this.observer.onFailure(_i15), this.eventBus.analytics.publish(w.subscribeFail(_i15));
                case 37:
                case "end":
                  return _context197.stop();
              }
            }, _callee196, this, [[0, 33], [7, 17, 20, 23]]);
          }));
        },
        onTrickle: function onTrickle(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee197() {
            var t;
            return _regeneratorRuntime().wrap(function _callee197$(_context198) {
              while (1) switch (_context198.prev = _context198.next) {
                case 0:
                  t = e.target === U.Publish ? this.publishConnection : this.subscribeConnection;
                  if (!(t == null ? void 0 : t.remoteDescription)) {
                    _context198.next = 6;
                    break;
                  }
                  _context198.next = 4;
                  return t.addIceCandidate(e.candidate);
                case 4:
                  _context198.next = 7;
                  break;
                case 6:
                  t == null || t.candidates.push(e.candidate);
                case 7:
                case "end":
                  return _context198.stop();
              }
            }, _callee197, this);
          }));
        },
        onNotification: function onNotification(e) {
          return _this108.observer.onNotification(e);
        },
        onServerError: function onServerError(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee198() {
            return _regeneratorRuntime().wrap(function _callee198$(_context199) {
              while (1) switch (_context199.prev = _context199.next) {
                case 0:
                  _context199.next = 2;
                  return this.observer.onStateChange(L.Failed, e);
                case 2:
                case "end":
                  return _context199.stop();
              }
            }, _callee198, this);
          }));
        },
        onFailure: function onFailure(e) {
          _this108.joinParameters && _this108.retryScheduler.schedule({
            category: R.SignalDisconnect,
            error: e,
            task: _this108.retrySignalDisconnectTask,
            originalState: _this108.state
          });
        },
        onOffline: function onOffline(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee199() {
            return _regeneratorRuntime().wrap(function _callee199$(_context200) {
              while (1) switch (_context200.prev = _context200.next) {
                case 0:
                  o.d(P, "socket offline", L[this.state]);
                  try {
                    this.state !== L.Leaving && this.joinParameters && this.retryScheduler.schedule({
                      category: R.SignalDisconnect,
                      error: g.WebSocketConnectionErrors.WebSocketConnectionLost(m.RECONNECT_SIGNAL, e),
                      task: this.retrySignalDisconnectTask,
                      originalState: this.state
                    });
                  } catch (t) {
                    console.error(t);
                  }
                case 2:
                case "end":
                  return _context200.stop();
              }
            }, _callee199, this);
          }));
        },
        onOnline: function onOnline() {
          var e;
          o.d(P, "socket online", L[_this108.state]), _this108.analyticsSignalTransport.flushFailedEvents((e = _this108.store.getLocalPeer()) == null ? void 0 : e.peerId);
        },
        onNetworkOnline: function onNetworkOnline() {
          _this108.analyticsEventsService.flushFailedClientEvents();
        }
      };
      this.signal = new Pt(this.signalObserver);
      this.analyticsSignalTransport = new ci(this.signal);
      this.publishConnectionObserver = {
        onRenegotiationNeeded: function onRenegotiationNeeded() {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee200() {
            return _regeneratorRuntime().wrap(function _callee200$(_context201) {
              while (1) switch (_context201.prev = _context201.next) {
                case 0:
                  _context201.next = 2;
                  return this.performPublishRenegotiation();
                case 2:
                case "end":
                  return _context201.stop();
              }
            }, _callee200, this);
          }));
        },
        onIceConnectionChange: function onIceConnectionChange(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee201() {
            return _regeneratorRuntime().wrap(function _callee201$(_context202) {
              while (1) switch (_context202.prev = _context202.next) {
                case 0:
                  (e === "disconnected" ? o.w.bind(o) : o.d.bind(o))(P, "Publish ice connection state change: ".concat(e));
                case 1:
                case "end":
                  return _context202.stop();
              }
            }, _callee201);
          }));
        },
        onConnectionStateChange: function onConnectionStateChange(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee202() {
            var _this109 = this;
            var i, r, s, a, d;
            return _regeneratorRuntime().wrap(function _callee202$(_context203) {
              while (1) switch (_context203.prev = _context203.next) {
                case 0:
                  (e === "disconnected" ? o.w.bind(o) : o.d.bind(o))(P, "Publish connection state change: ".concat(e));
                  e === "connected" && ((i = this.publishConnection) == null || i.logSelectedIceCandidatePairs());
                  e === "disconnected" && setTimeout(function () {
                    var l, u, h, p, v;
                    ((l = _this109.publishConnection) == null ? void 0 : l.connectionState) === "disconnected" && _this109.handleIceConnectionFailure(U.Publish, g.WebrtcErrors.ICEDisconnected(m.PUBLISH, "local candidate - ".concat((h = (u = _this109.publishConnection) == null ? void 0 : u.selectedCandidatePair) == null ? void 0 : h.local.candidate, "; remote candidate - ").concat((v = (p = _this109.publishConnection) == null ? void 0 : p.selectedCandidatePair) == null ? void 0 : v.remote.candidate)));
                  }, Ft);
                  _context203.t0 = e === "failed";
                  if (!_context203.t0) {
                    _context203.next = 7;
                    break;
                  }
                  _context203.next = 7;
                  return this.handleIceConnectionFailure(U.Publish, g.WebrtcErrors.ICEFailure(m.PUBLISH, "local candidate - ".concat((s = (r = this.publishConnection) == null ? void 0 : r.selectedCandidatePair) == null ? void 0 : s.local.candidate, "; remote candidate - ").concat((d = (a = this.publishConnection) == null ? void 0 : a.selectedCandidatePair) == null ? void 0 : d.remote.candidate)));
                case 7:
                case "end":
                  return _context203.stop();
              }
            }, _callee202, this);
          }));
        }
      };
      this.subscribeConnectionObserver = {
        onApiChannelMessage: function onApiChannelMessage(e) {
          _this108.observer.onNotification(JSON.parse(e));
        },
        onTrackAdd: function onTrackAdd(e) {
          o.d(P, "[Subscribe] onTrackAdd", "".concat(e)), _this108.observer.onTrackAdd(e);
        },
        onTrackRemove: function onTrackRemove(e) {
          o.d(P, "[Subscribe] onTrackRemove", "".concat(e)), _this108.observer.onTrackRemove(e);
        },
        onIceConnectionChange: function onIceConnectionChange(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee203() {
            var _i16;
            return _regeneratorRuntime().wrap(function _callee203$(_context204) {
              while (1) switch (_context204.prev = _context204.next) {
                case 0:
                  if ((e === "disconnected" ? o.w.bind(o) : o.d.bind(o))(P, "Subscribe ice connection state change: ".concat(e)), e === "connected") {
                    _i16 = this.callbacks.get(De);
                    this.callbacks.delete(De), _i16 && _i16.promise.resolve(!0);
                  }
                case 1:
                case "end":
                  return _context204.stop();
              }
            }, _callee203, this);
          }));
        },
        onConnectionStateChange: function onConnectionStateChange(e) {
          return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee204() {
            var _this110 = this;
            var i, r, s, a;
            return _regeneratorRuntime().wrap(function _callee204$(_context205) {
              while (1) switch (_context205.prev = _context205.next) {
                case 0:
                  (e === "disconnected" ? o.w.bind(o) : o.d.bind(o))(P, "Subscribe connection state change: ".concat(e));
                  _context205.t0 = e === "failed";
                  if (!_context205.t0) {
                    _context205.next = 5;
                    break;
                  }
                  _context205.next = 5;
                  return this.handleIceConnectionFailure(U.Subscribe, g.WebrtcErrors.ICEFailure(m.SUBSCRIBE, "local candidate - ".concat((r = (i = this.subscribeConnection) == null ? void 0 : i.selectedCandidatePair) == null ? void 0 : r.local.candidate, "; remote candidate - ").concat((a = (s = this.subscribeConnection) == null ? void 0 : s.selectedCandidatePair) == null ? void 0 : a.remote.candidate)));
                case 5:
                  e === "disconnected" && setTimeout(function () {
                    var d, l, u, h, p;
                    ((d = _this110.subscribeConnection) == null ? void 0 : d.connectionState) === "disconnected" && _this110.handleIceConnectionFailure(U.Subscribe, g.WebrtcErrors.ICEDisconnected(m.SUBSCRIBE, "local candidate - ".concat((u = (l = _this110.subscribeConnection) == null ? void 0 : l.selectedCandidatePair) == null ? void 0 : u.local.candidate, "; remote candidate - ").concat((p = (h = _this110.subscribeConnection) == null ? void 0 : h.selectedCandidatePair) == null ? void 0 : p.remote.candidate)));
                  }, Ft);
                  e === "connected" && this.handleSubscribeConnectionConnected();
                case 7:
                case "end":
                  return _context205.stop();
              }
            }, _callee204, this);
          }));
        }
      };
      this.handleLocalRoleUpdate = function (i) {
        return c(_this108, [i], function (_ref27) {
          var _this111 = this;
          var e = _ref27.oldRole,
            t = _ref27.newRole;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee205() {
            return _regeneratorRuntime().wrap(function _callee205$(_context206) {
              while (1) switch (_context206.prev = _context206.next) {
                case 0:
                  _context206.t0 = !(!_this111.doesRoleNeedWebRTC(e) && _this111.doesRoleNeedWebRTC(t));
                  if (_context206.t0) {
                    _context206.next = 6;
                    break;
                  }
                  o.d(P, "Local peer role updated to webrtc role, creating PeerConnections and performing inital publish negotiation \u23F3");
                  _this111.createPeerConnections();
                  _context206.next = 6;
                  return _this111.negotiateOnFirstPublish();
                case 6:
                case "end":
                  return _context206.stop();
              }
            }, _callee205);
          })();
        });
      };
      this.retryPublishIceFailedTask = function () {
        return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee206() {
          var _this112 = this;
          var _e6;
          return _regeneratorRuntime().wrap(function _callee206$(_context207) {
            while (1) switch (_context207.prev = _context207.next) {
              case 0:
                if (!this.publishConnection) {
                  _context207.next = 6;
                  break;
                }
                _e6 = new Promise(function (t, i) {
                  _this112.callbacks.set(_e, {
                    promise: {
                      resolve: t,
                      reject: i
                    },
                    action: m.RESTART_ICE,
                    extra: {}
                  });
                });
                _context207.next = 4;
                return this.performPublishRenegotiation({
                  iceRestart: this.publishConnection.connectionState !== "connected"
                });
              case 4:
                _context207.next = 6;
                return _e6;
              case 6:
                return _context207.abrupt("return", !0);
              case 7:
              case "end":
                return _context207.stop();
            }
          }, _callee206, this);
        }));
      };
      this.retrySubscribeIceFailedTask = function () {
        return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee207() {
          var _this113 = this;
          var _e7, _t14;
          return _regeneratorRuntime().wrap(function _callee207$(_context208) {
            while (1) switch (_context208.prev = _context208.next) {
              case 0:
                if (!(this.subscribeConnection && this.subscribeConnection.connectionState !== "connected")) {
                  _context208.next = 3;
                  break;
                }
                _e7 = new Promise(function (i, r) {
                  _this113.callbacks.set(De, {
                    promise: {
                      resolve: i,
                      reject: r
                    },
                    action: m.RESTART_ICE,
                    extra: {}
                  });
                }), _t14 = new Promise(function (i) {
                  setTimeout(i, Ki, !1);
                });
                return _context208.abrupt("return", Promise.race([_e7, _t14]));
              case 3:
                return _context208.abrupt("return", !0);
              case 4:
              case "end":
                return _context208.stop();
            }
          }, _callee207, this);
        }));
      };
      this.retrySignalDisconnectTask = function () {
        return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee208() {
          var t, e;
          return _regeneratorRuntime().wrap(function _callee208$(_context209) {
            while (1) switch (_context209.prev = _context209.next) {
              case 0:
                o.d(P, "retrySignalDisconnectTask", {
                  signalConnected: this.signal.isConnected
                });
                _context209.t0 = this.signal.isConnected;
                if (_context209.t0) {
                  _context209.next = 5;
                  break;
                }
                _context209.next = 5;
                return this.internalConnect(this.joinParameters.authToken, this.joinParameters.endpoint, this.joinParameters.peerId);
              case 5:
                if (!((t = this.store.getRoom()) == null ? void 0 : t.joinedAt)) {
                  _context209.next = 14;
                  break;
                }
                _context209.t2 = this.signal.isConnected;
                if (!_context209.t2) {
                  _context209.next = 11;
                  break;
                }
                _context209.next = 10;
                return this.retryPublishIceFailedTask();
              case 10:
                _context209.t2 = _context209.sent;
              case 11:
                _context209.t1 = _context209.t2;
                _context209.next = 15;
                break;
              case 14:
                _context209.t1 = this.signal.isConnected;
              case 15:
                e = _context209.t1;
                return _context209.abrupt("return", (this.signal.trackUpdate(this.trackStates), e));
              case 17:
              case "end":
                return _context209.stop();
            }
          }, _callee208, this);
        }));
      };
      var l, u;
      this.webrtcInternals = new yt(this.store, this.eventBus, (l = this.publishConnection) == null ? void 0 : l.nativeConnection, (u = this.subscribeConnection) == null ? void 0 : u.nativeConnection);
      var d = function d(h, p) {
        return c(_this108, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee209() {
          return _regeneratorRuntime().wrap(function _callee209$(_context210) {
            while (1) switch (_context210.prev = _context210.next) {
              case 0:
                _context210.t0 = h !== this.state;
                if (!_context210.t0) {
                  _context210.next = 5;
                  break;
                }
                this.state = h;
                _context210.next = 5;
                return this.observer.onStateChange(this.state, p);
              case 5:
              case "end":
                return _context210.stop();
            }
          }, _callee209, this);
        }));
      };
      this.retryScheduler = new ai(d, this.sendErrorAnalyticsEvent.bind(this)), this.eventBus.statsUpdate.subscribe(function (h) {
        var v, f;
        var p = ((f = (v = h.getLocalPeerStats()) == null ? void 0 : v.subscribe) == null ? void 0 : f.bitrate) || 0;
        _this108.maxSubscribeBitrate = Math.max(_this108.maxSubscribeBitrate, p);
      }), this.eventBus.localAudioEnabled.subscribe(function (_ref28) {
        var h = _ref28.track;
        return _this108.trackUpdate(h);
      }), this.eventBus.localVideoEnabled.subscribe(function (_ref29) {
        var h = _ref29.track;
        return _this108.trackUpdate(h);
      });
    }
    _createClass(bt, [{
      key: "getWebrtcInternals",
      value: function getWebrtcInternals() {
        return this.webrtcInternals;
      }
    }, {
      key: "isFlagEnabled",
      value: function isFlagEnabled(e) {
        var r;
        var t = (r = this.initConfig) == null ? void 0 : r.config;
        return ((t == null ? void 0 : t.enabledFlags) || []).includes(e);
      }
    }, {
      key: "preview",
      value: function preview(e, t, i, r) {
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee210() {
          var a;
          return _regeneratorRuntime().wrap(function _callee210$(_context211) {
            while (1) switch (_context211.prev = _context211.next) {
              case 0:
                _context211.next = 2;
                return this.connect(e, t, i, r, s);
              case 2:
                a = _context211.sent;
                return _context211.abrupt("return", (this.state = L.Preview, this.observer.onStateChange(this.state), a));
              case 4:
              case "end":
                return _context211.stop();
            }
          }, _callee210, this);
        }));
      }
    }, {
      key: "join",
      value: function join(e, t, i, r) {
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee211() {
          var _d9;
          return _regeneratorRuntime().wrap(function _callee211$(_context212) {
            while (1) switch (_context212.prev = _context212.next) {
              case 0:
                o.d(P, "join: started \u23F0");
                _context212.prev = 1;
                _context212.t0 = !this.signal.isConnected || !this.initConfig;
                if (!_context212.t0) {
                  _context212.next = 6;
                  break;
                }
                _context212.next = 6;
                return this.connect(e, r, t, i, s);
              case 6:
                this.validateNotDisconnected("connect");
                _context212.t1 = this.initConfig;
                if (!_context212.t1) {
                  _context212.next = 16;
                  break;
                }
                _context212.next = 11;
                return this.waitForLocalRoleAvailability();
              case 11:
                _context212.next = 13;
                return this.createConnectionsAndNegotiateJoin(i, s);
              case 13:
                _context212.next = 15;
                return this.initRtcStatsMonitor();
              case 15:
                o.d(P, "\u2705 join: Negotiated over PUBLISH connection");
              case 16:
                _context212.next = 26;
                break;
              case 18:
                _context212.prev = 18;
                _context212.t2 = _context212["catch"](1);
                o.e(P, "join: failed \u274C [token=".concat(e, "]"), _context212.t2), this.state = L.Failed;
                _d9 = _context212.t2;
                _d9.isTerminal = _d9.isTerminal || _d9.code === 500;
                _context212.next = 25;
                return this.observer.onStateChange(this.state, _d9);
              case 25:
                throw _d9;
              case 26:
                o.i(P, "\u2705 join: successful"), this.state = L.Joined, this.observer.onStateChange(this.state);
              case 27:
              case "end":
                return _context212.stop();
            }
          }, _callee211, this, [[1, 18]]);
        }));
      }
    }, {
      key: "connect",
      value: function connect(e, t, i, r) {
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee213() {
          var _this114 = this;
          var l;
          return _regeneratorRuntime().wrap(function _callee213$(_context214) {
            while (1) switch (_context214.prev = _context214.next) {
              case 0:
                this.setTransportStateForConnect(), this.joinParameters = new ri(e, i, r.name, r.metaData, t, s);
                _context214.prev = 1;
                _context214.next = 4;
                return this.internalConnect(e, t, i);
              case 4:
                return _context214.abrupt("return", _context214.sent);
              case 7:
                _context214.prev = 7;
                _context214.t0 = _context214["catch"](1);
                if (!(_context214.t0 instanceof T && ([E.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, E.WebSocketConnectionErrors.FAILED_TO_CONNECT, E.WebSocketConnectionErrors.ABNORMAL_CLOSE, E.APIErrors.ENDPOINT_UNREACHABLE].includes(_context214.t0.code) || _context214.t0.code.toString().startsWith("5") || _context214.t0.code.toString().startsWith("429")))) {
                  _context214.next = 15;
                  break;
                }
                l = function l() {
                  return c(_this114, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee212() {
                    return _regeneratorRuntime().wrap(function _callee212$(_context213) {
                      while (1) switch (_context213.prev = _context213.next) {
                        case 0:
                          _context213.next = 2;
                          return this.internalConnect(e, t, i);
                        case 2:
                          return _context213.abrupt("return", Boolean(this.initConfig && this.initConfig.endpoint));
                        case 3:
                        case "end":
                          return _context213.stop();
                      }
                    }, _callee212, this);
                  }));
                };
                _context214.next = 13;
                return this.retryScheduler.schedule({
                  category: R.ConnectFailed,
                  error: _context214.t0,
                  task: l,
                  originalState: this.state,
                  maxFailedRetries: We,
                  changeState: !1
                });
              case 13:
                _context214.next = 16;
                break;
              case 15:
                throw _context214.t0;
              case 16:
              case "end":
                return _context214.stop();
            }
          }, _callee213, this, [[1, 7]]);
        }));
      }
    }, {
      key: "leave",
      value: function leave(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee214() {
          var t, i, r;
          return _regeneratorRuntime().wrap(function _callee214$(_context215) {
            while (1) switch (_context215.prev = _context215.next) {
              case 0:
                this.retryScheduler.reset(), this.joinParameters = void 0, o.d(P, "leaving in transport");
                _context215.prev = 1;
                this.state = L.Leaving;
                (t = this.webrtcInternals) == null || t.cleanUp();
                _context215.next = 6;
                return (i = this.publishConnection) == null ? void 0 : i.close();
              case 6:
                _context215.next = 8;
                return (r = this.subscribeConnection) == null ? void 0 : r.close();
              case 8:
                if (!e) {
                  _context215.next = 10;
                  break;
                }
                try {
                  this.signal.leave(), o.d(P, "signal leave done");
                } catch (s) {
                  o.w(P, "failed to send leave on websocket to server", s);
                }
              case 10:
                this.analyticsEventsService.flushFailedClientEvents();
                this.analyticsEventsService.reset();
                _context215.next = 14;
                return this.signal.close();
              case 14:
                _context215.next = 19;
                break;
              case 16:
                _context215.prev = 16;
                _context215.t0 = _context215["catch"](1);
                this.eventBus.analytics.publish(w.disconnect(_context215.t0)), o.e(P, "leave: FAILED \u274C", _context215.t0);
              case 19:
                _context215.prev = 19;
                this.state = L.Disconnected, this.observer.onStateChange(this.state);
                return _context215.finish(19);
              case 22:
              case "end":
                return _context215.stop();
            }
          }, _callee214, this, [[1, 16, 19, 22]]);
        }));
      }
    }, {
      key: "publish",
      value: function publish(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee215() {
          var _iterator22, _step22, _t15;
          return _regeneratorRuntime().wrap(function _callee215$(_context216) {
            while (1) switch (_context216.prev = _context216.next) {
              case 0:
                _iterator22 = _createForOfIteratorHelper(e);
                _context216.prev = 1;
                _iterator22.s();
              case 3:
                if ((_step22 = _iterator22.n()).done) {
                  _context216.next = 15;
                  break;
                }
                _t15 = _step22.value;
                _context216.prev = 5;
                _context216.next = 8;
                return this.publishTrack(_t15);
              case 8:
                _context216.next = 13;
                break;
              case 10:
                _context216.prev = 10;
                _context216.t0 = _context216["catch"](5);
                this.eventBus.analytics.publish(w.publish({
                  devices: this.deviceManager.getDevices(),
                  error: _context216.t0
                }));
              case 13:
                _context216.next = 3;
                break;
              case 15:
                _context216.next = 20;
                break;
              case 17:
                _context216.prev = 17;
                _context216.t1 = _context216["catch"](1);
                _iterator22.e(_context216.t1);
              case 20:
                _context216.prev = 20;
                _iterator22.f();
                return _context216.finish(20);
              case 23:
              case "end":
                return _context216.stop();
            }
          }, _callee215, this, [[1, 17, 20, 23], [5, 10]]);
        }));
      }
    }, {
      key: "unpublish",
      value: function unpublish(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee216() {
          var _iterator23, _step23, _t16;
          return _regeneratorRuntime().wrap(function _callee216$(_context217) {
            while (1) switch (_context217.prev = _context217.next) {
              case 0:
                _iterator23 = _createForOfIteratorHelper(e);
                _context217.prev = 1;
                _iterator23.s();
              case 3:
                if ((_step23 = _iterator23.n()).done) {
                  _context217.next = 9;
                  break;
                }
                _t16 = _step23.value;
                _context217.next = 7;
                return this.unpublishTrack(_t16);
              case 7:
                _context217.next = 3;
                break;
              case 9:
                _context217.next = 14;
                break;
              case 11:
                _context217.prev = 11;
                _context217.t0 = _context217["catch"](1);
                _iterator23.e(_context217.t0);
              case 14:
                _context217.prev = 14;
                _iterator23.f();
                return _context217.finish(14);
              case 17:
              case "end":
                return _context217.stop();
            }
          }, _callee216, this, [[1, 11, 14, 17]]);
        }));
      }
    }, {
      key: "sendMessage",
      value: function sendMessage(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee217() {
          return _regeneratorRuntime().wrap(function _callee217$(_context218) {
            while (1) switch (_context218.prev = _context218.next) {
              case 0:
                _context218.next = 2;
                return this.signal.broadcast(e);
              case 2:
                return _context218.abrupt("return", _context218.sent);
              case 3:
              case "end":
                return _context218.stop();
            }
          }, _callee217, this);
        }));
      }
    }, {
      key: "trackUpdate",
      value: function trackUpdate(e) {
        var i = Array.from(this.trackStates.values()).find(function (r) {
          return e.type === r.type && e.source === r.source;
        });
        if (i) {
          var _r22 = new gt(D(S({}, i), {
            mute: !e.enabled
          }));
          this.trackStates.set(i.track_id, _r22), o.d(P, "Track Update", this.trackStates, e), this.signal.trackUpdate(new Map([[i.track_id, _r22]]));
        }
      }
    }, {
      key: "changeRole",
      value: function changeRole(e, t) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee218() {
          return _regeneratorRuntime().wrap(function _callee218$(_context219) {
            while (1) switch (_context219.prev = _context219.next) {
              case 0:
                _context219.next = 2;
                return this.signal.requestRoleChange({
                  requested_for: e.peerId,
                  role: t,
                  force: i
                });
              case 2:
              case "end":
                return _context219.stop();
            }
          }, _callee218, this);
        }));
      }
    }, {
      key: "changeRoleOfPeer",
      value: function changeRoleOfPeer(e, t, i) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee219() {
          return _regeneratorRuntime().wrap(function _callee219$(_context220) {
            while (1) switch (_context220.prev = _context220.next) {
              case 0:
                _context220.next = 2;
                return this.signal.requestRoleChange({
                  requested_for: e.peerId,
                  role: t,
                  force: i
                });
              case 2:
              case "end":
                return _context220.stop();
            }
          }, _callee219, this);
        }));
      }
    }, {
      key: "changeRoleOfPeersWithRoles",
      value: function changeRoleOfPeersWithRoles(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee220() {
          return _regeneratorRuntime().wrap(function _callee220$(_context221) {
            while (1) switch (_context221.prev = _context221.next) {
              case 0:
                _context221.next = 2;
                return this.signal.requestBulkRoleChange({
                  roles: e.map(function (i) {
                    return i.name;
                  }),
                  role: t,
                  force: !0
                });
              case 2:
              case "end":
                return _context221.stop();
            }
          }, _callee220, this);
        }));
      }
    }, {
      key: "acceptRoleChange",
      value: function acceptRoleChange(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee221() {
          var t;
          return _regeneratorRuntime().wrap(function _callee221$(_context222) {
            while (1) switch (_context222.prev = _context222.next) {
              case 0:
                _context222.next = 2;
                return this.signal.acceptRoleChangeRequest({
                  requested_by: (t = e.requestedBy) == null ? void 0 : t.peerId,
                  role: e.role.name,
                  token: e.token
                });
              case 2:
              case "end":
                return _context222.stop();
            }
          }, _callee221, this);
        }));
      }
    }, {
      key: "endRoom",
      value: function endRoom(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee222() {
          return _regeneratorRuntime().wrap(function _callee222$(_context223) {
            while (1) switch (_context223.prev = _context223.next) {
              case 0:
                _context223.next = 2;
                return this.signal.endRoom(e, t);
              case 2:
              case "end":
                return _context223.stop();
            }
          }, _callee222, this);
        }));
      }
    }, {
      key: "removePeer",
      value: function removePeer(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee223() {
          return _regeneratorRuntime().wrap(function _callee223$(_context224) {
            while (1) switch (_context224.prev = _context224.next) {
              case 0:
                _context224.next = 2;
                return this.signal.removePeer({
                  requested_for: e,
                  reason: t
                });
              case 2:
              case "end":
                return _context224.stop();
            }
          }, _callee223, this);
        }));
      }
    }, {
      key: "startRTMPOrRecording",
      value: function startRTMPOrRecording(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee224() {
          var i, t;
          return _regeneratorRuntime().wrap(function _callee224$(_context225) {
            while (1) switch (_context225.prev = _context225.next) {
              case 0:
                t = {
                  meeting_url: e.meetingURL,
                  record: e.record
                };
                ((i = e.rtmpURLs) == null ? void 0 : i.length) && (t.rtmp_urls = e.rtmpURLs);
                e.resolution && (t.resolution = e.resolution);
                _context225.next = 5;
                return this.signal.startRTMPOrRecording(t);
              case 5:
              case "end":
                return _context225.stop();
            }
          }, _callee224, this);
        }));
      }
    }, {
      key: "stopRTMPOrRecording",
      value: function stopRTMPOrRecording() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee225() {
          return _regeneratorRuntime().wrap(function _callee225$(_context226) {
            while (1) switch (_context226.prev = _context226.next) {
              case 0:
                _context226.next = 2;
                return this.signal.stopRTMPAndRecording();
              case 2:
              case "end":
                return _context226.stop();
            }
          }, _callee225, this);
        }));
      }
    }, {
      key: "startHLSStreaming",
      value: function startHLSStreaming(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee226() {
          var t;
          return _regeneratorRuntime().wrap(function _callee226$(_context227) {
            while (1) switch (_context227.prev = _context227.next) {
              case 0:
                t = {};
                e && e.variants && e.variants.length > 0 && (t.variants = e.variants.map(function (i) {
                  var r = {
                    meeting_url: i.meetingURL
                  };
                  return i.metadata && (r.metadata = i.metadata), r;
                }));
                (e == null ? void 0 : e.recording) && (t.hls_recording = {
                  single_file_per_layer: e.recording.singleFilePerLayer,
                  hls_vod: e.recording.hlsVod
                });
                _context227.next = 5;
                return this.signal.startHLSStreaming(t);
              case 5:
              case "end":
                return _context227.stop();
            }
          }, _callee226, this);
        }));
      }
    }, {
      key: "stopHLSStreaming",
      value: function stopHLSStreaming(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee227() {
          var t, _i17;
          return _regeneratorRuntime().wrap(function _callee227$(_context228) {
            while (1) switch (_context228.prev = _context228.next) {
              case 0:
                if (!e) {
                  _context228.next = 4;
                  break;
                }
                _i17 = {
                  variants: (t = e == null ? void 0 : e.variants) == null ? void 0 : t.map(function (r) {
                    var s = {
                      meeting_url: r.meetingURL
                    };
                    return r.metadata && (s.metadata = r.metadata), s;
                  })
                };
                _context228.next = 4;
                return this.signal.stopHLSStreaming(_i17);
              case 4:
                _context228.next = 6;
                return this.signal.stopHLSStreaming();
              case 6:
              case "end":
                return _context228.stop();
            }
          }, _callee227, this);
        }));
      }
    }, {
      key: "sendHLSTimedMetadata",
      value: function sendHLSTimedMetadata(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee228() {
          var _t17;
          return _regeneratorRuntime().wrap(function _callee228$(_context229) {
            while (1) switch (_context229.prev = _context229.next) {
              case 0:
                if (!(e.length > 0)) {
                  _context229.next = 4;
                  break;
                }
                _t17 = {
                  metadata_objs: e
                };
                _context229.next = 4;
                return this.signal.sendHLSTimedMetadata(_t17);
              case 4:
              case "end":
                return _context229.stop();
            }
          }, _callee228, this);
        }));
      }
    }, {
      key: "changeName",
      value: function changeName(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee229() {
          var t;
          return _regeneratorRuntime().wrap(function _callee229$(_context230) {
            while (1) switch (_context230.prev = _context230.next) {
              case 0:
                t = this.store.getLocalPeer();
                _context230.t0 = t && t.name !== e;
                if (!_context230.t0) {
                  _context230.next = 5;
                  break;
                }
                _context230.next = 5;
                return this.signal.updatePeer({
                  name: e
                });
              case 5:
              case "end":
                return _context230.stop();
            }
          }, _callee229, this);
        }));
      }
    }, {
      key: "changeMetadata",
      value: function changeMetadata(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee230() {
          return _regeneratorRuntime().wrap(function _callee230$(_context231) {
            while (1) switch (_context231.prev = _context231.next) {
              case 0:
                _context231.next = 2;
                return this.signal.updatePeer({
                  data: e
                });
              case 2:
              case "end":
                return _context231.stop();
            }
          }, _callee230, this);
        }));
      }
    }, {
      key: "getSessionMetadata",
      value: function getSessionMetadata(e) {
        return this.signal.getSessionMetadata(e);
      }
    }, {
      key: "setSessionMetadata",
      value: function setSessionMetadata(e) {
        return this.signal.setSessionMetadata(e);
      }
    }, {
      key: "listenMetadataChange",
      value: function listenMetadataChange(e) {
        return this.signal.listenMetadataChange(e);
      }
    }, {
      key: "changeTrackState",
      value: function changeTrackState(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee231() {
          return _regeneratorRuntime().wrap(function _callee231$(_context232) {
            while (1) switch (_context232.prev = _context232.next) {
              case 0:
                _context232.next = 2;
                return this.signal.requestTrackStateChange(e);
              case 2:
              case "end":
                return _context232.stop();
            }
          }, _callee231, this);
        }));
      }
    }, {
      key: "changeMultiTrackState",
      value: function changeMultiTrackState(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee232() {
          return _regeneratorRuntime().wrap(function _callee232$(_context233) {
            while (1) switch (_context233.prev = _context233.next) {
              case 0:
                _context233.next = 2;
                return this.signal.requestMultiTrackStateChange(e);
              case 2:
              case "end":
                return _context233.stop();
            }
          }, _callee232, this);
        }));
      }
    }, {
      key: "publishTrack",
      value: function publishTrack(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee233() {
          var _this115 = this;
          var t, i, r;
          return _regeneratorRuntime().wrap(function _callee233$(_context234) {
            while (1) switch (_context234.prev = _context234.next) {
              case 0:
                e.publishedTrackId = e.getTrackIDBeingSent(), o.d(P, "\u23F3 publishTrack: trackId=".concat(e.trackId, ", toPublishTrackId=").concat(e.publishedTrackId), "".concat(e)), this.trackStates.set(e.publishedTrackId, new gt(e));
                t = new Promise(function (s, a) {
                  _this115.callbacks.set(_e, {
                    promise: {
                      resolve: s,
                      reject: a
                    },
                    action: m.PUBLISH,
                    extra: {}
                  });
                }), i = e.stream;
                i.setConnection(this.publishConnection);
                r = this.store.getSimulcastLayers(e.source);
                i.addTransceiver(e, r);
                o.time("publish-".concat(e.trackId, "-").concat(e.type));
                _context234.next = 8;
                return t;
              case 8:
                o.timeEnd("publish-".concat(e.trackId, "-").concat(e.type));
                this.store.addTrack(e);
                _context234.next = 12;
                return i.setMaxBitrateAndFramerate(e).then(function () {
                  o.d(P, "Setting maxBitrate=".concat(e.settings.maxBitrate, " kpbs").concat(e instanceof ee ? " and maxFramerate=".concat(e.settings.maxFramerate) : "", " for ").concat(e.source, " ").concat(e.type, " ").concat(e.trackId));
                }).catch(function (s) {
                  return o.w(P, "Failed setting maxBitrate and maxFramerate", s);
                });
              case 12:
                e.isPublished = !0;
                o.d(P, "\u2705 publishTrack: trackId=".concat(e.trackId), "".concat(e), this.callbacks);
              case 14:
              case "end":
                return _context234.stop();
            }
          }, _callee233, this);
        }));
      }
    }, {
      key: "unpublishTrack",
      value: function unpublishTrack(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee234() {
          var _this116 = this;
          var s, t;
          return _regeneratorRuntime().wrap(function _callee234$(_context235) {
            while (1) switch (_context235.prev = _context235.next) {
              case 0:
                if (o.d(P, "\u23F3 unpublishTrack: trackId=".concat(e.trackId), "".concat(e)), e.publishedTrackId && this.trackStates.has(e.publishedTrackId)) this.trackStates.delete(e.publishedTrackId);else {
                  s = Array.from(this.trackStates.values()).find(function (a) {
                    return e.type === a.type && e.source === a.source;
                  });
                  s && this.trackStates.delete(s.track_id);
                }
                t = new Promise(function (r, s) {
                  _this116.callbacks.set(_e, {
                    promise: {
                      resolve: r,
                      reject: s
                    },
                    action: m.UNPUBLISH,
                    extra: {}
                  });
                });
                e.stream.removeSender(e);
                _context235.next = 5;
                return t;
              case 5:
                _context235.next = 7;
                return e.cleanup();
              case 7:
                this.store.removeTrack(e);
                o.d(P, "\u2705 unpublishTrack: trackId=".concat(e.trackId), this.callbacks);
              case 9:
              case "end":
                return _context235.stop();
            }
          }, _callee234, this);
        }));
      }
    }, {
      key: "waitForLocalRoleAvailability",
      value: function waitForLocalRoleAvailability() {
        var _this117 = this;
        if (!this.store.hasRoleDetailsArrived()) return new Promise(function (e) {
          _this117.eventBus.policyChange.subscribeOnce(function () {
            return e();
          });
        });
      }
    }, {
      key: "createConnectionsAndNegotiateJoin",
      value: function createConnectionsAndNegotiateJoin(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee235() {
          var i;
          return _regeneratorRuntime().wrap(function _callee235$(_context236) {
            while (1) switch (_context236.prev = _context236.next) {
              case 0:
                i = this.doesLocalPeerNeedWebRTC();
                i && this.createPeerConnections();
                this.analyticsTimer.start(M.JOIN_RESPONSE);
                _context236.next = 5;
                return this.negotiateJoinWithRetry({
                  name: e.name,
                  data: e.metaData,
                  autoSubscribeVideo: t,
                  isWebRTC: i
                });
              case 5:
                this.analyticsTimer.end(M.JOIN_RESPONSE);
              case 6:
              case "end":
                return _context236.stop();
            }
          }, _callee235, this);
        }));
      }
    }, {
      key: "createPeerConnections",
      value: function createPeerConnections() {
        this.initConfig && (this.publishConnection || (this.publishConnection = new Tt(this.signal, this.initConfig.rtcConfiguration, this.publishConnectionObserver)), this.subscribeConnection || (this.subscribeConnection = new Et(this.signal, this.initConfig.rtcConfiguration, this.subscribeConnectionObserver)));
      }
    }, {
      key: "negotiateJoinWithRetry",
      value: function negotiateJoinWithRetry(s) {
        return c(this, arguments, function (_ref30) {
          var _this118 = this;
          var e = _ref30.name,
            t = _ref30.data,
            i = _ref30.autoSubscribeVideo,
            _ref30$isWebRTC = _ref30.isWebRTC,
            r = _ref30$isWebRTC === void 0 ? !0 : _ref30$isWebRTC;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee237() {
            var _d10, u;
            return _regeneratorRuntime().wrap(function _callee237$(_context238) {
              while (1) switch (_context238.prev = _context238.next) {
                case 0:
                  _context238.prev = 0;
                  _context238.next = 3;
                  return _this118.negotiateJoin({
                    name: e,
                    data: t,
                    autoSubscribeVideo: i,
                    isWebRTC: r
                  });
                case 3:
                  _context238.next = 17;
                  break;
                case 5:
                  _context238.prev = 5;
                  _context238.t0 = _context238["catch"](0);
                  o.e(P, "Join negotiation failed \u274C", _context238.t0);
                  _d10 = _context238.t0 instanceof T ? _context238.t0 : g.WebsocketMethodErrors.ServerErrors(500, m.JOIN, "Websocket join error - ".concat(_context238.t0.message));
                  if (!(parseInt("".concat(_d10.code / 100)) === 5 || [E.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, 429].includes(_d10.code))) {
                    _context238.next = 16;
                    break;
                  }
                  _this118.joinRetryCount = 0, _d10.isTerminal = !1;
                  u = function u() {
                    return c(_this118, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee236() {
                      return _regeneratorRuntime().wrap(function _callee236$(_context237) {
                        while (1) switch (_context237.prev = _context237.next) {
                          case 0:
                            this.joinRetryCount++;
                            _context237.next = 3;
                            return this.negotiateJoin({
                              name: e,
                              data: t,
                              autoSubscribeVideo: i,
                              isWebRTC: r
                            });
                          case 3:
                            return _context237.abrupt("return", _context237.sent);
                          case 4:
                          case "end":
                            return _context237.stop();
                        }
                      }, _callee236, this);
                    }));
                  };
                  _context238.next = 14;
                  return _this118.retryScheduler.schedule({
                    category: R.JoinWSMessageFailed,
                    error: _d10,
                    task: u,
                    originalState: L.Joined,
                    maxFailedRetries: 3,
                    changeState: !1
                  });
                case 14:
                  _context238.next = 17;
                  break;
                case 16:
                  throw _context238.t0;
                case 17:
                case "end":
                  return _context238.stop();
              }
            }, _callee237, null, [[0, 5]]);
          })();
        });
      }
    }, {
      key: "negotiateJoin",
      value: function negotiateJoin(s) {
        return c(this, arguments, function (_ref31) {
          var _this119 = this;
          var e = _ref31.name,
            t = _ref31.data,
            i = _ref31.autoSubscribeVideo,
            _ref31$isWebRTC = _ref31.isWebRTC,
            r = _ref31$isWebRTC === void 0 ? !0 : _ref31$isWebRTC;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee238() {
            return _regeneratorRuntime().wrap(function _callee238$(_context239) {
              while (1) switch (_context239.prev = _context239.next) {
                case 0:
                  if (!r) {
                    _context239.next = 6;
                    break;
                  }
                  _context239.next = 3;
                  return _this119.negotiateJoinWebRTC({
                    name: e,
                    data: t,
                    autoSubscribeVideo: i
                  });
                case 3:
                  _context239.t0 = _context239.sent;
                  _context239.next = 9;
                  break;
                case 6:
                  _context239.next = 8;
                  return _this119.negotiateJoinNonWebRTC({
                    name: e,
                    data: t,
                    autoSubscribeVideo: i
                  });
                case 8:
                  _context239.t0 = _context239.sent;
                case 9:
                  return _context239.abrupt("return", _context239.t0);
                case 10:
                case "end":
                  return _context239.stop();
              }
            }, _callee238);
          })();
        });
      }
    }, {
      key: "negotiateJoinWebRTC",
      value: function negotiateJoinWebRTC(r) {
        return c(this, arguments, function (_ref32) {
          var _this120 = this;
          var e = _ref32.name,
            t = _ref32.data,
            i = _ref32.autoSubscribeVideo;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee239() {
            var s, a, d, l, _iterator24, _step24, u;
            return _regeneratorRuntime().wrap(function _callee239$(_context240) {
              while (1) switch (_context240.prev = _context240.next) {
                case 0:
                  if (!(o.d(P, "\u23F3 join: Negotiating over PUBLISH connection"), !_this120.publishConnection)) {
                    _context240.next = 2;
                    break;
                  }
                  return _context240.abrupt("return", (o.e(P, "Publish peer connection not found, cannot negotiate"), !1));
                case 2:
                  _context240.next = 4;
                  return _this120.publishConnection.createOffer();
                case 4:
                  s = _context240.sent;
                  _context240.next = 7;
                  return _this120.publishConnection.setLocalDescription(s);
                case 7:
                  a = _this120.isFlagEnabled(ce.FLAG_SERVER_SUB_DEGRADATION);
                  d = _this120.isFlagEnabled(ce.FLAG_SERVER_SIMULCAST);
                  _context240.next = 11;
                  return _this120.signal.join(e, t, !i, a, d, s);
                case 11:
                  l = _context240.sent;
                  _context240.next = 14;
                  return _this120.publishConnection.setRemoteDescription(l);
                case 14:
                  _iterator24 = _createForOfIteratorHelper(_this120.publishConnection.candidates);
                  _context240.prev = 15;
                  _iterator24.s();
                case 17:
                  if ((_step24 = _iterator24.n()).done) {
                    _context240.next = 23;
                    break;
                  }
                  u = _step24.value;
                  _context240.next = 21;
                  return _this120.publishConnection.addIceCandidate(u);
                case 21:
                  _context240.next = 17;
                  break;
                case 23:
                  _context240.next = 28;
                  break;
                case 25:
                  _context240.prev = 25;
                  _context240.t0 = _context240["catch"](15);
                  _iterator24.e(_context240.t0);
                case 28:
                  _context240.prev = 28;
                  _iterator24.f();
                  return _context240.finish(28);
                case 31:
                  return _context240.abrupt("return", (_this120.publishConnection.initAfterJoin(), !!l));
                case 32:
                case "end":
                  return _context240.stop();
              }
            }, _callee239, null, [[15, 25, 28, 31]]);
          })();
        });
      }
    }, {
      key: "negotiateJoinNonWebRTC",
      value: function negotiateJoinNonWebRTC(r) {
        return c(this, arguments, function (_ref33) {
          var _this121 = this;
          var e = _ref33.name,
            t = _ref33.data,
            i = _ref33.autoSubscribeVideo;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee240() {
            var s, a;
            return _regeneratorRuntime().wrap(function _callee240$(_context241) {
              while (1) switch (_context241.prev = _context241.next) {
                case 0:
                  o.d(P, "\u23F3 join: Negotiating Non-WebRTC");
                  s = _this121.isFlagEnabled(ce.FLAG_SERVER_SUB_DEGRADATION), a = _this121.isFlagEnabled(ce.FLAG_SERVER_SIMULCAST);
                  _context241.next = 4;
                  return _this121.signal.join(e, t, !i, s, a);
                case 4:
                  return _context241.abrupt("return", !!_context241.sent);
                case 5:
                case "end":
                  return _context241.stop();
              }
            }, _callee240);
          })();
        });
      }
    }, {
      key: "negotiateOnFirstPublish",
      value: function negotiateOnFirstPublish() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee241() {
          var e, t, _iterator25, _step25, _i18;
          return _regeneratorRuntime().wrap(function _callee241$(_context242) {
            while (1) switch (_context242.prev = _context242.next) {
              case 0:
                if (!(o.d(P, "\u23F3 Negotiating offer over PUBLISH connection"), !this.publishConnection)) {
                  _context242.next = 2;
                  break;
                }
                return _context242.abrupt("return", (o.e(P, "Publish peer connection not found, cannot negotiate"), !1));
              case 2:
                _context242.next = 4;
                return this.publishConnection.createOffer(this.trackStates);
              case 4:
                e = _context242.sent;
                _context242.next = 7;
                return this.publishConnection.setLocalDescription(e);
              case 7:
                _context242.next = 9;
                return this.signal.offer(e, this.trackStates);
              case 9:
                t = _context242.sent;
                _context242.next = 12;
                return this.publishConnection.setRemoteDescription(t);
              case 12:
                _iterator25 = _createForOfIteratorHelper(this.publishConnection.candidates);
                _context242.prev = 13;
                _iterator25.s();
              case 15:
                if ((_step25 = _iterator25.n()).done) {
                  _context242.next = 21;
                  break;
                }
                _i18 = _step25.value;
                _context242.next = 19;
                return this.publishConnection.addIceCandidate(_i18);
              case 19:
                _context242.next = 15;
                break;
              case 21:
                _context242.next = 26;
                break;
              case 23:
                _context242.prev = 23;
                _context242.t0 = _context242["catch"](13);
                _iterator25.e(_context242.t0);
              case 26:
                _context242.prev = 26;
                _iterator25.f();
                return _context242.finish(26);
              case 29:
                return _context242.abrupt("return", (this.publishConnection.initAfterJoin(), !!t));
              case 30:
              case "end":
                return _context242.stop();
            }
          }, _callee241, this, [[13, 23, 26, 29]]);
        }));
      }
    }, {
      key: "performPublishRenegotiation",
      value: function performPublishRenegotiation(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee242() {
          var t, _i19, _r23, _r24;
          return _regeneratorRuntime().wrap(function _callee242$(_context243) {
            while (1) switch (_context243.prev = _context243.next) {
              case 0:
                o.d(P, "\u23F3 [role=PUBLISH] onRenegotiationNeeded START", this.trackStates);
                t = this.callbacks.get(_e);
                if (!t) {
                  _context243.next = 27;
                  break;
                }
                if (this.publishConnection) {
                  _context243.next = 6;
                  break;
                }
                o.e(P, "Publish peer connection not found, cannot renegotiate");
                return _context243.abrupt("return");
              case 6:
                _context243.prev = 6;
                _context243.next = 9;
                return this.publishConnection.createOffer(this.trackStates, e);
              case 9:
                _i19 = _context243.sent;
                _context243.next = 12;
                return this.publishConnection.setLocalDescription(_i19);
              case 12:
                o.time("renegotiation-offer-exchange");
                _context243.next = 15;
                return this.signal.offer(_i19, this.trackStates);
              case 15:
                _r23 = _context243.sent;
                this.callbacks.delete(_e);
                o.timeEnd("renegotiation-offer-exchange");
                _context243.next = 20;
                return this.publishConnection.setRemoteDescription(_r23);
              case 20:
                t.promise.resolve(!0);
                o.d(P, "[role=PUBLISH] onRenegotiationNeeded DONE \u2705");
                _context243.next = 27;
                break;
              case 24:
                _context243.prev = 24;
                _context243.t0 = _context243["catch"](6);
                _context243.t0 instanceof T ? _r24 = _context243.t0 : _r24 = g.GenericErrors.Unknown(m.PUBLISH, _context243.t0.message), t.promise.reject(_r24), o.d(P, "[role=PUBLISH] onRenegotiationNeeded FAILED \u274C");
              case 27:
              case "end":
                return _context243.stop();
            }
          }, _callee242, this, [[6, 24]]);
        }));
      }
    }, {
      key: "handleIceConnectionFailure",
      value: function handleIceConnectionFailure(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee243() {
          return _regeneratorRuntime().wrap(function _callee243$(_context244) {
            while (1) switch (_context244.prev = _context244.next) {
              case 0:
                this.retryScheduler.isTaskInProgress(U.Publish ? R.PublishIceConnectionFailed : R.SubscribeIceConnectionFailed) || (e === U.Publish ? this.retryScheduler.schedule({
                  category: R.PublishIceConnectionFailed,
                  error: t,
                  task: this.retryPublishIceFailedTask,
                  originalState: L.Joined
                }) : this.retryScheduler.schedule({
                  category: R.SubscribeIceConnectionFailed,
                  error: t,
                  task: this.retrySubscribeIceFailedTask,
                  originalState: L.Joined,
                  maxFailedRetries: 1
                }));
              case 1:
              case "end":
                return _context244.stop();
            }
          }, _callee243, this);
        }));
      }
    }, {
      key: "internalConnect",
      value: function internalConnect(e, t, i) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee244() {
          var r;
          return _regeneratorRuntime().wrap(function _callee244$(_context245) {
            while (1) switch (_context245.prev = _context245.next) {
              case 0:
                o.d(P, "connect: started \u23F0");
                r = new Date();
                _context245.prev = 2;
                this.analyticsTimer.start(M.INIT);
                _context245.next = 6;
                return At.fetchInitConfig({
                  token: e,
                  peerId: i,
                  userAgent: this.store.getUserAgent(),
                  initEndpoint: t
                });
              case 6:
                this.initConfig = _context245.sent;
                this.analyticsTimer.end(M.INIT);
                ae.setWebsocketEndpoint(this.initConfig.endpoint);
                this.validateNotDisconnected("post init");
                _context245.next = 12;
                return this.openSignal(e, i);
              case 12:
                this.store.setSimulcastEnabled(this.isFlagEnabled(ce.FLAG_SERVER_SIMULCAST));
                o.d(P, "Adding Analytics Transport: JsonRpcSignal");
                this.analyticsEventsService.setTransport(this.analyticsSignalTransport);
                this.analyticsEventsService.flush();
                return _context245.abrupt("return", this.initConfig);
              case 19:
                _context245.prev = 19;
                _context245.t0 = _context245["catch"](2);
                throw this.state !== L.Reconnecting && this.eventBus.analytics.publish(w.connect(_context245.t0, this.getAdditionalAnalyticsProperties(), r, new Date(), t)), o.e(P, "\u274C internal connect: failed", _context245.t0), _context245.t0;
              case 22:
              case "end":
                return _context245.stop();
            }
          }, _callee244, this, [[2, 19]]);
        }));
      }
    }, {
      key: "validateNotDisconnected",
      value: function validateNotDisconnected(e) {
        if (this.state === L.Disconnected) throw o.w(P, "aborting join as transport state is disconnected"), g.GenericErrors.ValidationFailed("leave called before join could complete - stage=".concat(e));
      }
    }, {
      key: "openSignal",
      value: function openSignal(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee245() {
          var i;
          return _regeneratorRuntime().wrap(function _callee245$(_context246) {
            while (1) switch (_context246.prev = _context246.next) {
              case 0:
                if (this.initConfig) {
                  _context246.next = 2;
                  break;
                }
                throw g.APIErrors.InitConfigNotAvailable(m.INIT, "Init Config not found");
              case 2:
                o.d(P, "\u23F3 internal connect: connecting to ws endpoint", this.initConfig.endpoint);
                i = new URL(this.initConfig.endpoint);
                i.searchParams.set("peer", t);
                i.searchParams.set("token", e);
                i.searchParams.set("user_agent_v2", this.store.getUserAgent());
                this.endpoint = i.toString();
                this.analyticsTimer.start(M.WEBSOCKET_CONNECT);
                _context246.next = 11;
                return this.signal.open(this.endpoint);
              case 11:
                this.analyticsTimer.end(M.WEBSOCKET_CONNECT);
                this.analyticsTimer.start(M.ON_POLICY_CHANGE);
                this.analyticsTimer.start(M.ROOM_STATE);
                o.d(P, "\u2705 internal connect: connected to ws endpoint");
              case 15:
              case "end":
                return _context246.stop();
            }
          }, _callee245, this);
        }));
      }
    }, {
      key: "initRtcStatsMonitor",
      value: function initRtcStatsMonitor() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee246() {
          var e, t, i;
          return _regeneratorRuntime().wrap(function _callee246$(_context247) {
            while (1) switch (_context247.prev = _context247.next) {
              case 0:
                (i = this.webrtcInternals) == null || i.setPeerConnections({
                  publish: (e = this.publishConnection) == null ? void 0 : e.nativeConnection,
                  subscribe: (t = this.subscribeConnection) == null ? void 0 : t.nativeConnection
                });
              case 1:
              case "end":
                return _context247.stop();
            }
          }, _callee246, this);
        }));
      }
    }, {
      key: "doesRoleNeedWebRTC",
      value: function doesRoleNeedWebRTC(e) {
        var r, s;
        if (!this.isFlagEnabled(ce.FLAG_NON_WEBRTC_DISABLE_OFFER)) return !0;
        var t = Boolean(e.publishParams.allowed && ((r = e.publishParams.allowed) == null ? void 0 : r.length) > 0),
          i = Boolean(e.subscribeParams.subscribeToRoles && ((s = e.subscribeParams.subscribeToRoles) == null ? void 0 : s.length) > 0);
        return t || i;
      }
    }, {
      key: "doesLocalPeerNeedWebRTC",
      value: function doesLocalPeerNeedWebRTC() {
        var t;
        var e = (t = this.store.getLocalPeer()) == null ? void 0 : t.role;
        return e ? this.doesRoleNeedWebRTC(e) : !0;
      }
    }, {
      key: "handleSubscribeConnectionConnected",
      value: function handleSubscribeConnectionConnected() {
        var t;
        (t = this.subscribeConnection) == null || t.logSelectedIceCandidatePairs();
        var e = this.callbacks.get(De);
        this.callbacks.delete(De), e && e.promise.resolve(!0);
      }
    }, {
      key: "setTransportStateForConnect",
      value: function setTransportStateForConnect() {
        if (this.state === L.Failed && (this.state = L.Disconnected), this.state !== L.Disconnected && this.state !== L.Reconnecting) throw g.WebsocketMethodErrors.AlreadyJoined(m.JOIN, "Cannot join a meeting in ".concat(this.state, " state"));
        this.state === L.Disconnected && (this.state = L.Connecting, this.observer.onStateChange(this.state));
      }
    }, {
      key: "sendErrorAnalyticsEvent",
      value: function sendErrorAnalyticsEvent(e, t) {
        var i = this.getAdditionalAnalyticsProperties(),
          r;
        switch (t) {
          case R.ConnectFailed:
            r = w.connect(e, i);
            break;
          case R.SignalDisconnect:
            r = w.disconnect(e, i);
            break;
          case R.JoinWSMessageFailed:
            r = w.join({
              error: e,
              time: this.analyticsTimer.getTimeTaken(M.JOIN),
              init_response_time: this.analyticsTimer.getTimeTaken(M.INIT),
              ws_connect_time: this.analyticsTimer.getTimeTaken(M.WEBSOCKET_CONNECT),
              on_policy_change_time: this.analyticsTimer.getTimeTaken(M.ON_POLICY_CHANGE),
              local_audio_track_time: this.analyticsTimer.getTimeTaken(M.LOCAL_AUDIO_TRACK),
              local_video_track_time: this.analyticsTimer.getTimeTaken(M.LOCAL_VIDEO_TRACK),
              retries_join: this.joinRetryCount
            });
            break;
          case R.PublishIceConnectionFailed:
            r = w.publish({
              error: e
            });
            break;
          case R.SubscribeIceConnectionFailed:
            r = w.subscribeFail(e);
            break;
        }
        this.eventBus.analytics.publish(r);
      }
    }, {
      key: "getAdditionalAnalyticsProperties",
      value: function getAdditionalAnalyticsProperties() {
        var a, d, l, u, h, p, v, f;
        var e = lr(),
          t = typeof document != "undefined" && document.hidden,
          i = this.store.getRemoteVideoTracks().filter(function (H) {
            return H.degraded;
          }).length,
          r = (u = (l = (d = (a = this.getWebrtcInternals()) == null ? void 0 : a.getCurrentStats()) == null ? void 0 : d.getLocalPeerStats()) == null ? void 0 : l.publish) == null ? void 0 : u.bitrate,
          s = (f = (v = (p = (h = this.getWebrtcInternals()) == null ? void 0 : h.getCurrentStats()) == null ? void 0 : p.getLocalPeerStats()) == null ? void 0 : v.subscribe) == null ? void 0 : f.bitrate;
        return {
          network_info: e,
          document_hidden: t,
          num_degraded_tracks: i,
          bitrate: {
            publish: r,
            subscribe: s
          },
          max_sub_bitrate: this.maxSubscribeBitrate,
          recent_pong_response_times: this.signal.getPongResponseTimes(),
          transport_state: this.state
        };
      }
    }]);
    return bt;
  }();
var ur = function ur(n, e, t) {
  return c(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee247() {
    var i, r, s, _a10, _d11;
    return _regeneratorRuntime().wrap(function _callee247$(_context248) {
      while (1) switch (_context248.prev = _context248.next) {
        case 0:
          i = 4, r = Error("something went wrong during fetch");
          s = 0;
        case 2:
          if (!(s < i)) {
            _context248.next = 21;
            break;
          }
          _context248.prev = 3;
          _context248.next = 6;
          return fetch(n, e);
        case 6:
          _a10 = _context248.sent;
          _context248.next = 9;
          return _a10.clone().json();
        case 9:
          _d11 = _context248.sent;
          if (!(t && t.length && !_a10.ok && t.includes(_d11.code))) {
            _context248.next = 12;
            break;
          }
          throw g.APIErrors.ServerErrors(_d11.code, m.GET_TOKEN, _d11.message, !1);
        case 12:
          return _context248.abrupt("return", _a10);
        case 15:
          _context248.prev = 15;
          _context248.t0 = _context248["catch"](3);
          r = _context248.t0;
        case 18:
          s++;
          _context248.next = 2;
          break;
        case 21:
          throw ["Failed to fetch", "NetworkError"].some(function (s) {
            return r.message.includes(s);
          }) ? g.APIErrors.EndpointUnreachable(m.GET_TOKEN, r.message) : r;
        case 22:
        case "end":
          return _context248.stop();
      }
    }, _callee247, null, [[3, 15]]);
  }));
};
function It(n) {
  if (!n || n.length === 0) throw g.APIErrors.InvalidTokenFormat(m.INIT, "Token cannot be an empty string or undefined or null");
  var e = n.split(".");
  if (e.length !== 3) throw g.APIErrors.InvalidTokenFormat(m.INIT, "Expected 3 '.' separate fields - header, payload and signature respectively");
  var t = atob(e[1]);
  try {
    var _i20 = JSON.parse(t);
    return {
      roomId: _i20.room_id,
      userId: _i20.user_id,
      role: _i20.role
    };
  } catch (i) {
    throw g.APIErrors.InvalidTokenFormat(m.INIT, "couldn't parse to json - ".concat(i.message));
  }
}
var hr = {
    published: !1,
    isInitialised: !1,
    isReconnecting: !1,
    isPreviewInProgress: !1,
    isPreviewCalled: !1,
    isJoinInProgress: !1,
    deviceManagersInitialised: !1
  },
  Qr = /*#__PURE__*/function () {
    function Qr() {
      var _this122 = this;
      _classCallCheck(this, Qr);
      this.TAG = "[HMSSdk]:";
      this.transportState = L.Disconnected;
      this.analyticsTimer = new Ht();
      this.sdkState = S({}, hr);
      this.handleAutoplayError = function (e) {
        var t, i;
        (i = (t = _this122.errorListener) == null ? void 0 : t.onError) == null || i.call(t, e);
      };
      this.observer = {
        onNotification: function onNotification(e) {
          if (e.method === A.PEER_LEAVE_REQUEST) {
            _this122.handlePeerLeaveRequest(e.params);
            return;
          }
          switch (e.method) {
            case A.POLICY_CHANGE:
              _this122.analyticsTimer.end(M.ON_POLICY_CHANGE);
              break;
            case A.PEER_LIST:
              _this122.analyticsTimer.end(M.PEER_LIST), _this122.sendJoinAnalyticsEvent(_this122.sdkState.isPreviewCalled);
              break;
            case A.ROOM_STATE:
              _this122.analyticsTimer.end(M.ROOM_STATE);
              break;
            default:
          }
          _this122.notificationManager.handleNotification(e, _this122.sdkState.isReconnecting);
        },
        onTrackAdd: function onTrackAdd(e) {
          _this122.notificationManager.handleTrackAdd(e);
        },
        onTrackRemove: function onTrackRemove(e) {
          _this122.notificationManager.handleTrackRemove(e);
        },
        onFailure: function onFailure(e) {
          var t;
          (t = _this122.errorListener) == null || t.onError(e);
        },
        onStateChange: function onStateChange(e, t) {
          return c(_this122, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee249() {
            var _this123 = this;
            var r, s, i;
            return _regeneratorRuntime().wrap(function _callee249$(_context250) {
              while (1) switch (_context250.prev = _context250.next) {
                case 0:
                  i = function i(a) {
                    return c(_this123, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee248() {
                      var d, l;
                      return _regeneratorRuntime().wrap(function _callee248$(_context249) {
                        while (1) switch (_context249.prev = _context249.next) {
                          case 0:
                            _context249.next = 2;
                            return this.internalLeave(!0, a);
                          case 2:
                            !this.sdkState.isPreviewInProgress && !this.sdkState.isJoinInProgress && ((l = (d = this.errorListener) == null ? void 0 : d.onError) == null || l.call(d, a));
                            this.sdkState.isReconnecting = !1;
                          case 4:
                          case "end":
                            return _context249.stop();
                        }
                      }, _callee248, this);
                    }));
                  };
                  _context250.t0 = e;
                  _context250.next = _context250.t0 === L.Preview ? 4 : _context250.t0 === L.Joined ? 4 : _context250.t0 === L.Failed ? 6 : _context250.t0 === L.Reconnecting ? 9 : 11;
                  break;
                case 4:
                  this.transportState === L.Reconnecting && ((r = this.listener) == null || r.onReconnected());
                  return _context250.abrupt("break", 11);
                case 6:
                  _context250.next = 8;
                  return i(t);
                case 8:
                  return _context250.abrupt("break", 11);
                case 9:
                  this.sdkState.isReconnecting = !0, (s = this.listener) == null || s.onReconnecting(t);
                  return _context250.abrupt("break", 11);
                case 11:
                  this.transportState = e, o.d(this.TAG, "Transport State Change", this.transportState);
                case 12:
                case "end":
                  return _context250.stop();
              }
            }, _callee249, this);
          }));
        }
      };
      this.handlePeerLeaveRequest = function (e) {
        var r;
        var t = e.requested_by ? _this122.store.getPeerById(e.requested_by) : void 0,
          i = {
            roomEnded: e.room_end,
            reason: e.reason,
            requestedBy: t
          };
        (r = _this122.listener) == null || r.onRemovedFromRoom(i), _this122.internalLeave(!1);
      };
      this.handleDeviceChange = function (e) {
        var t, i, r, s, a, d;
        if (o.d(_this122.TAG, "Device Change event", e), (i = (t = _this122.deviceChangeListener) == null ? void 0 : t.onDeviceChange) == null || i.call(t, e), e.error && e.type) {
          var l = e.type.includes("audio") ? (r = _this122.localPeer) == null ? void 0 : r.audioTrack : (s = _this122.localPeer) == null ? void 0 : s.videoTrack;
          (a = _this122.errorListener) == null || a.onError(e.error), [E.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, E.TracksErrors.DEVICE_IN_USE, E.TracksErrors.DEVICE_NOT_AVAILABLE].includes(e.error.code) && l && (l.setEnabled(!1), (d = _this122.listener) == null || d.onTrackUpdate(N.TRACK_MUTED, l, _this122.localPeer));
        }
      };
      this.handleAudioPluginError = function (e) {
        var t;
        o.e(_this122.TAG, "Audio Plugin Error event", e), (t = _this122.errorListener) == null || t.onError(e);
      };
      this.handleLocalRoleUpdate = function (i) {
        return c(_this122, [i], function (_ref34) {
          var _this124 = this;
          var e = _ref34.oldRole,
            t = _ref34.newRole;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee250() {
            var r;
            return _regeneratorRuntime().wrap(function _callee250$(_context251) {
              while (1) switch (_context251.prev = _context251.next) {
                case 0:
                  _context251.next = 2;
                  return _this124.transport.handleLocalRoleUpdate({
                    oldRole: e,
                    newRole: t
                  });
                case 2:
                  _context251.next = 4;
                  return (r = _this124.roleChangeManager) == null ? void 0 : r.handleLocalPeerRoleUpdate({
                    oldRole: e,
                    newRole: t
                  });
                case 4:
                case "end":
                  return _context251.stop();
              }
            }, _callee250);
          })();
        });
      };
      this.sendAudioPresenceFailed = function () {
        var e = g.TracksErrors.NoAudioDetected(m.PREVIEW);
        o.w(_this122.TAG, "Audio Presence Failure", _this122.transportState, e);
      };
      this.sendJoinAnalyticsEvent = function () {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        var t = arguments.length > 1 ? arguments[1] : undefined;
        _this122.eventBus.analytics.publish(w.join(D(S({
          error: t
        }, _this122.analyticsTimer.getTimes()), {
          time: _this122.analyticsTimer.getTimeTaken(M.JOIN),
          is_preview_called: e,
          retries_join: _this122.transport.joinRetryCount
        })));
      };
      this.sendPreviewAnalyticsEvent = function (e) {
        _this122.eventBus.analytics.publish(w.preview(D(S({
          error: e
        }, _this122.analyticsTimer.getTimes()), {
          time: _this122.analyticsTimer.getTimeTaken(M.PREVIEW)
        })));
      };
      this.sendAnalyticsEvent = function (e) {
        _this122.analyticsEventsService.queue(e).flush();
      };
    }
    _createClass(Qr, [{
      key: "initStoreAndManagers",
      value: function initStoreAndManagers() {
        if (this.sdkState.isInitialised) {
          this.notificationManager.setListener(this.listener), this.audioSinkManager.setListener(this.listener);
          return;
        }
        this.sdkState.isInitialised = !0, this.store = new lt(), this.eventBus = new $t(), this.wakeLockManager = new Ut(), this.networkTestManager = new Gt(this.eventBus, this.listener), this.playlistManager = new St(this, this.eventBus), this.notificationManager = new mt(this.store, this.eventBus, this.listener, this.audioListener), this.deviceManager = new ht(this.store, this.eventBus), this.audioSinkManager = new ut(this.store, this.deviceManager, this.eventBus), this.audioOutput = new pt(this.deviceManager, this.audioSinkManager), this.audioSinkManager.setListener(this.listener), this.eventBus.autoplayError.subscribe(this.handleAutoplayError), this.localTrackManager = new me(this.store, this.observer, this.deviceManager, this.eventBus, this.analyticsTimer), this.analyticsEventsService = new Bt(this.store), this.transport = new bt(this.observer, this.deviceManager, this.store, this.eventBus, this.analyticsEventsService, this.analyticsTimer), this.sessionStore = new ii(this.transport), this.eventBus.analytics.subscribe(this.sendAnalyticsEvent), this.eventBus.deviceChange.subscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.subscribe(this.handleAudioPluginError);
      }
    }, {
      key: "validateJoined",
      value: function validateJoined(e) {
        if (!this.localPeer) throw g.GenericErrors.NotConnected(m.VALIDATION, "Not connected - ".concat(e));
      }
    }, {
      key: "sendHLSAnalytics",
      value: function sendHLSAnalytics(e) {
        this.sendAnalyticsEvent(w.hlsPlayerError(e));
      }
    }, {
      key: "refreshDevices",
      value: function refreshDevices() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee251() {
          return _regeneratorRuntime().wrap(function _callee251$(_context252) {
            while (1) switch (_context252.prev = _context252.next) {
              case 0:
                this.validateJoined("refreshDevices");
                _context252.next = 3;
                return this.deviceManager.init(!0);
              case 3:
              case "end":
                return _context252.stop();
            }
          }, _callee251, this);
        }));
      }
    }, {
      key: "getWebrtcInternals",
      value: function getWebrtcInternals() {
        var e;
        return (e = this.transport) == null ? void 0 : e.getWebrtcInternals();
      }
    }, {
      key: "getSessionStore",
      value: function getSessionStore() {
        return this.sessionStore;
      }
    }, {
      key: "getPlaylistManager",
      value: function getPlaylistManager() {
        return this.playlistManager;
      }
    }, {
      key: "getRecordingState",
      value: function getRecordingState() {
        var e;
        return (e = this.store.getRoom()) == null ? void 0 : e.recording;
      }
    }, {
      key: "getRTMPState",
      value: function getRTMPState() {
        var e;
        return (e = this.store.getRoom()) == null ? void 0 : e.rtmp;
      }
    }, {
      key: "getHLSState",
      value: function getHLSState() {
        var e;
        return (e = this.store.getRoom()) == null ? void 0 : e.hls;
      }
    }, {
      key: "getTemplateAppData",
      value: function getTemplateAppData() {
        return this.store.getTemplateAppData();
      }
    }, {
      key: "localPeer",
      get: function get() {
        var e;
        return (e = this.store) == null ? void 0 : e.getLocalPeer();
      }
    }, {
      key: "preview",
      value: function preview(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee254() {
          var _this125 = this;
          var i, r, s;
          return _regeneratorRuntime().wrap(function _callee254$(_context255) {
            while (1) switch (_context255.prev = _context255.next) {
              case 0:
                if (!(li(), di(), this.sdkState.isPreviewInProgress)) {
                  _context255.next = 2;
                  break;
                }
                return _context255.abrupt("return", Promise.reject(g.GenericErrors.PreviewAlreadyInProgress(m.PREVIEW, "Preview already called")));
              case 2:
                this.analyticsTimer.start(M.PREVIEW), this.setUpPreview(e, t), e.alwaysRequestPermissions && this.localTrackManager.requestPermissions().then(function () {
                  return c(_this125, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee252() {
                    return _regeneratorRuntime().wrap(function _callee252$(_context253) {
                      while (1) switch (_context253.prev = _context253.next) {
                        case 0:
                          _context253.next = 2;
                          return this.initDeviceManagers();
                        case 2:
                        case "end":
                          return _context253.stop();
                      }
                    }, _callee252, this);
                  }));
                });
                i = !1, r = !1, s = setTimeout(function () {
                  var a, d;
                  (!i || !r) && ((d = (a = _this125.listener) == null ? void 0 : a.onNetworkQuality) == null || d.call(a, -1));
                }, 3e3);
                return _context255.abrupt("return", new Promise(function (a, d) {
                  var l = function l() {
                      return c(_this125, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee253() {
                        var _this126 = this;
                        var v, f, h, p;
                        return _regeneratorRuntime().wrap(function _callee253$(_context254) {
                          while (1) switch (_context254.prev = _context254.next) {
                            case 0:
                              if (this.localPeer) {
                                f = e.asRole && this.store.getPolicyForRole(e.asRole);
                                this.localPeer.asRole = f || this.localPeer.role;
                              }
                              _context254.next = 3;
                              return this.localTrackManager.getTracksToPublish(e.settings);
                            case 3:
                              h = _context254.sent;
                              h.forEach(function (f) {
                                return _this126.setLocalPeerTrack(f);
                              });
                              ((v = this.localPeer) == null ? void 0 : v.audioTrack) && this.initPreviewTrackAudioLevelMonitor();
                              _context254.next = 8;
                              return this.initDeviceManagers();
                            case 8:
                              this.sdkState.isPreviewInProgress = !1;
                              this.analyticsTimer.end(M.PREVIEW);
                              p = this.store.getRoom();
                              p && t.onPreview(p, h), this.sendPreviewAnalyticsEvent(), a();
                            case 12:
                            case "end":
                              return _context254.stop();
                          }
                        }, _callee253, this);
                      }));
                    },
                    u = function u(h) {
                      var p;
                      _this125.analyticsTimer.end(M.PREVIEW), h && ((p = _this125.errorListener) == null || p.onError(h)), _this125.sendPreviewAnalyticsEvent(h), _this125.sdkState.isPreviewInProgress = !1, d(h);
                    };
                  _this125.eventBus.policyChange.subscribeOnce(l), _this125.eventBus.leave.subscribeOnce(u), _this125.transport.preview(e.authToken, e.initEndpoint, _this125.localPeer.peerId, {
                    name: e.userName,
                    metaData: e.metaData || ""
                  }, e.autoVideoSubscribe).then(function (h) {
                    var p;
                    i = !0, clearTimeout(s), h && e.captureNetworkQualityInPreview && _this125.networkTestManager.start((p = h.config) == null ? void 0 : p.networkHealth).then(function () {
                      r = !0;
                    });
                  }).catch(u);
                }));
              case 5:
              case "end":
                return _context255.stop();
            }
          }, _callee254, this);
        }));
      }
    }, {
      key: "join",
      value: function join(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee255() {
          var l, u, h, p, v, f, _It, i, r, s, a, d;
          return _regeneratorRuntime().wrap(function _callee255$(_context256) {
            while (1) switch (_context256.prev = _context256.next) {
              case 0:
                if (!(li(), di(), this.sdkState.isPreviewInProgress)) {
                  _context256.next = 2;
                  break;
                }
                throw g.GenericErrors.NotReady(m.JOIN, "Preview is in progress, can't join");
              case 2:
                this.analyticsTimer.start(M.JOIN), this.sdkState.isJoinInProgress = !0;
                _It = It(e.authToken), i = _It.roomId, r = _It.userId, s = _It.role, a = ((u = (l = this.localPeer) == null ? void 0 : l.asRole) == null ? void 0 : u.name) || ((p = (h = this.localPeer) == null ? void 0 : h.role) == null ? void 0 : p.name);
                (v = this.networkTestManager) == null || v.stop(), this.listener = t, this.commonSetup(e, i, t), this.removeDevicesFromConfig(e), this.store.setConfig(e), this.store.createAndSetUserAgent(this.frameworkInfo), pe.resumeContext();
                d = this.store.getConfig();
                (d == null ? void 0 : d.autoManageWakeLock) && this.wakeLockManager.acquireLock(), this.localPeer ? (this.localPeer.name = e.userName, this.localPeer.role = this.store.getPolicyForRole(s), this.localPeer.customerUserId = r, this.localPeer.metadata = e.metaData, delete this.localPeer.asRole) : this.createAndAddLocalPeerToStore(e, s, r), this.roleChangeManager = new dt(this.store, this.transport, this.getAndPublishTracks.bind(this), this.removeTrack.bind(this), this.listener), this.eventBus.localRoleUpdate.subscribe(this.handleLocalRoleUpdate), o.d(this.TAG, "SDK Store", this.store), o.d(this.TAG, "\u23F3 Joining room ".concat(i)), o.time("join-room-".concat(i));
                _context256.prev = 7;
                _context256.next = 10;
                return this.transport.join(e.authToken, this.localPeer.peerId, {
                  name: e.userName,
                  metaData: e.metaData
                }, e.initEndpoint, e.autoVideoSubscribe);
              case 10:
                o.d(this.TAG, "\u2705 Joined room ".concat(i));
                this.analyticsTimer.start(M.PEER_LIST);
                _context256.next = 14;
                return this.notifyJoin();
              case 14:
                this.sdkState.isJoinInProgress = !1;
                _context256.next = 17;
                return this.publish(e.settings, a);
              case 17:
                _context256.next = 22;
                break;
              case 19:
                _context256.prev = 19;
                _context256.t0 = _context256["catch"](7);
                throw this.analyticsTimer.end(M.JOIN), this.sdkState.isJoinInProgress = !1, (f = this.listener) == null || f.onError(_context256.t0), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled, _context256.t0), o.e(this.TAG, "Unable to join room", _context256.t0), _context256.t0;
              case 22:
                o.timeEnd("join-room-".concat(i));
              case 23:
              case "end":
                return _context256.stop();
            }
          }, _callee255, this, [[7, 19]]);
        }));
      }
    }, {
      key: "stringifyMetadata",
      value: function stringifyMetadata(e) {
        e.metaData && typeof e.metaData != "string" ? e.metaData = JSON.stringify(e.metaData) : e.metaData || (e.metaData = "");
      }
    }, {
      key: "cleanUp",
      value: function cleanUp() {
        var e, t, i;
        this.cleanDeviceManagers(), this.eventBus.analytics.unsubscribe(this.sendAnalyticsEvent), this.analyticsTimer.cleanUp(), Q.cleanup(), this.playlistManager.cleanup(), (e = this.wakeLockManager) == null || e.cleanup(), o.cleanUp(), this.sdkState = S({}, hr), this.localPeer && ((t = this.localPeer.audioTrack) == null || t.cleanup(), this.localPeer.audioTrack = void 0, (i = this.localPeer.videoTrack) == null || i.cleanup(), this.localPeer.videoTrack = void 0), this.store.cleanUp(), this.listener = void 0, this.roleChangeManager && this.eventBus.localRoleUpdate.unsubscribe(this.handleLocalRoleUpdate);
      }
    }, {
      key: "leave",
      value: function leave(e) {
        return this.internalLeave(e);
      }
    }, {
      key: "internalLeave",
      value: function internalLeave() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
        var t = arguments.length > 1 ? arguments[1] : undefined;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee256() {
          var r, s, i, _a11;
          return _regeneratorRuntime().wrap(function _callee256$(_context257) {
            while (1) switch (_context257.prev = _context257.next) {
              case 0:
                i = this.store.getRoom();
                if (!i) {
                  _context257.next = 10;
                  break;
                }
                _a11 = i.id;
                (r = this.networkTestManager) == null || r.stop();
                this.eventBus.leave.publish(t);
                o.d(this.TAG, "\u23F3 Leaving room ".concat(_a11));
                _context257.next = 8;
                return (s = this.transport) == null ? void 0 : s.leave(e);
              case 8:
                this.cleanUp();
                o.d(this.TAG, "\u2705 Left room ".concat(_a11));
              case 10:
              case "end":
                return _context257.stop();
            }
          }, _callee256, this);
        }));
      }
    }, {
      key: "getAuthTokenByRoomCode",
      value: function getAuthTokenByRoomCode(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee257() {
          var i, r, s, a;
          return _regeneratorRuntime().wrap(function _callee257$(_context258) {
            while (1) switch (_context258.prev = _context258.next) {
              case 0:
                i = (t || {}).endpoint || "https://auth.100ms.live/v2/token";
                this.analyticsTimer.start(M.GET_TOKEN);
                _context258.next = 4;
                return ur(i, {
                  method: "POST",
                  body: JSON.stringify({
                    code: e.roomCode,
                    user_id: e.userId
                  })
                }, [429, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]);
              case 4:
                r = _context258.sent;
                _context258.next = 7;
                return r.json();
              case 7:
                s = _context258.sent;
                if (!(this.analyticsTimer.end(M.GET_TOKEN), !r.ok)) {
                  _context258.next = 10;
                  break;
                }
                throw g.APIErrors.ServerErrors(s.code, m.GET_TOKEN, s.message, !1);
              case 10:
                a = s.token;
                if (a) {
                  _context258.next = 13;
                  break;
                }
                throw Error(s.message);
              case 13:
                return _context258.abrupt("return", a);
              case 14:
              case "end":
                return _context258.stop();
            }
          }, _callee257, this);
        }));
      }
    }, {
      key: "getLocalPeer",
      value: function getLocalPeer() {
        return this.store.getLocalPeer();
      }
    }, {
      key: "getPeers",
      value: function getPeers() {
        return this.store.getPeers();
      }
    }, {
      key: "getAudioOutput",
      value: function getAudioOutput() {
        return this.audioOutput;
      }
    }, {
      key: "sendMessage",
      value: function sendMessage(e, t) {
        this.sendMessageInternal({
          message: t,
          type: e
        });
      }
    }, {
      key: "sendBroadcastMessage",
      value: function sendBroadcastMessage(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee258() {
          return _regeneratorRuntime().wrap(function _callee258$(_context259) {
            while (1) switch (_context259.prev = _context259.next) {
              case 0:
                _context259.next = 2;
                return this.sendMessageInternal({
                  message: e,
                  type: t
                });
              case 2:
                return _context259.abrupt("return", _context259.sent);
              case 3:
              case "end":
                return _context259.stop();
            }
          }, _callee258, this);
        }));
      }
    }, {
      key: "sendGroupMessage",
      value: function sendGroupMessage(e, t, i) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee259() {
          var r;
          return _regeneratorRuntime().wrap(function _callee259$(_context260) {
            while (1) switch (_context260.prev = _context260.next) {
              case 0:
                r = this.store.getKnownRoles();
                if (!((t.filter(function (a) {
                  return r[a.name];
                }) || []).length === 0)) {
                  _context260.next = 3;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("No valid role is present", t);
              case 3:
                _context260.next = 5;
                return this.sendMessageInternal({
                  message: e,
                  recipientRoles: t,
                  type: i
                });
              case 5:
                return _context260.abrupt("return", _context260.sent);
              case 6:
              case "end":
                return _context260.stop();
            }
          }, _callee259, this);
        }));
      }
    }, {
      key: "sendDirectMessage",
      value: function sendDirectMessage(e, t, i) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee260() {
          var s;
          return _regeneratorRuntime().wrap(function _callee260$(_context261) {
            while (1) switch (_context261.prev = _context261.next) {
              case 0:
                if (this.store.getPeerById(t.peerId)) {
                  _context261.next = 2;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("Invalid peer - peer not present in the room", t);
              case 2:
                if (!(((s = this.localPeer) == null ? void 0 : s.peerId) === t.peerId)) {
                  _context261.next = 4;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("Cannot send message to self");
              case 4:
                _context261.next = 6;
                return this.sendMessageInternal({
                  message: e,
                  recipientPeer: t,
                  type: i
                });
              case 6:
                return _context261.abrupt("return", _context261.sent);
              case 7:
              case "end":
                return _context261.stop();
            }
          }, _callee260, this);
        }));
      }
    }, {
      key: "sendMessageInternal",
      value: function sendMessageInternal(s) {
        return c(this, arguments, function (_ref35) {
          var _this127 = this;
          var e = _ref35.recipientRoles,
            t = _ref35.recipientPeer,
            _ref35$type = _ref35.type,
            i = _ref35$type === void 0 ? "chat" : _ref35$type,
            r = _ref35.message;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee261() {
            var a, d;
            return _regeneratorRuntime().wrap(function _callee261$(_context262) {
              while (1) switch (_context262.prev = _context262.next) {
                case 0:
                  if (!(r.replace(/\u200b/g, " ").trim() === "")) {
                    _context262.next = 2;
                    break;
                  }
                  throw o.w(_this127.TAG, "sendMessage", "Ignoring empty message send"), g.GenericErrors.ValidationFailed("Empty message not allowed");
                case 2:
                  a = new Ae({
                    sender: _this127.localPeer,
                    type: i,
                    message: r,
                    recipientPeer: t,
                    recipientRoles: e,
                    time: new Date()
                  });
                  o.d(_this127.TAG, "Sending Message: ", a);
                  _context262.next = 6;
                  return _this127.transport.sendMessage(a);
                case 6:
                  d = _context262.sent;
                  return _context262.abrupt("return", (a.time = new Date(d.timestamp), a));
                case 8:
                case "end":
                  return _context262.stop();
              }
            }, _callee261);
          })();
        });
      }
    }, {
      key: "startScreenShare",
      value: function startScreenShare(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee262() {
          var _this128 = this;
          var d, l, u, i, r, a;
          return _regeneratorRuntime().wrap(function _callee262$(_context263) {
            while (1) switch (_context263.prev = _context263.next) {
              case 0:
                i = this.store.getPublishParams();
                if (i) {
                  _context263.next = 3;
                  break;
                }
                return _context263.abrupt("return");
              case 3:
                r = i.allowed;
                if (r && r.includes("screen")) {
                  _context263.next = 7;
                  break;
                }
                o.e(this.TAG, "Role ".concat((d = this.localPeer) == null ? void 0 : d.role, " cannot share screen"));
                return _context263.abrupt("return");
              case 7:
                if (!((u = (l = this.localPeer) == null ? void 0 : l.auxiliaryTracks) == null ? void 0 : u.find(function (h) {
                  return h.source === "screen";
                }))) {
                  _context263.next = 9;
                  break;
                }
                throw Error("Cannot share multiple screens");
              case 9:
                _context263.next = 11;
                return this.getScreenshareTracks(e, t);
              case 11:
                a = _context263.sent;
                if (this.localPeer) {
                  _context263.next = 15;
                  break;
                }
                o.d(this.TAG, "Screenshared when not connected"), a.forEach(function (h) {
                  h.cleanup();
                });
                return _context263.abrupt("return");
              case 15:
                _context263.next = 17;
                return this.transport.publish(a);
              case 17:
                a.forEach(function (h) {
                  var p, v, f;
                  h.peerId = (p = _this128.localPeer) == null ? void 0 : p.peerId, (v = _this128.localPeer) == null || v.auxiliaryTracks.push(h), (f = _this128.listener) == null || f.onTrackUpdate(N.TRACK_ADDED, h, _this128.localPeer);
                });
              case 18:
              case "end":
                return _context263.stop();
            }
          }, _callee262, this);
        }));
      }
    }, {
      key: "stopEndedScreenshare",
      value: function stopEndedScreenshare(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee263() {
          return _regeneratorRuntime().wrap(function _callee263$(_context264) {
            while (1) switch (_context264.prev = _context264.next) {
              case 0:
                o.d(this.TAG, "\u2705 Screenshare ended natively");
                _context264.next = 3;
                return this.stopScreenShare();
              case 3:
                e();
              case 4:
              case "end":
                return _context264.stop();
            }
          }, _callee263, this);
        }));
      }
    }, {
      key: "stopScreenShare",
      value: function stopScreenShare() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee264() {
          var t, e, _iterator26, _step26, _i21;
          return _regeneratorRuntime().wrap(function _callee264$(_context265) {
            while (1) switch (_context265.prev = _context265.next) {
              case 0:
                o.d(this.TAG, "\u2705 Screenshare ended from app");
                e = (t = this.localPeer) == null ? void 0 : t.auxiliaryTracks.filter(function (i) {
                  return i.source === "screen";
                });
                if (!e) {
                  _context265.next = 20;
                  break;
                }
                _iterator26 = _createForOfIteratorHelper(e);
                _context265.prev = 4;
                _iterator26.s();
              case 6:
                if ((_step26 = _iterator26.n()).done) {
                  _context265.next = 12;
                  break;
                }
                _i21 = _step26.value;
                _context265.next = 10;
                return this.removeTrack(_i21.trackId);
              case 10:
                _context265.next = 6;
                break;
              case 12:
                _context265.next = 17;
                break;
              case 14:
                _context265.prev = 14;
                _context265.t0 = _context265["catch"](4);
                _iterator26.e(_context265.t0);
              case 17:
                _context265.prev = 17;
                _iterator26.f();
                return _context265.finish(17);
              case 20:
              case "end":
                return _context265.stop();
            }
          }, _callee264, this, [[4, 14, 17, 20]]);
        }));
      }
    }, {
      key: "addTrack",
      value: function addTrack(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "regular";
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee265() {
          var u, h, p, v, r, s, a, d, l;
          return _regeneratorRuntime().wrap(function _callee265$(_context266) {
            while (1) switch (_context266.prev = _context266.next) {
              case 0:
                if (e) {
                  _context266.next = 3;
                  break;
                }
                o.w(this.TAG, "Please pass a valid MediaStreamTrack");
                return _context266.abrupt("return");
              case 3:
                if (this.localPeer) {
                  _context266.next = 5;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot addTrack");
              case 5:
                if (!this.localPeer.auxiliaryTracks.find(function (f) {
                  return f.trackId === e.id;
                })) {
                  _context266.next = 7;
                  break;
                }
                return _context266.abrupt("return");
              case 7:
                r = e.kind, s = new MediaStream([e]), a = new ke(s), d = r === "audio" ? He : ee, l = new d(a, e, t, this.eventBus);
                this.setPlaylistSettings({
                  track: e,
                  hmsTrack: l,
                  source: t
                });
                _context266.next = 11;
                return (u = this.transport) == null ? void 0 : u.publish([l]);
              case 11:
                l.peerId = (h = this.localPeer) == null ? void 0 : h.peerId;
                (p = this.localPeer) == null || p.auxiliaryTracks.push(l);
                (v = this.listener) == null || v.onTrackUpdate(N.TRACK_ADDED, l, this.localPeer);
              case 14:
              case "end":
                return _context266.stop();
            }
          }, _callee265, this);
        }));
      }
    }, {
      key: "removeTrack",
      value: function removeTrack(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee266() {
          var r, i, s;
          return _regeneratorRuntime().wrap(function _callee266$(_context267) {
            while (1) switch (_context267.prev = _context267.next) {
              case 0:
                if (this.localPeer) {
                  _context267.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot removeTrack");
              case 2:
                i = this.localPeer.auxiliaryTracks.findIndex(function (s) {
                  return s.trackId === e;
                });
                if (!(i > -1)) {
                  _context267.next = 17;
                  break;
                }
                s = this.localPeer.auxiliaryTracks[i];
                if (!s.isPublished) {
                  _context267.next = 10;
                  break;
                }
                _context267.next = 8;
                return this.transport.unpublish([s]);
              case 8:
                _context267.next = 12;
                break;
              case 10:
                _context267.next = 12;
                return s.cleanup();
              case 12:
                t || this.stopPlaylist(s);
                this.localPeer.auxiliaryTracks.splice(i, 1);
                (r = this.listener) == null || r.onTrackUpdate(N.TRACK_REMOVED, s, this.localPeer);
                _context267.next = 18;
                break;
              case 17:
                o.w(this.TAG, "No track found for ".concat(e));
              case 18:
              case "end":
                return _context267.stop();
            }
          }, _callee266, this);
        }));
      }
    }, {
      key: "setAnalyticsLevel",
      value: function setAnalyticsLevel(e) {
        this.analyticsEventsService.level = e;
      }
    }, {
      key: "setLogLevel",
      value: function setLogLevel(e) {
        o.level = e;
      }
    }, {
      key: "addAudioListener",
      value: function addAudioListener(e) {
        this.audioListener = e, this.notificationManager.setAudioListener(e);
      }
    }, {
      key: "addConnectionQualityListener",
      value: function addConnectionQualityListener(e) {
        this.notificationManager.setConnectionQualityListener(e);
      }
    }, {
      key: "changeRole",
      value: function changeRole(e, t) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee267() {
          var r;
          return _regeneratorRuntime().wrap(function _callee267$(_context268) {
            while (1) switch (_context268.prev = _context268.next) {
              case 0:
                _context268.t0 = !e.role || e.role.name === t;
                if (_context268.t0) {
                  _context268.next = 4;
                  break;
                }
                _context268.next = 4;
                return (r = this.transport) == null ? void 0 : r.changeRoleOfPeer(e, t, i);
              case 4:
              case "end":
                return _context268.stop();
            }
          }, _callee267, this);
        }));
      }
    }, {
      key: "changeRoleOfPeer",
      value: function changeRoleOfPeer(e, t) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee268() {
          var r;
          return _regeneratorRuntime().wrap(function _callee268$(_context269) {
            while (1) switch (_context269.prev = _context269.next) {
              case 0:
                _context269.t0 = !e.role || e.role.name === t;
                if (_context269.t0) {
                  _context269.next = 4;
                  break;
                }
                _context269.next = 4;
                return (r = this.transport) == null ? void 0 : r.changeRoleOfPeer(e, t, i);
              case 4:
              case "end":
                return _context269.stop();
            }
          }, _callee268, this);
        }));
      }
    }, {
      key: "changeRoleOfPeersWithRoles",
      value: function changeRoleOfPeersWithRoles(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee269() {
          var i;
          return _regeneratorRuntime().wrap(function _callee269$(_context270) {
            while (1) switch (_context270.prev = _context270.next) {
              case 0:
                _context270.t0 = e.length <= 0 || !t;
                if (_context270.t0) {
                  _context270.next = 4;
                  break;
                }
                _context270.next = 4;
                return (i = this.transport) == null ? void 0 : i.changeRoleOfPeersWithRoles(e, t);
              case 4:
              case "end":
                return _context270.stop();
            }
          }, _callee269, this);
        }));
      }
    }, {
      key: "acceptChangeRole",
      value: function acceptChangeRole(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee270() {
          var t;
          return _regeneratorRuntime().wrap(function _callee270$(_context271) {
            while (1) switch (_context271.prev = _context271.next) {
              case 0:
                _context271.next = 2;
                return (t = this.transport) == null ? void 0 : t.acceptRoleChange(e);
              case 2:
              case "end":
                return _context271.stop();
            }
          }, _callee270, this);
        }));
      }
    }, {
      key: "endRoom",
      value: function endRoom(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee271() {
          var i;
          return _regeneratorRuntime().wrap(function _callee271$(_context272) {
            while (1) switch (_context272.prev = _context272.next) {
              case 0:
                if (this.localPeer) {
                  _context272.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot end room");
              case 2:
                _context272.next = 4;
                return (i = this.transport) == null ? void 0 : i.endRoom(e, t);
              case 4:
                _context272.next = 6;
                return this.leave();
              case 6:
              case "end":
                return _context272.stop();
            }
          }, _callee271, this);
        }));
      }
    }, {
      key: "removePeer",
      value: function removePeer(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee272() {
          var i;
          return _regeneratorRuntime().wrap(function _callee272$(_context273) {
            while (1) switch (_context273.prev = _context273.next) {
              case 0:
                if (this.localPeer) {
                  _context273.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot remove peer");
              case 2:
                if (this.store.getPeerById(e.peerId)) {
                  _context273.next = 4;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("Invalid peer, given peer not present in room", e);
              case 4:
                _context273.next = 6;
                return (i = this.transport) == null ? void 0 : i.removePeer(e.peerId, t);
              case 6:
              case "end":
                return _context273.stop();
            }
          }, _callee272, this);
        }));
      }
    }, {
      key: "startRTMPOrRecording",
      value: function startRTMPOrRecording(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee273() {
          var t;
          return _regeneratorRuntime().wrap(function _callee273$(_context274) {
            while (1) switch (_context274.prev = _context274.next) {
              case 0:
                if (this.localPeer) {
                  _context274.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot start streaming or recording");
              case 2:
                _context274.next = 4;
                return (t = this.transport) == null ? void 0 : t.startRTMPOrRecording(e);
              case 4:
              case "end":
                return _context274.stop();
            }
          }, _callee273, this);
        }));
      }
    }, {
      key: "stopRTMPAndRecording",
      value: function stopRTMPAndRecording() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee274() {
          var e;
          return _regeneratorRuntime().wrap(function _callee274$(_context275) {
            while (1) switch (_context275.prev = _context275.next) {
              case 0:
                if (this.localPeer) {
                  _context275.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot stop streaming or recording");
              case 2:
                _context275.next = 4;
                return (e = this.transport) == null ? void 0 : e.stopRTMPOrRecording();
              case 4:
              case "end":
                return _context275.stop();
            }
          }, _callee274, this);
        }));
      }
    }, {
      key: "startHLSStreaming",
      value: function startHLSStreaming(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee275() {
          var t;
          return _regeneratorRuntime().wrap(function _callee275$(_context276) {
            while (1) switch (_context276.prev = _context276.next) {
              case 0:
                if (this.localPeer) {
                  _context276.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot start HLS streaming");
              case 2:
                _context276.next = 4;
                return (t = this.transport) == null ? void 0 : t.startHLSStreaming(e);
              case 4:
              case "end":
                return _context276.stop();
            }
          }, _callee275, this);
        }));
      }
    }, {
      key: "stopHLSStreaming",
      value: function stopHLSStreaming(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee276() {
          var t;
          return _regeneratorRuntime().wrap(function _callee276$(_context277) {
            while (1) switch (_context277.prev = _context277.next) {
              case 0:
                if (this.localPeer) {
                  _context277.next = 2;
                  break;
                }
                throw g.GenericErrors.NotConnected(m.VALIDATION, "No local peer present, cannot stop HLS streaming");
              case 2:
                _context277.next = 4;
                return (t = this.transport) == null ? void 0 : t.stopHLSStreaming(e);
              case 4:
              case "end":
                return _context277.stop();
            }
          }, _callee276, this);
        }));
      }
    }, {
      key: "sendHLSTimedMetadata",
      value: function sendHLSTimedMetadata(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee277() {
          var t;
          return _regeneratorRuntime().wrap(function _callee277$(_context278) {
            while (1) switch (_context278.prev = _context278.next) {
              case 0:
                this.validateJoined("sendHLSTimedMetadata");
                _context278.next = 3;
                return (t = this.transport) == null ? void 0 : t.sendHLSTimedMetadata(e);
              case 3:
              case "end":
                return _context278.stop();
            }
          }, _callee277, this);
        }));
      }
    }, {
      key: "changeName",
      value: function changeName(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee278() {
          var t;
          return _regeneratorRuntime().wrap(function _callee278$(_context279) {
            while (1) switch (_context279.prev = _context279.next) {
              case 0:
                this.validateJoined("changeName");
                _context279.next = 3;
                return (t = this.transport) == null ? void 0 : t.changeName(e);
              case 3:
                this.notificationManager.updateLocalPeer({
                  name: e
                });
              case 4:
              case "end":
                return _context279.stop();
            }
          }, _callee278, this);
        }));
      }
    }, {
      key: "changeMetadata",
      value: function changeMetadata(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee279() {
          var t;
          return _regeneratorRuntime().wrap(function _callee279$(_context280) {
            while (1) switch (_context280.prev = _context280.next) {
              case 0:
                this.validateJoined("changeMetadata");
                _context280.next = 3;
                return (t = this.transport) == null ? void 0 : t.changeMetadata(e);
              case 3:
                this.notificationManager.updateLocalPeer({
                  metadata: e
                });
              case 4:
              case "end":
                return _context280.stop();
            }
          }, _callee279, this);
        }));
      }
    }, {
      key: "setSessionMetadata",
      value: function setSessionMetadata(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee280() {
          return _regeneratorRuntime().wrap(function _callee280$(_context281) {
            while (1) switch (_context281.prev = _context281.next) {
              case 0:
                _context281.next = 2;
                return this.transport.setSessionMetadata({
                  key: "default",
                  data: e
                });
              case 2:
              case "end":
                return _context281.stop();
            }
          }, _callee280, this);
        }));
      }
    }, {
      key: "getSessionMetadata",
      value: function getSessionMetadata() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee281() {
          return _regeneratorRuntime().wrap(function _callee281$(_context282) {
            while (1) switch (_context282.prev = _context282.next) {
              case 0:
                _context282.next = 2;
                return this.transport.getSessionMetadata("default");
              case 2:
                return _context282.abrupt("return", _context282.sent.data);
              case 3:
              case "end":
                return _context282.stop();
            }
          }, _callee281, this);
        }));
      }
    }, {
      key: "getRoles",
      value: function getRoles() {
        return Object.values(this.store.getKnownRoles());
      }
    }, {
      key: "changeTrackState",
      value: function changeTrackState(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee282() {
          var r, i;
          return _regeneratorRuntime().wrap(function _callee282$(_context283) {
            while (1) switch (_context283.prev = _context283.next) {
              case 0:
                if (!(e.type === x.VIDEO && e.source !== "regular")) {
                  _context283.next = 3;
                  break;
                }
                o.w(this.TAG, "Muting non-regular video tracks is currently not supported");
                return _context283.abrupt("return");
              case 3:
                if (!(e.enabled === t)) {
                  _context283.next = 6;
                  break;
                }
                o.w(this.TAG, "Aborting change track state, track already has enabled - ".concat(t), e);
                return _context283.abrupt("return");
              case 6:
                if (this.store.getTrackById(e.trackId)) {
                  _context283.next = 8;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("No track found for change track state", e);
              case 8:
                i = this.store.getPeerByTrackId(e.trackId);
                if (i) {
                  _context283.next = 11;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("No peer found for change track state", e);
              case 11:
                _context283.next = 13;
                return (r = this.transport) == null ? void 0 : r.changeTrackState({
                  requested_for: i.peerId,
                  track_id: e.trackId,
                  stream_id: e.stream.id,
                  mute: !t
                });
              case 13:
              case "end":
                return _context283.stop();
            }
          }, _callee282, this);
        }));
      }
    }, {
      key: "changeMultiTrackState",
      value: function changeMultiTrackState(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee283() {
          var a, t, i, r, s;
          return _regeneratorRuntime().wrap(function _callee283$(_context284) {
            while (1) switch (_context284.prev = _context284.next) {
              case 0:
                if (!(typeof e.enabled != "boolean")) {
                  _context284.next = 2;
                  break;
                }
                throw g.GenericErrors.ValidationFailed("Pass a boolean for enabled");
              case 2:
                t = e.enabled, i = e.roles, r = e.type, s = e.source;
                _context284.next = 5;
                return (a = this.transport) == null ? void 0 : a.changeMultiTrackState({
                  value: !t,
                  type: r,
                  source: s,
                  roles: i == null ? void 0 : i.map(function (d) {
                    return d == null ? void 0 : d.name;
                  })
                });
              case 5:
              case "end":
                return _context284.stop();
            }
          }, _callee283, this);
        }));
      }
    }, {
      key: "setFrameworkInfo",
      value: function setFrameworkInfo(e) {
        this.frameworkInfo = e;
      }
    }, {
      key: "attachVideo",
      value: function attachVideo(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee284() {
          var i;
          return _regeneratorRuntime().wrap(function _callee284$(_context285) {
            while (1) switch (_context285.prev = _context285.next) {
              case 0:
                i = this.store.getConfig();
                if (!(i == null ? void 0 : i.autoManageVideo)) {
                  _context285.next = 5;
                  break;
                }
                e.attach(t);
                _context285.next = 7;
                break;
              case 5:
                _context285.next = 7;
                return e.addSink(t);
              case 7:
              case "end":
                return _context285.stop();
            }
          }, _callee284, this);
        }));
      }
    }, {
      key: "detachVideo",
      value: function detachVideo(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee285() {
          var i;
          return _regeneratorRuntime().wrap(function _callee285$(_context286) {
            while (1) switch (_context286.prev = _context286.next) {
              case 0:
                i = this.store.getConfig();
                if (!(i == null ? void 0 : i.autoManageVideo)) {
                  _context286.next = 5;
                  break;
                }
                e.detach(t);
                _context286.next = 7;
                break;
              case 5:
                _context286.next = 7;
                return e.removeSink(t);
              case 7:
              case "end":
                return _context286.stop();
            }
          }, _callee285, this);
        }));
      }
    }, {
      key: "publish",
      value: function publish(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee286() {
          var _this129 = this;
          var i, r, s, _a12;
          return _regeneratorRuntime().wrap(function _callee286$(_context287) {
            while (1) switch (_context287.prev = _context287.next) {
              case 0:
                if (![this.store.getPublishParams(), !this.sdkState.published, !Se].every(function (a) {
                  return !!a;
                })) {
                  _context287.next = 4;
                  break;
                }
                _a12 = t && t !== ((r = (i = this.localPeer) == null ? void 0 : i.role) == null ? void 0 : r.name) ? function () {
                  var d;
                  return (d = _this129.roleChangeManager) == null ? void 0 : d.diffRolesAndPublishTracks({
                    oldRole: _this129.store.getPolicyForRole(t),
                    newRole: _this129.localPeer.role
                  });
                } : function () {
                  return _this129.getAndPublishTracks(e);
                };
                _context287.next = 4;
                return (s = _a12 == null ? void 0 : _a12()) == null ? void 0 : s.catch(function (d) {
                  var l;
                  o.e(_this129.TAG, "Error in publish", d), (l = _this129.listener) == null || l.onError(d);
                });
              case 4:
              case "end":
                return _context287.stop();
            }
          }, _callee286, this);
        }));
      }
    }, {
      key: "getAndPublishTracks",
      value: function getAndPublishTracks(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee287() {
          var i, r, t;
          return _regeneratorRuntime().wrap(function _callee287$(_context288) {
            while (1) switch (_context288.prev = _context288.next) {
              case 0:
                _context288.next = 2;
                return this.localTrackManager.getTracksToPublish(e);
              case 2:
                t = _context288.sent;
                _context288.next = 5;
                return this.setAndPublishTracks(t);
              case 5:
                (r = (i = this.localPeer) == null ? void 0 : i.audioTrack) == null || r.initAudioLevelMonitor();
                this.sdkState.published = !0;
              case 7:
              case "end":
                return _context288.stop();
            }
          }, _callee287, this);
        }));
      }
    }, {
      key: "setAndPublishTracks",
      value: function setAndPublishTracks(e) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee288() {
          var t, _iterator27, _step27, _i22;
          return _regeneratorRuntime().wrap(function _callee288$(_context289) {
            while (1) switch (_context289.prev = _context289.next) {
              case 0:
                _iterator27 = _createForOfIteratorHelper(e);
                _context289.prev = 1;
                _iterator27.s();
              case 3:
                if ((_step27 = _iterator27.n()).done) {
                  _context289.next = 11;
                  break;
                }
                _i22 = _step27.value;
                _context289.next = 7;
                return this.transport.publish([_i22]);
              case 7:
                this.setLocalPeerTrack(_i22);
                (t = this.listener) == null || t.onTrackUpdate(N.TRACK_ADDED, _i22, this.localPeer);
              case 9:
                _context289.next = 3;
                break;
              case 11:
                _context289.next = 16;
                break;
              case 13:
                _context289.prev = 13;
                _context289.t0 = _context289["catch"](1);
                _iterator27.e(_context289.t0);
              case 16:
                _context289.prev = 16;
                _iterator27.f();
                return _context289.finish(16);
              case 19:
                _context289.next = 21;
                return this.initDeviceManagers();
              case 21:
              case "end":
                return _context289.stop();
            }
          }, _callee288, this, [[1, 13, 16, 19]]);
        }));
      }
    }, {
      key: "setLocalPeerTrack",
      value: function setLocalPeerTrack(e) {
        var t;
        switch (e.peerId = (t = this.localPeer) == null ? void 0 : t.peerId, e.type) {
          case x.AUDIO:
            this.localPeer.audioTrack = e;
            break;
          case x.VIDEO:
            this.localPeer.videoTrack = e;
            break;
        }
      }
    }, {
      key: "initDeviceManagers",
      value: function initDeviceManagers() {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee289() {
          var e, t, i, r, s;
          return _regeneratorRuntime().wrap(function _callee289$(_context290) {
            while (1) switch (_context290.prev = _context290.next) {
              case 0:
                _context290.t0 = this.sdkState.deviceManagersInitialised;
                if (_context290.t0) {
                  _context290.next = 12;
                  break;
                }
                this.sdkState.deviceManagersInitialised = !0;
                _context290.next = 5;
                return this.deviceManager.init();
              case 5:
                _context290.next = 7;
                return this.deviceManager.updateOutputDevice((t = (e = this.store.getConfig()) == null ? void 0 : e.settings) == null ? void 0 : t.audioOutputDeviceId);
              case 7:
                _context290.t1 = _context290.sent;
                if (_context290.t1) {
                  _context290.next = 11;
                  break;
                }
                _context290.next = 11;
                return this.deviceManager.updateOutputDevice((r = (i = Q.getSelection()) == null ? void 0 : i.audioOutput) == null ? void 0 : r.deviceId);
              case 11:
                this.audioSinkManager.init((s = this.store.getConfig()) == null ? void 0 : s.audioSinkElementId);
              case 12:
              case "end":
                return _context290.stop();
            }
          }, _callee289, this);
        }));
      }
    }, {
      key: "cleanDeviceManagers",
      value: function cleanDeviceManagers() {
        this.eventBus.deviceChange.unsubscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.unsubscribe(this.handleAudioPluginError), this.eventBus.autoplayError.unsubscribe(this.handleAutoplayError), this.deviceManager.cleanUp(), this.audioSinkManager.cleanUp();
      }
    }, {
      key: "initPreviewTrackAudioLevelMonitor",
      value: function initPreviewTrackAudioLevelMonitor() {
        var _this130 = this;
        var t;
        var e = (t = this.localPeer) == null ? void 0 : t.audioTrack;
        e == null || e.initAudioLevelMonitor(), this.eventBus.trackAudioLevelUpdate.subscribe(function (i) {
          var s;
          var r = i && i.track.trackId === (e == null ? void 0 : e.trackId) ? [{
            audioLevel: i.audioLevel,
            peer: _this130.localPeer,
            track: e
          }] : [];
          _this130.store.updateSpeakers(r), (s = _this130.audioListener) == null || s.onAudioLevelUpdate(r);
        }), this.eventBus.localAudioSilence.subscribe(this.sendAudioPresenceFailed);
      }
    }, {
      key: "notifyJoin",
      value: function notifyJoin() {
        var _this131 = this;
        var i;
        var e = this.store.getLocalPeer(),
          t = this.store.getRoom();
        if (!t) {
          o.w(this.TAG, "notify join - room not present");
          return;
        }
        if (t.joinedAt = new Date(), e && (e.joinedAt = t.joinedAt), e == null ? void 0 : e.role) {
          this.analyticsTimer.end(M.JOIN), (i = this.listener) == null || i.onJoin(t);
          return;
        }
        return new Promise(function (r, s) {
          _this131.eventBus.policyChange.subscribeOnce(function () {
            var a;
            _this131.analyticsTimer.end(M.JOIN), (a = _this131.listener) == null || a.onJoin(t), r();
          }), _this131.eventBus.leave.subscribeOnce(function (a) {
            s(a);
          });
        });
      }
    }, {
      key: "setUpPreview",
      value: function setUpPreview(e, t) {
        this.listener = t, this.sdkState.isPreviewCalled = !0, this.sdkState.isPreviewInProgress = !0;
        var _It2 = It(e.authToken),
          i = _It2.roomId,
          r = _It2.userId,
          s = _It2.role;
        this.commonSetup(e, i, t), this.store.setConfig(e), this.store.createAndSetUserAgent(this.frameworkInfo), this.createAndAddLocalPeerToStore(e, s, r, e.asRole), o.d(this.TAG, "SDK Store", this.store);
      }
    }, {
      key: "setPlaylistSettings",
      value: function setPlaylistSettings(r) {
        return c(this, arguments, function (_ref36) {
          var e = _ref36.track,
            t = _ref36.hmsTrack,
            i = _ref36.source;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee290() {
            var s, _e$getSettings, _a13, _d12;
            return _regeneratorRuntime().wrap(function _callee290$(_context291) {
              while (1) switch (_context291.prev = _context291.next) {
                case 0:
                  if (!(i === "videoplaylist")) {
                    _context291.next = 7;
                    break;
                  }
                  s = {};
                  if (e.kind === "audio") s.maxBitrate = 64;else {
                    s.maxBitrate = 1e3;
                    _e$getSettings = e.getSettings(), _a13 = _e$getSettings.width, _d12 = _e$getSettings.height;
                    s.width = _a13, s.height = _d12;
                  }
                  _context291.next = 5;
                  return t.setSettings(s);
                case 5:
                  _context291.next = 11;
                  break;
                case 7:
                  _context291.t0 = i === "audioplaylist";
                  if (!_context291.t0) {
                    _context291.next = 11;
                    break;
                  }
                  _context291.next = 11;
                  return t.setSettings({
                    maxBitrate: 64
                  });
                case 11:
                case "end":
                  return _context291.stop();
              }
            }, _callee290);
          })();
        });
      }
    }, {
      key: "createAndAddLocalPeerToStore",
      value: function createAndAddLocalPeerToStore(e, t, i, r) {
        var s = this.store.getPolicyForRole(t),
          a = r ? this.store.getPolicyForRole(r) : void 0,
          d = new Je({
            name: e.userName || "",
            customerUserId: i,
            metadata: e.metaData || "",
            role: s,
            asRole: a || s
          });
        this.store.addPeer(d);
      }
    }, {
      key: "commonSetup",
      value: function commonSetup(e, t, i) {
        this.stringifyMetadata(e), e.initEndpoint || (e.initEndpoint = "https://prod-init.100ms.live"), this.errorListener = i, this.deviceChangeListener = i, this.initStoreAndManagers(), this.store.setErrorListener(this.errorListener), this.store.getRoom() || this.store.setRoom(new je(t, this.store));
      }
    }, {
      key: "removeDevicesFromConfig",
      value: function removeDevicesFromConfig(e) {
        this.store.getConfig() && e.settings && (delete e.settings.audioOutputDeviceId, delete e.settings.videoDeviceId, delete e.settings.audioInputDeviceId);
      }
    }, {
      key: "getScreenshareTracks",
      value: function getScreenshareTracks(e, t) {
        return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee291() {
          var _this132 = this;
          var _yield$this$localTrac, _yield$this$localTrac2, i, r, s, a;
          return _regeneratorRuntime().wrap(function _callee291$(_context292) {
            while (1) switch (_context292.prev = _context292.next) {
              case 0:
                _context292.next = 2;
                return this.localTrackManager.getLocalScreen(t);
              case 2:
                _yield$this$localTrac = _context292.sent;
                _yield$this$localTrac2 = _slicedToArray(_yield$this$localTrac, 2);
                i = _yield$this$localTrac2[0];
                r = _yield$this$localTrac2[1];
                s = function s() {
                  _this132.stopEndedScreenshare(e);
                };
                a = [];
                if (!(t == null ? void 0 : t.audioOnly)) {
                  _context292.next = 14;
                  break;
                }
                if (!(i.nativeTrack.stop(), !r)) {
                  _context292.next = 11;
                  break;
                }
                throw g.TracksErrors.NothingToReturn(m.TRACK, "Select share audio when sharing screen", "No audio found");
              case 11:
                a.push(r), r.nativeTrack.onended = s;
                _context292.next = 15;
                break;
              case 14:
                a.push(i), i.nativeTrack.onended = s, r && a.push(r);
              case 15:
                return _context292.abrupt("return", a);
              case 16:
              case "end":
                return _context292.stop();
            }
          }, _callee291, this);
        }));
      }
    }, {
      key: "stopPlaylist",
      value: function stopPlaylist(e) {
        e.source === "audioplaylist" ? this.playlistManager.stop(I.audio) : e.source === "videoplaylist" && this.playlistManager.stop(I.video);
      }
    }]);
    return Qr;
  }();
exports.HMSSdk = Qr;
function pg() {
  return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee292() {
    var n, e;
    return _regeneratorRuntime().wrap(function _callee292$(_context293) {
      while (1) switch (_context293.prev = _context293.next) {
        case 0:
          n = new Y().build(), e = new Z().build();
          _context293.prev = 1;
          _context293.next = 4;
          return tt(e);
        case 4:
          _context293.sent.stop();
          _context293.next = 14;
          break;
        case 7:
          _context293.prev = 7;
          _context293.t0 = _context293["catch"](1);
          if (!Yr(_context293.t0)) {
            _context293.next = 14;
            break;
          }
          _context293.next = 12;
          return Li({
            audio: !1,
            video: !0
          });
        case 12:
          _context293.sent.getTracks().forEach(function (s) {
            return s.stop();
          });
          throw _context293.t0;
        case 14:
          _context293.next = 16;
          return it(n);
        case 16:
          _context293.sent.stop();
          return _context293.abrupt("return", !1);
        case 18:
        case "end":
          return _context293.stop();
      }
    }, _callee292, null, [[1, 7]]);
  }));
}
function Yr(n) {
  return n instanceof T && n.action === m.TRACK;
}
o.i("adapter", "".concat(_webrtcAdapter.default.browserDetails.browser, " v").concat(_webrtcAdapter.default.browserDetails.version));
},{"webrtc-adapter":"WzOL","ua-parser-js":"Godu","uuid":"UeUD","eventemitter2":"x3aR","sdp-transform":"CfIM","process":"g5IB"}],"K9HF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSelector = void 0;
exports.createSelectorCreator = createSelectorCreator;
exports.createStructuredSelector = createStructuredSelector;
exports.defaultMemoize = defaultMemoize;
function defaultEqualityCheck(a, b) {
  return a === b;
}
function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }

  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
  var length = prev.length;
  for (var i = 0; i < length; i++) {
    if (!equalityCheck(prev[i], next[i])) {
      return false;
    }
  }
  return true;
}
function defaultMemoize(func) {
  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;
  var lastArgs = null;
  var lastResult = null;
  // we reference arguments instead of spreading them for performance reasons
  return function () {
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      // apply arguments instead of spreading for performance.
      lastResult = func.apply(null, arguments);
    }
    lastArgs = arguments;
    return lastResult;
  };
}
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function (dep) {
    return typeof dep === 'function';
  })) {
    var dependencyTypes = dependencies.map(function (dep) {
      return typeof dep;
    }).join(', ');
    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptions[_key - 1] = arguments[_key];
  }
  return function () {
    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(undefined, [function () {
      recomputations++;
      // apply arguments instead of spreading for performance.
      return resultFunc.apply(null, arguments);
    }].concat(memoizeOptions));

    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.
    var selector = memoize(function () {
      var params = [];
      var length = dependencies.length;
      for (var i = 0; i < length; i++) {
        // apply arguments instead of spreading and mutate a local list of params for performance.
        params.push(dependencies[i].apply(null, arguments));
      }

      // apply arguments instead of spreading for performance.
      return memoizedResultFunc.apply(null, params);
    });
    selector.resultFunc = resultFunc;
    selector.dependencies = dependencies;
    selector.recomputations = function () {
      return recomputations;
    };
    selector.resetRecomputations = function () {
      return recomputations = 0;
    };
    return selector;
  };
}
var createSelector = createSelectorCreator(defaultMemoize);
exports.createSelector = createSelector;
function createStructuredSelector(selectors) {
  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;
  if (typeof selectors !== 'object') {
    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));
  }
  var objectKeys = Object.keys(selectors);
  return selectorCreator(objectKeys.map(function (key) {
    return selectors[key];
  }), function () {
    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      values[_key3] = arguments[_key3];
    }
    return values.reduce(function (composition, value, index) {
      composition[objectKeys[index]] = value;
      return composition;
    }, {});
  });
}
},{}],"j5Na":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeamControllerStore = void 0;
Object.defineProperty(exports, "DeviceType", {
  enumerable: true,
  get: function () {
    return _hmsVideo.DeviceType;
  }
});
Object.defineProperty(exports, "HMSAudioPluginType", {
  enumerable: true,
  get: function () {
    return _hmsVideo.HMSAudioPluginType;
  }
});
Object.defineProperty(exports, "HMSLogLevel", {
  enumerable: true,
  get: function () {
    return _hmsVideo.HMSLogLevel;
  }
});
exports.HMSRoomState = exports.HMSReactiveStore = exports.HMSPlaylistType = exports.HMSNotificationTypes = exports.HMSNotificationSeverity = exports.HMSMessageType = void 0;
Object.defineProperty(exports, "HMSSimulcastLayer", {
  enumerable: true,
  get: function () {
    return _hmsVideo.HMSSimulcastLayer;
  }
});
exports.HMSStats = void 0;
Object.defineProperty(exports, "HMSVideoPluginCanvasContextType", {
  enumerable: true,
  get: function () {
    return _hmsVideo.HMSVideoPluginCanvasContextType;
  }
});
Object.defineProperty(exports, "HMSVideoPluginType", {
  enumerable: true,
  get: function () {
    return _hmsVideo.HMSVideoPluginType;
  }
});
exports.createDefaultStoreState = exports.createDefaultStatsStore = void 0;
Object.defineProperty(exports, "parsedUserAgent", {
  enumerable: true,
  get: function () {
    return _hmsVideo.parsedUserAgent;
  }
});
exports.selectRecordingState = exports.selectRecentError = exports.selectRTMPState = exports.selectPreviewRoleName = exports.selectPreviewRole = exports.selectPermissions = exports.selectPeersWithAudioStatus = exports.selectPeersScreenSharing = exports.selectPeersMap = exports.selectPeersByRoles = exports.selectPeersByRole = exports.selectPeersByCondition = exports.selectPeers = exports.selectPeerSharingVideoPlaylist = exports.selectPeerSharingAudioPlaylist = exports.selectPeerSharingAudio = exports.selectPeerScreenSharing = exports.selectPeerNameByID = exports.selectPeerName = exports.selectPeerMetadata = exports.selectPeerCount = exports.selectPeerByID = exports.selectPeerByCondition = exports.selectPeerAudioByID = exports.selectMessagesUnreadCountByRole = exports.selectMessagesUnreadCountByPeerID = exports.selectMessagesMap = exports.selectMessagesByRole = exports.selectMessagesByPeerID = exports.selectMessageIDsInOrder = exports.selectLocalVideoTrackID = exports.selectLocalTrackIDs = exports.selectLocalPeerRoleName = exports.selectLocalPeerRole = exports.selectLocalPeerName = exports.selectLocalPeerID = exports.selectLocalPeer = exports.selectLocalMediaSettings = exports.selectLocalAudioTrackID = exports.selectIsSomeoneScreenSharing = exports.selectIsScreenShareLocallyMutedByPeerID = exports.selectIsRoleAllowedToPublish = exports.selectIsPeerVideoEnabled = exports.selectIsPeerAudioEnabled = exports.selectIsLocallyMutedByPeerID = exports.selectIsLocalVideoPluginPresent = exports.selectIsLocalVideoEnabled = exports.selectIsLocalVideoDisplayEnabled = exports.selectIsLocalScreenShared = exports.selectIsLocalAudioPluginPresent = exports.selectIsLocalAudioEnabled = exports.selectIsInPreview = exports.selectIsConnectedToRoom = exports.selectIsAudioLocallyMuted = exports.selectIsAllowedToSubscribe = exports.selectIsAllowedToPublish = exports.selectIsAllowedToPreviewMedia = exports.selectHMSStats = exports.selectHMSMessagesCount = exports.selectHMSMessages = exports.selectHLSState = exports.selectFullAppData = exports.selectErrors = exports.selectDominantSpeaker = exports.selectDidIJoinWithin = exports.selectDevices = exports.selectDegradedTracks = exports.selectConnectionQualityByPeerID = exports.selectConnectionQualities = exports.selectCameraStreamByPeerID = exports.selectBroadcastMessagesUnreadCount = exports.selectBroadcastMessages = exports.selectAvailableRoleNames = exports.selectAuxiliaryTracksByPeerID = exports.selectAuxiliaryAudioByPeerID = exports.selectAudioVolumeByPeerID = exports.selectAudioTrackVolume = exports.selectAudioTrackByPeerID = exports.selectAudioTrackByID = exports.selectAudioPlaylistTrackByPeerID = exports.selectAudioPlaylist = exports.selectAppDataByPath = exports.selectAppData = void 0;
exports.selectSessionMetadata = exports.selectSessionId = exports.selectScreenshareAudioVolumeByPeerID = exports.selectScreenVideoTrackByID = exports.selectScreenSharesByPeerId = exports.selectScreenShareByPeerID = exports.selectScreenShareAudioByPeerID = exports.selectScreenAudioTrackByID = exports.selectRoomState = exports.selectRoomStarted = exports.selectRoomStartTime = exports.selectRoomID = exports.selectRoom = exports.selectRolesMap = exports.selectRoleChangeRequest = exports.selectRoleByRoleName = exports.selectRemotePeers = void 0;
exports.selectSessionStore = Xo;
exports.selectVideoTrackByPeerID = exports.selectVideoTrackByID = exports.selectVideoPlaylistVideoTrackByPeerID = exports.selectVideoPlaylistAudioTrackByPeerID = exports.selectVideoPlaylist = exports.selectUnreadHMSMessagesCount = exports.selectTracksMap = exports.selectTrackByID = exports.selectTrackAudioByID = exports.selectTemplateAppData = exports.selectSpeakers = exports.selectSimulcastLayerByTrack = void 0;
Object.defineProperty(exports, "simulcastMapping", {
  enumerable: true,
  get: function () {
    return _hmsVideo.simulcastMapping;
  }
});
var _immer = _interopRequireDefault(require("immer"));
var _shallow = _interopRequireDefault(require("zustand/shallow"));
var _vanilla = _interopRequireDefault(require("zustand/vanilla"));
var _hmsVideo = require("@100mslive/hms-video");
var _eventemitter = require("eventemitter2");
var _reselect = require("reselect");
var _ae, _ce;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var Et = Object.defineProperty,
  bt = Object.defineProperties;
var At = Object.getOwnPropertyDescriptors;
var Ke = Object.getOwnPropertySymbols;
var Ct = Object.prototype.hasOwnProperty,
  Nt = Object.prototype.propertyIsEnumerable;
var Ve = function Ve(s, e, t) {
    return e in s ? Et(s, e, {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: t
    }) : s[e] = t;
  },
  O = function O(s, e) {
    for (var t in e || (e = {})) Ct.call(e, t) && Ve(s, t, e[t]);
    if (Ke) {
      var _iterator = _createForOfIteratorHelper(Ke(e)),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var t = _step.value;
          Nt.call(e, t) && Ve(s, t, e[t]);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return s;
  },
  J = function J(s, e) {
    return bt(s, At(e));
  };
var xt = function xt(s, e) {
  return function () {
    return e || s((e = {
      exports: {}
    }).exports, e), e.exports;
  };
};
var c = function c(s, e, t) {
  return new Promise(function (i, o) {
    var r = function r(d) {
        try {
          a(t.next(d));
        } catch (P) {
          o(P);
        }
      },
      n = function n(d) {
        try {
          a(t.throw(d));
        } catch (P) {
          o(P);
        }
      },
      a = function a(d) {
        return d.done ? i(d.value) : Promise.resolve(d.value).then(r, n);
      };
    a((t = t.apply(s, e)).next());
  });
};
var It = xt(function (Tc, js) {
  js.exports = {
    version: "0.10.2",
    license: "MIT",
    main: "dist/index.cjs.js",
    module: "dist/index.js",
    typings: "dist/index.d.ts",
    files: ["dist", "src"],
    engines: {
      node: ">=12"
    },
    exports: {
      ".": {
        require: "./dist/index.cjs.js",
        import: "./dist/index.js",
        default: "./dist/index.js"
      }
    },
    scripts: {
      prestart: "rm -rf dist && yarn types:build",
      start: 'concurrently "yarn dev" "yarn types"',
      dev: "node ../../scripts/dev",
      "build:only": "node ../../scripts/build",
      build: "yarn build:only && yarn types:build",
      types: "tsc -w",
      "types:build": "tsc -p tsconfig.json",
      format: "prettier --write src/**/*.ts",
      test: "jest --maxWorkers=1",
      "test:watch": "jest --watch",
      "test:coverage": "jest --coverage",
      lint: "eslint -c ../../.eslintrc .",
      "lint:fix": "yarn lint --fix",
      prepare: "yarn build",
      size: "size-limit",
      analyze: "size-limit --why",
      docs: "rm -rf ./docs && typedoc && rm -f ./docs/README.md && mkdir ./docs/home &&mv ./docs/modules.md ./docs/home/content.md && node ../../scripts/docs-store && npx prettier --write './docs/**/*'"
    },
    name: "@100mslive/hms-video-store",
    author: "100ms",
    sideEffects: !1,
    dependencies: {
      "@100mslive/hms-video": "0.9.2",
      eventemitter2: "^6.4.7",
      immer: "^9.0.6",
      reselect: "4.0.0",
      zustand: "3.5.7"
    },
    devDependencies: {
      "ts-node": "^10.4.0",
      tslib: "^2.2.0"
    },
    description: "This is an addon to the core sdk provided by 100ms. It abstracts away the intricacies of data management and provides a flux based reactive data store where data flows in only one direction.",
    repository: {
      type: "git",
      url: "git+https://github.com/100mslive/hms-video-store.git"
    },
    keywords: ["video", "webrtc", "conferencing", "100ms"],
    bugs: {
      url: "https://github.com/100mslive/hms-video-store/issues"
    },
    homepage: "https://github.com/100mslive/hms-video-store#readme",
    gitHead: "4e000fbf8980a6815e2b0c50e0b287472ee22fd5"
  };
});
var h;
exports.HMSRoomState = h;
(function (a) {
  a.Disconnected = "Disconnected", a.Preview = "Preview", a.Connecting = "Connecting", a.Connected = "Connected", a.Reconnecting = "Reconnecting", a.Disconnecting = "Disconnecting", a.Failed = "Failed";
})(h || (exports.HMSRoomState = h = {}));
var oe = function oe() {
    return {
      room: {
        id: "",
        isConnected: !1,
        name: "",
        peers: [],
        localPeer: "",
        roomState: h.Disconnected,
        recording: {
          browser: {
            running: !1
          },
          server: {
            running: !1
          },
          hls: {
            running: !1
          }
        },
        rtmp: {
          running: !1
        },
        hls: {
          running: !1,
          variants: []
        },
        sessionId: ""
      },
      peers: {},
      tracks: {},
      playlist: {
        audio: {
          list: {},
          selection: {
            id: "",
            hasPrevious: !1,
            hasNext: !1
          },
          progress: 0,
          volume: 0,
          currentTime: 0,
          playbackRate: 1
        },
        video: {
          list: {},
          selection: {
            id: "",
            hasPrevious: !1,
            hasNext: !1
          },
          progress: 0,
          volume: 0,
          currentTime: 0,
          playbackRate: 1
        }
      },
      messages: {
        byID: {},
        allIDs: []
      },
      speakers: {},
      connectionQualities: {},
      settings: {
        audioInputDeviceId: "",
        audioOutputDeviceId: "",
        videoInputDeviceId: ""
      },
      devices: {
        audioInput: [],
        audioOutput: [],
        videoInput: []
      },
      roles: {},
      roleChangeRequests: [],
      errors: [],
      sessionStore: {},
      templateAppData: {}
    };
  },
  re = function re() {
    return {
      peerStats: {},
      remoteTrackStats: {},
      localTrackStats: {},
      localPeer: {
        id: ""
      }
    };
  };
exports.createDefaultStatsStore = re;
exports.createDefaultStoreState = oe;
var Be;
exports.HMSMessageType = Be;
(function (e) {
  e.CHAT = "chat";
})(Be || (exports.HMSMessageType = Be = {}));
var R;
exports.HMSNotificationSeverity = R;
(function (t) {
  t.INFO = "info", t.ERROR = "error";
})(R || (exports.HMSNotificationSeverity = R = {}));
var m;
exports.HMSNotificationTypes = m;
(function (l) {
  l.PEER_JOINED = "PEER_JOINED", l.PEER_LEFT = "PEER_LEFT", l.PEER_LIST = "PEER_LIST", l.NEW_MESSAGE = "NEW_MESSAGE", l.ERROR = "ERROR", l.RECONNECTING = "RECONNECTING", l.RECONNECTED = "RECONNECTED", l.TRACK_ADDED = "TRACK_ADDED", l.TRACK_REMOVED = "TRACK_REMOVED", l.TRACK_MUTED = "TRACK_MUTED", l.TRACK_UNMUTED = "TRACK_UNMUTED", l.TRACK_DEGRADED = "TRACK_DEGRADED", l.TRACK_RESTORED = "TRACK_RESTORED", l.TRACK_DESCRIPTION_CHANGED = "TRACK_DESCRIPTION_CHANGED", l.ROLE_UPDATED = "ROLE_UPDATED", l.CHANGE_TRACK_STATE_REQUEST = "CHANGE_TRACK_STATE_REQUEST", l.CHANGE_MULTI_TRACK_STATE_REQUEST = "CHANGE_MULTI_TRACK_STATE_REQUEST", l.ROOM_ENDED = "ROOM_ENDED", l.REMOVED_FROM_ROOM = "REMOVED_FROM_ROOM", l.DEVICE_CHANGE_UPDATE = "DEVICE_CHANGE_UPDATE", l.PLAYLIST_TRACK_ENDED = "PLAYLIST_TRACK_ENDED", l.NAME_UPDATED = "NAME_UPDATED", l.METADATA_UPDATED = "METADATA_UPDATED";
})(m || (exports.HMSNotificationTypes = m = {}));
var M;
exports.HMSPlaylistType = M;
(function (t) {
  t.audio = "audio", t.video = "video";
})(M || (exports.HMSPlaylistType = M = {}));
var ae = (_ae = {}, _defineProperty(_ae, _hmsVideo.HMSPeerUpdate.PEER_JOINED, m.PEER_JOINED), _defineProperty(_ae, _hmsVideo.HMSPeerUpdate.PEER_LEFT, m.PEER_LEFT), _defineProperty(_ae, _hmsVideo.HMSPeerUpdate.ROLE_UPDATED, m.ROLE_UPDATED), _defineProperty(_ae, _hmsVideo.HMSPeerUpdate.NAME_UPDATED, m.NAME_UPDATED), _defineProperty(_ae, _hmsVideo.HMSPeerUpdate.METADATA_UPDATED, m.METADATA_UPDATED), _ae),
  ce = (_ce = {}, _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_ADDED, m.TRACK_ADDED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_REMOVED, m.TRACK_REMOVED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_MUTED, m.TRACK_MUTED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_UNMUTED, m.TRACK_UNMUTED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_DEGRADED, m.TRACK_DEGRADED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_RESTORED, m.TRACK_RESTORED), _defineProperty(_ce, _hmsVideo.HMSTrackUpdate.TRACK_DESCRIPTION_CHANGED, m.TRACK_DESCRIPTION_CHANGED), _ce);
function W(s, e) {
  var t, i;
  if (e) {
    var _iterator2 = _createForOfIteratorHelper(e.auxiliaryTracks),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var o = _step2.value;
        var r = s[o];
        Vt(r) && (i = z(r) ? r : i, t = X(r) ? r : t);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  return {
    video: t,
    audio: i
  };
}
function z(s) {
  return s && s.type === "audio";
}
function X(s) {
  return s && s.type === "video";
}
function Vt(s) {
  return s && s.source === "screen";
}
function Se(s) {
  return s && s.source === "audioplaylist";
}
function Z(s) {
  return s && s.source === "videoplaylist";
}
function qe(s) {
  return s ? Boolean(s == null ? void 0 : s.degraded) : !1;
}
function Y(s, e) {
  return e && s.tracks[e] ? s.tracks[e].enabled : !1;
}
function je(s, e) {
  return e && s.tracks[e] ? s.tracks[e].displayEnabled : !1;
}
function ee(s) {
  var o;
  var e = !1,
    t = !1,
    i = !1;
  return ((o = s == null ? void 0 : s.publishParams) == null ? void 0 : o.allowed) && (e = s.publishParams.allowed.includes("video"), t = s.publishParams.allowed.includes("audio"), i = s.publishParams.allowed.includes("screen")), {
    video: e,
    audio: t,
    screen: i
  };
}
var v = function v(s) {
    return s.room;
  },
  Bt = function Bt(s) {
    return s.errors;
  },
  co = (0, _reselect.createSelector)(Bt, function (s) {
    return s.length === 0 ? null : s.at(-1);
  }),
  So = (0, _reselect.createSelector)(v, function (s) {
    return s.id;
  }),
  D = function D(s) {
    return s.peers;
  },
  Ge = function Ge(s) {
    return s.messages.byID;
  },
  $e = function $e(s) {
    return s.messages.allIDs;
  },
  f = function f(s) {
    return s.tracks;
  },
  Fe = function Fe(s) {
    return s.settings;
  },
  fe = function fe(s) {
    return s.appData;
  },
  lo = function lo(s) {
    return s.devices;
  },
  qt = function qt(s) {
    return s.speakers;
  },
  uo = function uo(s) {
    return s.connectionQualities;
  },
  G = (0, _reselect.createSelector)([v], function (s) {
    return s && s.isConnected;
  }),
  po = (0, _reselect.createSelector)([G, v], function (s, e) {
    return s ? e.peerCount !== void 0 ? e.peerCount || 1 : e.peers.length : Math.max(e.peerCount !== void 0 ? e.peerCount : e.peers.length - 1, 0);
  }),
  V = (0, _reselect.createSelector)([v, D], function (s, e) {
    return s.peers.map(function (t) {
      return e[t];
    });
  }),
  jt = (0, _reselect.createSelector)(f, function (s) {
    return Object.values(s);
  }),
  E = (0, _reselect.createSelector)(v, D, function (s, e) {
    return e[s.localPeer];
  }),
  Q = (0, _reselect.createSelector)(v, function (s) {
    return s.localPeer;
  }),
  Mo = (0, _reselect.createSelector)(E, function (s) {
    return s == null ? void 0 : s.name;
  }),
  To = (0, _reselect.createSelector)(E, function (s) {
    return s == null ? void 0 : s.roleName;
  }),
  N = (0, _reselect.createSelector)(E, function (s) {
    return s == null ? void 0 : s.audioTrack;
  }),
  b = (0, _reselect.createSelector)(E, function (s) {
    return s == null ? void 0 : s.videoTrack;
  }),
  Gt = (0, _reselect.createSelector)(E, function (s) {
    return s == null ? void 0 : s.auxiliaryTracks;
  }),
  We = (0, _reselect.createSelector)([N, b, Gt], function (s, e, t) {
    var i = t ? _toConsumableArray(t) : [];
    return s && i.unshift(s), e && i.unshift(e), i;
  }),
  mo = (0, _reselect.createSelector)(V, function (s) {
    return s.filter(function (e) {
      return !e.isLocal;
    });
  }),
  Ho = (0, _reselect.createSelector)(D, qt, function (s, e) {
    var t = Object.entries(e).sort(function (i, o) {
      var a, d;
      var r = ((a = i[1]) == null ? void 0 : a.audioLevel) || 0;
      return (((d = o[1]) == null ? void 0 : d.audioLevel) || 0) > r ? 1 : -1;
    });
    if (t.length > 0 && t[0][1].audioLevel && t[0][1].audioLevel > 0) {
      var i = t[0][1].peerID;
      if (i in s) return s[i];
    }
    return null;
  }),
  ho = function ho(s) {
    var e = E(s);
    return Y(s, e == null ? void 0 : e.audioTrack);
  },
  ge = function ge(s) {
    var e = E(s);
    return Y(s, e == null ? void 0 : e.videoTrack);
  },
  Qe = function Qe(s) {
    var e = E(s);
    return je(s, e == null ? void 0 : e.videoTrack);
  },
  ye = (0, _reselect.createSelector)(E, f, function (s, e) {
    var _W = W(e, s),
      t = _W.video,
      i = _W.audio;
    return !!(t || i);
  }),
  $t = (0, _reselect.createSelector)(D, f, function (s, e) {
    var t;
    for (var i in s) {
      var o = s[i],
        _W2 = W(e, o),
        r = _W2.video,
        n = _W2.audio;
      if (r) return o;
      n && !t && (t = o);
    }
    return t;
  }),
  fo = (0, _reselect.createSelector)($t, function (s) {
    return !!s;
  }),
  go = (0, _reselect.createSelector)(D, f, function (s, e) {
    for (var t in s) {
      var i = s[t],
        _W3 = W(e, i),
        o = _W3.audio,
        r = _W3.video;
      if (!r && !!o) return i;
    }
  }),
  yo = (0, _reselect.createSelector)(D, f, function (s, e) {
    var t = [],
      i = [];
    for (var o in s) {
      var r = s[o],
        _W4 = W(e, r),
        n = _W4.video,
        a = _W4.audio;
      n ? t.push(r) : a && i.push(r);
    }
    return t.concat(i);
  }),
  ko = (0, _reselect.createSelector)(D, f, function (s, e) {
    for (var t in e) {
      var i = e[t];
      if (Z(i) && X(i) && i.peerId) return s[i.peerId];
    }
  }),
  Ro = (0, _reselect.createSelector)(D, f, function (s, e) {
    for (var t in e) {
      var i = e[t];
      if (Se(i) && i.peerId) return s[i.peerId];
    }
  }),
  Po = (0, _reselect.createSelector)(jt, function (s) {
    return s.filter(qe);
  }),
  Je = (0, _reselect.createSelector)($e, function (s) {
    return s.length;
  }),
  vo = (0, _reselect.createSelector)(Ge, function (s) {
    return Object.values(s).filter(function (e) {
      return !e.read;
    }).length;
  }),
  le = (0, _reselect.createSelector)($e, Ge, function (s, e) {
    var t = [];
    return s.forEach(function (i) {
      t.push(e[i]);
    }), t;
  }),
  A = (0, _reselect.createSelector)([v], function (s) {
    return s && s.roomState;
  }),
  Do = (0, _reselect.createSelector)(A, function (s) {
    return s === h.Preview;
  }),
  Io = (0, _reselect.createSelector)(v, function (s) {
    return s.roomState !== h.Disconnected;
  }),
  U = function U(s) {
    return s.roles;
  },
  Eo = (0, _reselect.createSelector)([U], function (s) {
    return Object.keys(s);
  }),
  de = (0, _reselect.createSelector)([E, U], function (s, e) {
    return (s == null ? void 0 : s.roleName) ? e[s.roleName] : null;
  }),
  Ft = function Ft(s) {
    var e;
    return (e = s.preview) == null ? void 0 : e.asRole;
  },
  Ye = (0, _reselect.createSelector)([Ft, U], function (s, e) {
    return s ? e[s] : null;
  }),
  bo = (0, _reselect.createSelector)([de], function (s) {
    var e;
    return ((e = s == null ? void 0 : s.subscribeParams) == null ? void 0 : e.subscribeToRoles) ? s.subscribeParams.subscribeToRoles.length > 0 : !1;
  }),
  ze = (0, _reselect.createSelector)(de, function (s) {
    return s == null ? void 0 : s.permissions;
  }),
  Ao = (0, _reselect.createSelector)(v, function (s) {
    return s.recording;
  }),
  Co = (0, _reselect.createSelector)(v, function (s) {
    return s.rtmp;
  }),
  No = (0, _reselect.createSelector)(v, function (s) {
    return s.hls;
  }),
  xo = (0, _reselect.createSelector)(v, function (s) {
    return s.sessionId;
  }),
  Lo = (0, _reselect.createSelector)(v, function (s) {
    return s.startedAt;
  }),
  wo = function wo(s) {
    return s.templateAppData;
  },
  Oo = function Oo(s) {
    return s.sessionMetadata;
  };
exports.selectSessionMetadata = Oo;
exports.selectTemplateAppData = wo;
exports.selectRoomStartTime = Lo;
exports.selectSessionId = xo;
exports.selectHLSState = No;
exports.selectRTMPState = Co;
exports.selectRecordingState = Ao;
exports.selectPermissions = ze;
exports.selectIsAllowedToSubscribe = bo;
exports.selectPreviewRole = Ye;
exports.selectPreviewRoleName = Ft;
exports.selectLocalPeerRole = de;
exports.selectAvailableRoleNames = Eo;
exports.selectRolesMap = U;
exports.selectRoomStarted = Io;
exports.selectIsInPreview = Do;
exports.selectRoomState = A;
exports.selectHMSMessages = le;
exports.selectUnreadHMSMessagesCount = vo;
exports.selectHMSMessagesCount = Je;
exports.selectDegradedTracks = Po;
exports.selectPeerSharingAudioPlaylist = Ro;
exports.selectPeerSharingVideoPlaylist = ko;
exports.selectPeersScreenSharing = yo;
exports.selectPeerSharingAudio = go;
exports.selectIsSomeoneScreenSharing = fo;
exports.selectPeerScreenSharing = $t;
exports.selectIsLocalScreenShared = ye;
exports.selectIsLocalVideoDisplayEnabled = Qe;
exports.selectIsLocalVideoEnabled = ge;
exports.selectIsLocalAudioEnabled = ho;
exports.selectDominantSpeaker = Ho;
exports.selectRemotePeers = mo;
exports.selectLocalTrackIDs = We;
exports.selectLocalVideoTrackID = b;
exports.selectLocalAudioTrackID = N;
exports.selectLocalPeerRoleName = To;
exports.selectLocalPeerName = Mo;
exports.selectLocalPeerID = Q;
exports.selectLocalPeer = E;
exports.selectPeers = V;
exports.selectPeerCount = po;
exports.selectIsConnectedToRoom = G;
exports.selectConnectionQualities = uo;
exports.selectSpeakers = qt;
exports.selectDevices = lo;
exports.selectFullAppData = fe;
exports.selectLocalMediaSettings = Fe;
exports.selectTracksMap = f;
exports.selectMessageIDsInOrder = $e;
exports.selectMessagesMap = Ge;
exports.selectPeersMap = D;
exports.selectRoomID = So;
exports.selectRecentError = co;
exports.selectErrors = Bt;
exports.selectRoom = v;
var Ze = function Ze() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].list;
    };
  },
  ke = function ke() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].selection;
    };
  },
  et = function et() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].progress;
    };
  },
  tt = function tt() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].currentTime;
    };
  },
  st = function st() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].playbackRate;
    };
  },
  it = function it() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return function (e) {
      return e.playlist[s].volume;
    };
  },
  ot = function ot() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return (0, _reselect.createSelector)(Ze(s), function (e) {
      return Object.values(e);
    });
  },
  rt = function rt() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : M.audio;
    return (0, _reselect.createSelector)(Ze(s), ke(s), function (e, t) {
      if (!!t.id) return e[t.id];
    });
  },
  nt = {
    selection: ke(M.audio),
    progress: et(M.audio),
    currentTime: tt(M.audio),
    playbackRate: st(M.audio),
    volume: it(M.audio),
    list: ot(M.audio),
    selectedItem: rt(M.audio)
  },
  at = {
    selection: ke(M.video),
    progress: et(M.video),
    currentTime: tt(M.video),
    playbackRate: st(M.video),
    volume: it(M.video),
    list: ot(M.video),
    selectedItem: rt(M.video)
  };
exports.selectVideoPlaylist = at;
exports.selectAudioPlaylist = nt;
function p(s) {
  return function (e) {
    return function (t) {
      return s(t, e);
    };
  };
}
var te = "HMS-Store:",
  S = /*#__PURE__*/function () {
    function S() {
      _classCallCheck(this, S);
    }
    _createClass(S, null, [{
      key: "v",
      value: function v(e) {
        for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          t[_key - 1] = arguments[_key];
        }
        this.log.apply(this, [_hmsVideo.HMSLogLevel.VERBOSE, e].concat(t));
      }
    }, {
      key: "d",
      value: function d() {
        for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          e[_key2] = arguments[_key2];
        }
        this.log.apply(this, [_hmsVideo.HMSLogLevel.DEBUG].concat(e));
      }
    }, {
      key: "i",
      value: function i() {
        for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          e[_key3] = arguments[_key3];
        }
        this.log.apply(this, [_hmsVideo.HMSLogLevel.INFO].concat(e));
      }
    }, {
      key: "w",
      value: function w() {
        for (var _len4 = arguments.length, e = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          e[_key4] = arguments[_key4];
        }
        this.log.apply(this, [_hmsVideo.HMSLogLevel.WARN].concat(e));
      }
    }, {
      key: "e",
      value: function e() {
        for (var _len5 = arguments.length, _e2 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          _e2[_key5] = arguments[_key5];
        }
        this.log.apply(this, [_hmsVideo.HMSLogLevel.ERROR].concat(_e2));
      }
    }, {
      key: "time",
      value: function time(e) {
        this.log(_hmsVideo.HMSLogLevel.TIME, "[HMSPerformanceTiming]", e);
      }
    }, {
      key: "timeEnd",
      value: function timeEnd(e) {
        this.log(_hmsVideo.HMSLogLevel.TIMEEND, "[HMSPerformanceTiming]", e, e);
      }
    }, {
      key: "cleanUp",
      value: function cleanUp() {
        performance.clearMarks(), performance.clearMeasures();
      }
    }, {
      key: "log",
      value: function log(e) {
        for (var _len6 = arguments.length, t = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          t[_key6 - 1] = arguments[_key6];
        }
        if (!(this.level.valueOf() > e.valueOf())) switch (e) {
          case _hmsVideo.HMSLogLevel.VERBOSE:
            {
              var _console;
              (_console = console).log.apply(_console, [te].concat(t));
              break;
            }
          case _hmsVideo.HMSLogLevel.DEBUG:
            {
              var _console2;
              (_console2 = console).debug.apply(_console2, [te].concat(t));
              break;
            }
          case _hmsVideo.HMSLogLevel.INFO:
            {
              var _console3;
              (_console3 = console).info.apply(_console3, [te].concat(t));
              break;
            }
          case _hmsVideo.HMSLogLevel.WARN:
            {
              var _console4;
              (_console4 = console).warn.apply(_console4, [te].concat(t));
              break;
            }
          case _hmsVideo.HMSLogLevel.ERROR:
            {
              var _console5;
              (_console5 = console).error.apply(_console5, [te].concat(t));
              break;
            }
          case _hmsVideo.HMSLogLevel.TIME:
            {
              performance.mark(t[1]);
              break;
            }
          case _hmsVideo.HMSLogLevel.TIMEEND:
            {
              var i = t[0],
                o = t[1];
              try {
                var r = performance.measure(o, o);
                this.log(_hmsVideo.HMSLogLevel.DEBUG, i, o, r == null ? void 0 : r.duration), performance.clearMarks(o), performance.clearMeasures(o);
              } catch (r) {
                this.log(_hmsVideo.HMSLogLevel.DEBUG, i, o, r);
              }
              break;
            }
        }
      }
    }]);
    return S;
  }();
S.level = _hmsVideo.HMSLogLevel.VERBOSE;
var Re = function Re(s, e) {
    return e;
  },
  se = function se(s, e) {
    return e;
  },
  ct = function ct(s, e) {
    return e;
  },
  Wt = function Wt(s, e) {
    return e;
  },
  I = (0, _reselect.createSelector)([D, Re], function (s, e) {
    return e ? s[e] : null;
  }),
  Pe = (0, _reselect.createSelector)([f, se], function (s, e) {
    return e ? s[e] : null;
  }),
  Qt = (0, _reselect.createSelector)([f, se], function (s, e) {
    if (!e) return null;
    var t = s[e];
    return (t == null ? void 0 : t.type) === "video" ? t : null;
  }),
  Jt = (0, _reselect.createSelector)([f, se], function (s, e) {
    if (!e) return null;
    var t = s[e];
    return (t == null ? void 0 : t.type) === "audio" ? t : null;
  }),
  Yt = (0, _reselect.createSelector)([f, se], function (s, e) {
    if (!e) return null;
    var t = s[e];
    return (t == null ? void 0 : t.type) === "audio" && (t == null ? void 0 : t.source) === "screen" ? t : null;
  }),
  zt = (0, _reselect.createSelector)([f, se], function (s, e) {
    if (!e) return null;
    var t = s[e];
    return (t == null ? void 0 : t.type) === "video" && (t == null ? void 0 : t.source) === "screen" ? t : null;
  }),
  x = p(I),
  zo = p((0, _reselect.createSelector)([fe, Wt], function (s, e) {
    if (!!s) return e ? s[e] : s;
  }));
exports.selectAppData = zo;
exports.selectPeerByID = x;
function Xo(s) {
  return function (e) {
    if (!!e.sessionStore) return s ? e.sessionStore[s] : e.sessionStore;
  };
}
var Zo = function Zo() {
    for (var _len7 = arguments.length, s = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      s[_key7] = arguments[_key7];
    }
    return (0, _reselect.createSelector)([fe], function (e) {
      if (!!e) {
        if (s && s.length > 0) {
          var t = e;
          for (var _i = 0, _s2 = s; _i < _s2.length; _i++) {
            var i = _s2[_i];
            if (!i) return t;
            t = t == null ? void 0 : t[i];
          }
          return t;
        }
        return e;
      }
    });
  },
  er = p((0, _reselect.createSelector)(I, function (s) {
    return s == null ? void 0 : s.name;
  })),
  ue = p(Pe),
  St = p(Qt),
  tr = p(Jt),
  sr = p(Yt),
  ir = p(zt),
  Xt = p(function (s, e) {
    var t = I(s, e);
    if (t && t.videoTrack && t.videoTrack !== "") return s.tracks[t.videoTrack];
  }),
  Zt = p(function (s, e) {
    var t = I(s, e);
    if (t && t.audioTrack && t.audioTrack !== "") return s.tracks[t.audioTrack];
  }),
  or = Xt,
  rr = p(function (s, e) {
    var t = I(s, e);
    return (t == null ? void 0 : t.auxiliaryTracks.map(function (i) {
      return s.tracks[i];
    })) || [];
  }),
  lt = function lt(s, e) {
    return e ? s.speakers[e] : null;
  },
  nr = p((0, _reselect.createSelector)(lt, function (s) {
    return (s == null ? void 0 : s.audioLevel) || 0;
  })),
  es = function es(s, e) {
    var t = Zt(e)(s);
    return lt(s, t == null ? void 0 : t.id);
  },
  ar = p((0, _reselect.createSelector)(es, function (s) {
    return (s == null ? void 0 : s.audioLevel) || 0;
  })),
  cr = p(function (s, e) {
    if (e) return s.connectionQualities[e];
  }),
  Sr = p(function (s, e) {
    var t = I(s, e);
    if (t) {
      var i = t == null ? void 0 : t.auxiliaryTracks.find(function (o) {
        return z(s.tracks[o]);
      });
      return i ? s.tracks[i] : void 0;
    }
  }),
  lr = p((0, _reselect.createSelector)(f, I, function (s, e) {
    var t = e == null ? void 0 : e.auxiliaryTracks.find(function (i) {
      var o = s[i];
      return Z(o) && X(o);
    });
    return t ? s[t] : void 0;
  })),
  dr = p((0, _reselect.createSelector)(f, I, function (s, e) {
    var t = e == null ? void 0 : e.auxiliaryTracks.find(function (i) {
      var o = s[i];
      return Z(o) && z(o);
    });
    return t ? s[t] : void 0;
  })),
  ur = p((0, _reselect.createSelector)(f, I, function (s, e) {
    var t = e == null ? void 0 : e.auxiliaryTracks.find(function (i) {
      var o = s[i];
      return Se(o) && z(o);
    });
    return t ? s[t] : void 0;
  })),
  dt = p((0, _reselect.createSelector)(f, I, function (s, e) {
    return W(s, e);
  })),
  pr = function pr(s) {
    return (0, _reselect.createSelector)(dt(s), function (e) {
      return e.video;
    });
  },
  ut = function ut(s) {
    return (0, _reselect.createSelector)(dt(s), function (e) {
      return e.audio;
    });
  },
  Mr = p(function (s, e) {
    var t = I(s, e);
    return Y(s, t == null ? void 0 : t.audioTrack);
  }),
  Tr = p(function (s, e) {
    var t = I(s, e);
    return Y(s, t == null ? void 0 : t.videoTrack);
  }),
  pt = p(function (s, e) {
    if (e && s.tracks[e]) return s.tracks[e].volume === 0;
  }),
  mr = p(function (s, e) {
    var t = I(s, e);
    return pt(t == null ? void 0 : t.audioTrack)(s);
  }),
  Hr = p(function (s, e) {
    var t = ut(e)(s);
    return pt(t == null ? void 0 : t.id)(s);
  }),
  Mt = p(function (s, e) {
    var t = Pe(s, e);
    if (t) {
      if (t.type !== "audio") {
        S.w("Please pass audio track here");
        return;
      }
      return t.volume;
    }
  }),
  hr = p(function (s, e) {
    var t = I(s, e);
    return Mt(t == null ? void 0 : t.audioTrack)(s);
  }),
  fr = p(function (s, e) {
    var t = ut(e)(s);
    return Mt(t == null ? void 0 : t.id)(s);
  }),
  gr = p(function (s, e) {
    var t = Pe(s, e);
    if (t) {
      if (t.type !== "video") {
        S.w("Please pass video track here");
        return;
      }
      return t.layer;
    }
  }),
  Tt = (0, _reselect.createSelector)([le, Q, Re], function (s, e, t) {
    if (!!t) return s.filter(function (i) {
      var o;
      return !i.recipientPeer && !((o = i.recipientRoles) == null ? void 0 : o.length) || i.sender && ![e, t].includes(i.sender) ? !1 : [e, t].includes(i.recipientPeer);
    });
  }),
  mt = (0, _reselect.createSelector)([le, ct], function (s, e) {
    if (!!e) return s.filter(function (t) {
      var i, o;
      return ((i = t.recipientRoles) == null ? void 0 : i.length) ? (o = t.recipientRoles) == null ? void 0 : o.includes(e) : !1;
    });
  }),
  ts = (0, _reselect.createSelector)(le, function (s) {
    return s.filter(function (e) {
      var t;
      return !e.recipientPeer && !((t = e.recipientRoles) == null ? void 0 : t.length);
    });
  }),
  ss = (0, _reselect.createSelector)([mt, ct], function (s) {
    return s ? s.filter(function (e) {
      return !e.read;
    }).length : 0;
  }),
  is = (0, _reselect.createSelector)([Tt, Re], function (s) {
    return s ? s.filter(function (e) {
      return !e.read;
    }).length : 0;
  }),
  yr = (0, _reselect.createSelector)(ts, function (s) {
    return s.filter(function (e) {
      return !e.read;
    }).length;
  }),
  kr = p(Tt),
  Rr = p(mt),
  Pr = p(ss),
  vr = p(is),
  Dr = function Dr(s) {
    return (0, _reselect.createSelector)([V], function (e) {
      return e.filter(function (t) {
        return t.roleName === s;
      });
    });
  },
  Ir = function Ir(s) {
    return (0, _reselect.createSelector)([V], function (e) {
      return e.filter(function (t) {
        return t.roleName ? s.includes(t.roleName) : !1;
      });
    });
  },
  Er = function Er(s) {
    return (0, _reselect.createSelector)(x(s), function (e) {
      try {
        return (e == null ? void 0 : e.metadata) && e.metadata !== "" ? JSON.parse(e.metadata) : {};
      } catch (t) {
        return console.error("cannot parse peer metadata", t), {};
      }
    });
  },
  br = function br(s) {
    return (0, _reselect.createSelector)(x(s), function (e) {
      return e == null ? void 0 : e.name;
    });
  };
exports.selectPeerName = br;
exports.selectPeerMetadata = Er;
exports.selectPeersByRoles = Ir;
exports.selectPeersByRole = Dr;
exports.selectMessagesUnreadCountByPeerID = vr;
exports.selectMessagesUnreadCountByRole = Pr;
exports.selectMessagesByRole = Rr;
exports.selectMessagesByPeerID = kr;
exports.selectBroadcastMessagesUnreadCount = yr;
exports.selectBroadcastMessages = ts;
exports.selectSimulcastLayerByTrack = gr;
exports.selectScreenshareAudioVolumeByPeerID = fr;
exports.selectAudioVolumeByPeerID = hr;
exports.selectAudioTrackVolume = Mt;
exports.selectIsScreenShareLocallyMutedByPeerID = Hr;
exports.selectIsLocallyMutedByPeerID = mr;
exports.selectIsAudioLocallyMuted = pt;
exports.selectIsPeerVideoEnabled = Tr;
exports.selectIsPeerAudioEnabled = Mr;
exports.selectScreenShareAudioByPeerID = ut;
exports.selectScreenShareByPeerID = pr;
exports.selectScreenSharesByPeerId = dt;
exports.selectAudioPlaylistTrackByPeerID = ur;
exports.selectVideoPlaylistAudioTrackByPeerID = dr;
exports.selectVideoPlaylistVideoTrackByPeerID = lr;
exports.selectAuxiliaryAudioByPeerID = Sr;
exports.selectConnectionQualityByPeerID = cr;
exports.selectPeerAudioByID = ar;
exports.selectTrackAudioByID = nr;
exports.selectAuxiliaryTracksByPeerID = rr;
exports.selectCameraStreamByPeerID = or;
exports.selectAudioTrackByPeerID = Zt;
exports.selectVideoTrackByPeerID = Xt;
exports.selectScreenVideoTrackByID = ir;
exports.selectScreenAudioTrackByID = sr;
exports.selectAudioTrackByID = tr;
exports.selectVideoTrackByID = St;
exports.selectTrackByID = ue;
exports.selectPeerNameByID = er;
exports.selectAppDataByPath = Zo;
var Lr = (0, _reselect.createSelector)([D, f], function (s, e) {
    return Object.values(s).map(function (i) {
      var o;
      return {
        peer: i,
        isAudioEnabled: i.audioTrack ? (o = e[i.audioTrack]) == null ? void 0 : o.enabled : !1
      };
    });
  }),
  os = function os(s) {
    return s.roleChangeRequests[0] || null;
  },
  wr = (0, _reselect.createSelector)([os, D, U], function (s, e, t) {
    return s ? {
      requestedBy: s.requestedBy ? e[s.requestedBy] : void 0,
      role: t[s.roleName],
      token: s.token
    } : null;
  }),
  Or = (0, _reselect.createSelector)([de], function (s) {
    return ee(s);
  }),
  _r = (0, _reselect.createSelector)([Ye], function (s) {
    return ee(s);
  });
exports.selectIsAllowedToPreviewMedia = _r;
exports.selectIsAllowedToPublish = Or;
exports.selectRoleChangeRequest = wr;
exports.selectPeersWithAudioStatus = Lr;
var rs = function rs(s) {
    return (0, _reselect.createSelector)([U], function (e) {
      return e[s];
    });
  },
  qr = function qr(s) {
    return (0, _reselect.createSelector)(rs(s), function (e) {
      return ee(e);
    });
  },
  ns = (0, _reselect.createSelector)([b, f], function (s, e) {
    var t = null;
    return s && (t = e[s]), (t == null ? void 0 : t.plugins) || [];
  }),
  as = (0, _reselect.createSelector)([N, f], function (s, e) {
    var t = null;
    return s && (t = e[s]), (t == null ? void 0 : t.plugins) || [];
  }),
  jr = function jr(s) {
    return (0, _reselect.createSelector)([ns], function (e) {
      return e.includes(s);
    });
  },
  Gr = function Gr(s) {
    return (0, _reselect.createSelector)([as], function (e) {
      return e.includes(s);
    });
  },
  $r = function $r(s) {
    return (0, _reselect.createSelector)(V, function (e) {
      return e.find(s);
    });
  },
  Fr = function Fr(s) {
    return (0, _reselect.createSelector)(V, function (e) {
      return e.filter(s);
    });
  },
  Wr = function Wr(s) {
    return (0, _reselect.createSelector)(v, function (e) {
      return e.joinedAt && Date.now() - e.joinedAt.getTime() <= s;
    });
  };
exports.selectDidIJoinWithin = Wr;
exports.selectPeersByCondition = Fr;
exports.selectPeerByCondition = $r;
exports.selectIsLocalAudioPluginPresent = Gr;
exports.selectIsLocalVideoPluginPresent = jr;
exports.selectIsRoleAllowedToPublish = qr;
exports.selectRoleByRoleName = rs;
var ve = "hmsNotification",
  De = /*#__PURE__*/function () {
    function De(e) {
      var _this = this;
      _classCallCheck(this, De);
      this.id = 0;
      this.onNotification = function (e, t) {
        var i = function i(o) {
          if (t) {
            var r;
            if (Array.isArray(t) ? r = t.includes(o.type) : r = t === o.type, !r) return;
          }
          e(o);
        };
        return _this.eventEmitter.addListener(ve, i), function () {
          _this.eventEmitter.removeListener(ve, i);
        };
      };
      this.store = e, this.eventEmitter = new _eventemitter.EventEmitter2({
        maxListeners: Object.keys(m).length
      });
    }
    _createClass(De, [{
      key: "sendPlaylistTrackEnded",
      value: function sendPlaylistTrackEnded(e) {
        var t = this.createNotification(m.PLAYLIST_TRACK_ENDED, e, R.INFO);
        this.emitEvent(t);
      }
    }, {
      key: "sendDeviceChange",
      value: function sendDeviceChange(e) {
        var i;
        var t = this.createNotification(m.DEVICE_CHANGE_UPDATE, e, e.error ? R.ERROR : R.INFO, "Selected ".concat(e.type, " device - ").concat((i = e.selection) == null ? void 0 : i.label));
        this.emitEvent(t);
      }
    }, {
      key: "sendLeaveRoom",
      value: function sendLeaveRoom(e) {
        var o;
        var t = (o = e.requestedBy) == null ? void 0 : o.name,
          i = this.createNotification(e.roomEnded || !t ? m.ROOM_ENDED : m.REMOVED_FROM_ROOM, e, R.INFO, "".concat(e.roomEnded ? "Room ended" : "Removed from room", " ").concat(t ? "by ".concat(t) : ""));
        this.emitEvent(i);
      }
    }, {
      key: "sendPeerList",
      value: function sendPeerList(e) {
        var t = this.createNotification(m.PEER_LIST, e, R.INFO);
        this.emitEvent(t);
      }
    }, {
      key: "sendPeerUpdate",
      value: function sendPeerUpdate(e, t) {
        var i = this.store.getState(x(t == null ? void 0 : t.id)) || t,
          o = ae[e];
        if (o) {
          var r = this.createNotification(o, i, R.INFO);
          this.emitEvent(r);
        }
      }
    }, {
      key: "sendTrackUpdate",
      value: function sendTrackUpdate(e, t) {
        var i = this.store.getState(ue(t)),
          o = ce[e];
        if (o) {
          var r = this.createNotification(o, i, R.INFO);
          this.emitEvent(r);
        }
      }
    }, {
      key: "sendMessageReceived",
      value: function sendMessageReceived(e) {
        var t = this.createNotification(m.NEW_MESSAGE, e, R.INFO);
        this.emitEvent(t);
      }
    }, {
      key: "sendError",
      value: function sendError(e) {
        var t = this.createNotification(m.ERROR, e, R.ERROR);
        this.emitEvent(t);
      }
    }, {
      key: "sendReconnecting",
      value: function sendReconnecting(e) {
        var t = this.createNotification(m.RECONNECTING, e, R.ERROR);
        this.emitEvent(t);
      }
    }, {
      key: "sendReconnected",
      value: function sendReconnected() {
        var e = this.createNotification(m.RECONNECTED, null, R.INFO);
        this.emitEvent(e);
      }
    }, {
      key: "sendChangeTrackStateRequest",
      value: function sendChangeTrackStateRequest(e) {
        var t = this.createNotification(m.CHANGE_TRACK_STATE_REQUEST, e, R.INFO);
        this.emitEvent(t);
      }
    }, {
      key: "sendChangeMultiTrackStateRequest",
      value: function sendChangeMultiTrackStateRequest(e) {
        var t = this.createNotification(m.CHANGE_MULTI_TRACK_STATE_REQUEST, e, R.INFO);
        this.emitEvent(t);
      }
    }, {
      key: "emitEvent",
      value: function emitEvent(e) {
        this.eventEmitter.emit(ve, e);
      }
    }, {
      key: "createNotification",
      value: function createNotification(e, t, i) {
        var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        return this.id++, {
          id: this.id,
          type: e,
          message: o,
          data: t,
          severity: i
        };
      }
    }]);
    return De;
  }();
function Ht(s) {
  return s instanceof _hmsVideo.HMSRemoteAudioTrack || s instanceof _hmsVideo.HMSRemoteVideoTrack;
}
var ht = function ht(s, e) {
    var t = Me(Object.keys(s), Object.keys(e));
    var _iterator3 = _createForOfIteratorHelper(t),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var i = _step3.value;
        var o = s[i],
          r = e[i];
        Ee(o, r) ? (K(o.auxiliaryTracks, r.auxiliaryTracks) && (r.auxiliaryTracks = o.auxiliaryTracks), Object.assign(o, r)) : be(o, r) ? delete s[i] : Ae(o, r) && (s[i] = r);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  },
  ft = function ft(s, e) {
    var t = Me(Object.keys(s), Object.keys(e));
    var _iterator4 = _createForOfIteratorHelper(t),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var i = _step4.value;
        var o = s[i],
          r = e[i];
        Ee(o, r) ? (ds(o, r), Object.assign(o, r)) : be(o, r) ? delete s[i] : Ae(o, r) && (s[i] = r);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  },
  Ie = function Ie(s, e) {
    var t = Me(Object.keys(s), Object.keys(e));
    var _iterator5 = _createForOfIteratorHelper(t),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var i = _step5.value;
        var o = s[i],
          r = e[i];
        Ee(o, r) ? Object.assign(o, r) : be(o, r) ? delete s[i] : Ae(o, r) && (s[i] = r);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  },
  gt = function gt(s, e, t) {
    var i = t.reduce(function (r, n) {
        return r[n.firstTrackId] = Object.values(e[n.getTrackIDBeingSent()] || {}).sort(function (a, d) {
          return !a.rid || !d.rid ? 0 : a.rid < d.rid ? -1 : 1;
        }), r;
      }, {}),
      o = Me(Object.keys(s), Object.keys(i));
    var _iterator6 = _createForOfIteratorHelper(o),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var r = _step6.value;
        if (!i[r]) {
          delete s[r];
          continue;
        }
        s[r] = i[r];
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  },
  ds = function ds(s, e) {
    s.plugins && K(s.plugins, e.plugins) && (e.plugins = s.plugins), s.type === "video" && s.layerDefinitions && K(s.layerDefinitions, e.layerDefinitions) && (e.layerDefinitions = s.layerDefinitions);
  },
  Ee = function Ee(s, e) {
    return s && e;
  },
  be = function be(s, e) {
    return s && !e;
  },
  Ae = function Ae(s, e) {
    return !s && e;
  },
  K = function K(s, e) {
    if (s === e || s.length === 0 && (e == null ? void 0 : e.length) === 0) return !0;
    if (!s || !e || s.length !== e.length) return !1;
    for (var t = 0; t < s.length; t++) if (s[t] !== e[t]) return !1;
    return !0;
  },
  Me = function Me(s, e) {
    var t = new Set();
    var _iterator7 = _createForOfIteratorHelper(s),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var i = _step7.value;
        t.add(i);
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    var _iterator8 = _createForOfIteratorHelper(e),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var _i2 = _step8.value;
        t.add(_i2);
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    return Array.from(t);
  };
var T = /*#__PURE__*/function () {
  function T() {
    _classCallCheck(this, T);
  }
  _createClass(T, null, [{
    key: "convertPeer",
    value: function convertPeer(e) {
      var t, i, o;
      return {
        id: e.peerId,
        name: e.name,
        roleName: (t = e.role) == null ? void 0 : t.name,
        isLocal: e.isLocal,
        videoTrack: (i = e.videoTrack) == null ? void 0 : i.trackId,
        audioTrack: (o = e.audioTrack) == null ? void 0 : o.trackId,
        auxiliaryTracks: e.auxiliaryTracks.map(function (r) {
          return r.trackId;
        }),
        customerUserId: e.customerUserId,
        metadata: e.metadata,
        joinedAt: e.joinedAt
      };
    }
  }, {
    key: "convertTrack",
    value: function convertTrack(e, t) {
      var i = {
        id: e.trackId,
        source: e.source,
        type: e.type,
        enabled: e.enabled,
        displayEnabled: e.enabled,
        peerId: e.peerId || t
      };
      return this.enrichTrack(i, e), i;
    }
  }, {
    key: "enrichTrack",
    value: function enrichTrack(e, t) {
      var i = t.getMediaTrackSettings();
      t instanceof _hmsVideo.HMSRemoteAudioTrack && (e.volume = t.getVolume() || 0), T.updateDeviceID(e, t), T.enrichLocalTrack(e, t), e.type === "video" && (e.source === "screen" ? (e.displaySurface = i.displaySurface, T.enrichScreenTrack(e, t)) : e.source === "regular" && (e.facingMode = i.facingMode), e.height = i.height, e.width = i.width, T.enrichVideoTrack(e, t)), T.enrichPluginsDetails(e, t);
    }
  }, {
    key: "enrichLocalTrack",
    value: function enrichLocalTrack(e, t) {
      (t instanceof _hmsVideo.HMSLocalVideoTrack || t instanceof _hmsVideo.HMSLocalAudioTrack) && (e.isPublished = t.isPublished);
    }
  }, {
    key: "updateDeviceID",
    value: function updateDeviceID(e, t) {
      var i;
      t instanceof _hmsVideo.HMSLocalVideoTrack || t instanceof _hmsVideo.HMSLocalAudioTrack ? e.deviceID = t.settings.deviceId : e.deviceID = (i = t.getMediaTrackSettings()) == null ? void 0 : i.deviceId;
    }
  }, {
    key: "enrichVideoTrack",
    value: function enrichVideoTrack(e, t) {
      t instanceof _hmsVideo.HMSRemoteVideoTrack && (e.layer = t.getLayer(), e.preferredLayer = t.getPreferredLayer(), e.degraded = t.degraded), (t instanceof _hmsVideo.HMSRemoteVideoTrack || t instanceof _hmsVideo.HMSLocalVideoTrack) && (K(t.getSimulcastDefinitions(), e.layerDefinitions) || (e.layerDefinitions = t.getSimulcastDefinitions()));
    }
  }, {
    key: "enrichScreenTrack",
    value: function enrichScreenTrack(e, t) {
      var i, o;
      if (t instanceof _hmsVideo.HMSLocalVideoTrack) {
        var r = (i = t.getCaptureHandle) == null ? void 0 : i.call(t);
        (r == null ? void 0 : r.handle) !== ((o = e.captureHandle) == null ? void 0 : o.handle) && (e.captureHandle = r), t.isCurrentTab && (e.displaySurface = "selfBrowser");
      }
    }
  }, {
    key: "enrichPluginsDetails",
    value: function enrichPluginsDetails(e, t) {
      (t instanceof _hmsVideo.HMSLocalVideoTrack || t instanceof _hmsVideo.HMSLocalAudioTrack) && (K(t.getPlugins(), e.plugins) || (e.plugins = t.getPlugins()));
    }
  }, {
    key: "convertRoom",
    value: function convertRoom(e) {
      var r, n;
      var _T$convertRecordingSt = T.convertRecordingStreamingState(e == null ? void 0 : e.recording, e == null ? void 0 : e.rtmp, e == null ? void 0 : e.hls),
        t = _T$convertRecordingSt.recording,
        i = _T$convertRecordingSt.rtmp,
        o = _T$convertRecordingSt.hls;
      return {
        id: e.id,
        name: e.name,
        localPeer: (n = (r = e.localPeer) == null ? void 0 : r.peerId) != null ? n : "",
        recording: t,
        rtmp: i,
        hls: o,
        sessionId: e.sessionId,
        startedAt: e.startedAt,
        joinedAt: e.joinedAt,
        peerCount: e.peerCount
      };
    }
  }, {
    key: "convertMessage",
    value: function convertMessage(e) {
      var t, i, o, r, n, a, d;
      return {
        sender: (t = e.sender) == null ? void 0 : t.peerId,
        senderName: (i = e.sender) == null ? void 0 : i.name,
        senderRole: (r = (o = e.sender) == null ? void 0 : o.role) == null ? void 0 : r.name,
        senderUserId: (n = e.sender) == null ? void 0 : n.customerUserId,
        recipientPeer: (a = e.recipientPeer) == null ? void 0 : a.peerId,
        recipientRoles: (d = e.recipientRoles) == null ? void 0 : d.map(function (P) {
          return P.name;
        }),
        time: e.time,
        type: e.type,
        message: e.message
      };
    }
  }, {
    key: "convertRoles",
    value: function convertRoles(e) {
      var t = {};
      return e && e.forEach(function (i) {
        t[i.name] = i;
      }), t;
    }
  }, {
    key: "convertRoleChangeRequest",
    value: function convertRoleChangeRequest(e) {
      var t;
      return {
        requestedBy: (t = e.requestedBy) == null ? void 0 : t.peerId,
        roleName: e.role.name,
        token: e.token
      };
    }
  }, {
    key: "convertException",
    value: function convertException(e) {
      return {
        code: e.code,
        action: e.action,
        name: e.name,
        message: e.message,
        description: e.description,
        isTerminal: e.isTerminal,
        nativeError: e.nativeError,
        timestamp: new Date()
      };
    }
  }, {
    key: "convertDeviceChangeUpdate",
    value: function convertDeviceChangeUpdate(e) {
      var t = {
        devices: e.devices,
        selection: e.selection,
        type: e.type
      };
      return e.error && (t.error = this.convertException(e.error)), t;
    }
  }, {
    key: "convertPlaylist",
    value: function convertPlaylist(e) {
      var t = this.getConvertedPlaylistType(e, M.audio),
        i = this.getConvertedPlaylistType(e, M.video);
      return {
        audio: t,
        video: i
      };
    }
  }, {
    key: "convertPlaylistItem",
    value: function convertPlaylistItem(e, t) {
      var i = t.type,
        o = e.getCurrentSelection(i),
        r = e.isPlaying(i),
        n = t.url === (o == null ? void 0 : o.url);
      return J(O({}, t), {
        type: t.type,
        selected: n,
        playing: n && r
      });
    }
  }, {
    key: "getConvertedPlaylistType",
    value: function getConvertedPlaylistType(e, t) {
      var i = {},
        o = e.getCurrentSelection(t),
        r = e.getCurrentProgress(t),
        n = e.getVolume(t),
        a = e.getList(t),
        d = e.getCurrentIndex(t);
      return e.getList(t).forEach(function (P) {
        i[P.id] = T.convertPlaylistItem(e, P);
      }), {
        list: i,
        selection: {
          id: o == null ? void 0 : o.id,
          hasPrevious: d > 0,
          hasNext: d < a.length - 1
        },
        progress: r,
        volume: n,
        currentTime: e.getCurrentTime(t),
        playbackRate: e.getPlaybackRate(t)
      };
    }
  }, {
    key: "convertRecordingStreamingState",
    value: function convertRecordingStreamingState(e, t, i) {
      var o;
      return {
        recording: {
          browser: O({
            running: !1
          }, e == null ? void 0 : e.browser),
          server: O({
            running: !1
          }, e == null ? void 0 : e.server),
          hls: O({
            running: !1
          }, e == null ? void 0 : e.hls)
        },
        rtmp: O({
          running: !1
        }, t),
        hls: {
          variants: ((o = i == null ? void 0 : i.variants) == null ? void 0 : o.map(function (r) {
            return r;
          })) || [],
          running: !!(i == null ? void 0 : i.running),
          error: i == null ? void 0 : i.error
        }
      };
    }
  }]);
  return T;
}();
var Te = /*#__PURE__*/function () {
  function Te(e, t, i, o) {
    _classCallCheck(this, Te);
    this.playlistManager = e;
    this.syncPlaylistState = i;
    this.store = o;
    this.type = t;
  }
  _createClass(Te, [{
    key: "play",
    value: function play(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (e) {
                _context.next = 3;
                break;
              }
              S.w("Please pass id to play");
              return _context.abrupt("return");
            case 3:
              _context.next = 5;
              return this.playlistManager.setEnabled(!0, {
                id: e,
                type: this.type
              });
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "pause",
    value: function pause() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var e, t;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              e = this.type === M.audio ? nt : at, t = this.store.getState(e.selection);
              if (t.id) {
                _context2.next = 4;
                break;
              }
              S.w("No item is currently playing to pause");
              return _context2.abrupt("return");
            case 4:
              _context2.next = 6;
              return this.playlistManager.setEnabled(!1, {
                id: t.id,
                type: this.type
              });
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "playNext",
    value: function playNext() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.playlistManager.playNext(this.type);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
    }
  }, {
    key: "playPrevious",
    value: function playPrevious() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.playlistManager.playPrevious(this.type);
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
    }
  }, {
    key: "seek",
    value: function seek(e) {
      this.playlistManager.seek(e, this.type), this.syncPlaylistState("seekOn".concat(this.type, "Playlist"));
    }
  }, {
    key: "seekTo",
    value: function seekTo(e) {
      this.playlistManager.seekTo(e, this.type), this.syncPlaylistState("seekToOn".concat(this.type, "Playlist"));
    }
  }, {
    key: "setVolume",
    value: function setVolume(e) {
      this.playlistManager.setVolume(e, this.type), this.syncPlaylistState("setVolumeOn".concat(this.type, "Playlist"));
    }
  }, {
    key: "setList",
    value: function setList(e) {
      this.playlistManager.setList(e), this.syncPlaylistState("setListOn".concat(this.type, "Playlist"));
    }
  }, {
    key: "stop",
    value: function stop() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.playlistManager.stop(this.type);
            case 2:
              this.syncPlaylistState("stop".concat(this.type, "Playlist"));
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
    }
  }, {
    key: "setIsAutoplayOn",
    value: function setIsAutoplayOn(e) {
      this.playlistManager.setIsAutoplayOn(this.type, e);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(e) {
      this.playlistManager.setPlaybackRate(this.type, e), this.syncPlaylistState("set".concat(this.type, "PlaybackRate"));
    }
  }, {
    key: "removeItem",
    value: function removeItem(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var t;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.playlistManager.removeItem(e, this.type);
            case 2:
              t = _context6.sent;
              return _context6.abrupt("return", (t && this.syncPlaylistState("remove".concat(this.type, "PlaylistItem")), t));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
    }
  }, {
    key: "clearList",
    value: function clearList() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.playlistManager.clearList(this.type);
            case 2:
              this.syncPlaylistState("clear".concat(this.type, "Playlist"));
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
    }
  }]);
  return Te;
}();
var Ne = /*#__PURE__*/function () {
  function Ne(e, t) {
    _classCallCheck(this, Ne);
    this.sdk = e;
    this.setLocally = t;
  }
  _createClass(Ne, [{
    key: "sdkSessionStore",
    get: function get() {
      return this.sdk.getSessionStore();
    }
  }, {
    key: "set",
    value: function set(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var _yield$this$sdkSessio, i;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.sdkSessionStore.set(String(e), t);
            case 2:
              _yield$this$sdkSessio = _context8.sent;
              i = _yield$this$sdkSessio.value;
              this.setLocally({
                key: e,
                value: i
              });
            case 5:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
    }
  }, {
    key: "observe",
    value: function observe(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var t;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              t = Array.isArray(e) ? e.map(function (i) {
                return String(i);
              }) : [String(e)];
              _context9.next = 3;
              return this.sdkSessionStore.observe(t);
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
    }
  }, {
    key: "unobserve",
    value: function unobserve(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var t;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              t = Array.isArray(e) ? e.map(function (i) {
                return String(i);
              }) : [String(e)];
              _context10.next = 3;
              return this.sdkSessionStore.unobserve(t);
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
    }
  }]);
  return Ne;
}();
var xe = /*#__PURE__*/function () {
  function xe(e, t) {
    _classCallCheck(this, xe);
    this.intervalMs = 100, this.shouldMonitor = !1, this.hasStarted = !1, this.unsubs = [], this.analysers = {}, this.store = e, this.actions = t;
  }
  _createClass(xe, [{
    key: "start",
    value: function start() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var e, t;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (!this.hasStarted) {
                _context11.next = 2;
                break;
              }
              return _context11.abrupt("return");
            case 2:
              this.hasStarted = !0, S.d("starting audio level monitor for remote peers", this.store);
              e = this.store.getState(G);
              S.d("starting audio levels is connected to room", e);
              _context11.t0 = e;
              if (!_context11.t0) {
                _context11.next = 9;
                break;
              }
              _context11.next = 9;
              return this.monitorAudioLevels();
            case 9:
              t = this.store.subscribe(this.monitorAudioLevels.bind(this), G);
              this.unsubs.push(t);
            case 11:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
    }
  }, {
    key: "stop",
    value: function stop() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              !this.hasStarted || (this.hasStarted = !1, this.shouldMonitor = !1, this.unsubs.forEach(function (e) {
                return e();
              }), S.d("stopped audio level monitor for remote peers"));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
    }
  }, {
    key: "monitorAudioLevels",
    value: function monitorAudioLevels() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        var _this2 = this;
        var t;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (this.store.getState(G)) {
                _context13.next = 3;
                break;
              }
              this.shouldMonitor && (S.i("room no longer connected, stopping audio level monitoring for remote"), this.shouldMonitor = !1);
              return _context13.abrupt("return");
            case 3:
              if (!this.shouldMonitor) {
                _context13.next = 5;
                break;
              }
              return _context13.abrupt("return");
            case 5:
              S.i("monitoring audio levels"), this.shouldMonitor = !0;
              t = function t() {
                _this2.shouldMonitor ? (_this2.logAllPeersAudioLevels(), setTimeout(t, _this2.intervalMs)) : S.i("stopped monitoring audio levels");
              };
              setTimeout(t, 1e3);
            case 8:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
    }
  }, {
    key: "logAllPeersAudioLevels",
    value: function logAllPeersAudioLevels() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        var o, t, i, _iterator9, _step9, _r2, n, a, d, r;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (window.__triggerBeamEvent__) {
                _context14.next = 2;
                break;
              }
              return _context14.abrupt("return");
            case 2:
              t = this.store.getState(V).filter(function (r) {
                return !!r.audioTrack;
              }), i = [];
              _iterator9 = _createForOfIteratorHelper(t);
              _context14.prev = 4;
              _iterator9.s();
            case 6:
              if ((_step9 = _iterator9.n()).done) {
                _context14.next = 16;
                break;
              }
              _r2 = _step9.value;
              n = this.actions.hmsSDKTracks[_r2.audioTrack], a = (o = n == null ? void 0 : n.stream) == null ? void 0 : o.nativeStream;
              if (!(!!_r2.joinedAt && a)) {
                _context14.next = 14;
                break;
              }
              _context14.next = 12;
              return this.getAudioLevel(_r2, a);
            case 12:
              d = _context14.sent;
              d.level > 0 && i.push(d);
            case 14:
              _context14.next = 6;
              break;
            case 16:
              _context14.next = 21;
              break;
            case 18:
              _context14.prev = 18;
              _context14.t0 = _context14["catch"](4);
              _iterator9.e(_context14.t0);
            case 21:
              _context14.prev = 21;
              _iterator9.f();
              return _context14.finish(21);
            case 24:
              if (i.length > 0) {
                r = {
                  event: "app-audio-level",
                  data: i
                };
                window.__triggerBeamEvent__(JSON.stringify(r));
              }
            case 25:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this, [[4, 18, 21, 24]]);
      }));
    }
  }, {
    key: "getAudioLevel",
    value: function getAudioLevel(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        var i, o;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              this.analysers[t.id] || (this.analysers[t.id] = this.createAnalyserNode(t));
              i = this.analysers[t.id], o = this.calculateAudioLevel(i);
              return _context15.abrupt("return", {
                peerId: e.id,
                peerName: e.name,
                level: o
              });
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
    }
  }, {
    key: "createAnalyserNode",
    value: function createAnalyserNode(e) {
      this.audioContext || (this.audioContext = new AudioContext());
      var t = this.audioContext.createAnalyser();
      return this.audioContext.createMediaStreamSource(e).connect(t), t;
    }
  }, {
    key: "calculateAudioLevel",
    value: function calculateAudioLevel(e) {
      var t = new Uint8Array(e.fftSize);
      e.getByteTimeDomainData(t);
      var i = .009,
        o = i;
      var _iterator10 = _createForOfIteratorHelper(t),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var a = _step10.value;
          o = Math.max(o, (a - 128) / 128);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      var r = (Math.log(i) - Math.log(o)) / Math.log(i);
      return Math.ceil(Math.min(Math.max(r * 100, 0), 100));
    }
  }]);
  return xe;
}();
var Le = /*#__PURE__*/function () {
  function Le(e, t, i) {
    var _this3 = this;
    _classCallCheck(this, Le);
    this.hmsSDKTracks = {};
    this.hmsSDKPeers = {};
    this.isRoomJoinCalled = !1;
    this.ignoredMessageTypes = [];
    this.setProgress = function (_ref) {
      var e = _ref.type,
        t = _ref.progress;
      _this3.setState(function (i) {
        i.playlist[e].progress = t, i.playlist[e].currentTime = _this3.sdk.getPlaylistManager().getCurrentTime(e);
      }, "playlistProgress");
    };
    this.syncPlaylistState = function (e) {
      _this3.setState(function (t) {
        Object.assign(t.playlist, T.convertPlaylist(_this3.sdk.getPlaylistManager()));
      }, e);
    };
    this.sendPeerUpdateNotification = function (e, t) {
      var i = _this3.store.getState(x(t.peerId)),
        o = ae[e] || "peerUpdate";
      _this3.syncRoomState(o), i || (i = _this3.store.getState(x(t.peerId))), _this3.hmsNotifications.sendPeerUpdate(e, i);
    };
    this.setState = function (e, t) {
      return _this3.store.namedSetState(e, t);
    };
    this.store = e, this.sdk = t, this.hmsNotifications = i, this.sessionStore = new Ne(this.sdk, this.setSessionStoreValueLocally.bind(this));
  }
  _createClass(Le, [{
    key: "refreshDevices",
    value: function refreshDevices() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.sdk.refreshDevices();
            case 2:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
    }
  }, {
    key: "unblockAudio",
    value: function unblockAudio() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.sdk.getAudioOutput().unblockAutoplay();
            case 2:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
    }
  }, {
    key: "setVolume",
    value: function setVolume(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!t) {
                _context18.next = 5;
                break;
              }
              _context18.next = 3;
              return this.setTrackVolume(e, t);
            case 3:
              _context18.next = 8;
              break;
            case 5:
              _context18.next = 7;
              return this.sdk.getAudioOutput().setVolume(e);
            case 7:
              this.syncRoomState("setOutputVolume");
            case 8:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
    }
  }, {
    key: "setAudioOutputDevice",
    value: function setAudioOutputDevice(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.sdk.getAudioOutput().setDevice(e);
            case 2:
              _context19.t0 = _context19.sent;
              if (!_context19.t0) {
                _context19.next = 5;
                break;
              }
              this.setState(function (i) {
                i.settings.audioOutputDeviceId = e;
              }, "setAudioOutputDevice");
            case 5:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
    }
  }, {
    key: "setPreferredLayer",
    value: function setPreferredLayer(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
        var o, i;
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              i = this.hmsSDKTracks[e];
              if (!i) {
                _context20.next = 17;
                break;
              }
              if (!(i instanceof _hmsVideo.HMSRemoteVideoTrack)) {
                _context20.next = 14;
                break;
              }
              if (!(t === _hmsVideo.HMSSimulcastLayer.NONE)) {
                _context20.next = 6;
                break;
              }
              S.d("layer ".concat(_hmsVideo.HMSSimulcastLayer.NONE, " will be ignored"));
              return _context20.abrupt("return");
            case 6:
              if (!(((o = this.store.getState(St(e))) == null ? void 0 : o.preferredLayer) === t)) {
                _context20.next = 9;
                break;
              }
              S.d("preferred layer is already ".concat(t));
              return _context20.abrupt("return");
            case 9:
              this.setState(function (n) {
                var a = n.tracks[e];
                a && (a.preferredLayer = t);
              }, "setPreferredLayer");
              _context20.next = 12;
              return i.setPreferredLayer(t);
            case 12:
              _context20.next = 15;
              break;
            case 14:
              S.d("track ".concat(e, " is not a remote video track"));
            case 15:
              _context20.next = 18;
              break;
            case 17:
              this.logPossibleInconsistency("track ".concat(e, " not present, unable to set preffer layer"));
            case 18:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
    }
  }, {
    key: "getAuthTokenByRoomCode",
    value: function getAuthTokenByRoomCode(e, t) {
      return this.sdk.getAuthTokenByRoomCode(e, t);
    }
  }, {
    key: "preview",
    value: function preview(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
        var t;
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              if (!this.isRoomJoinCalled) {
                _context21.next = 3;
                break;
              }
              this.logPossibleInconsistency("attempting to call preview after join was called");
              return _context21.abrupt("return");
            case 3:
              t = this.store.getState(A);
              if (!(t === h.Preview || t === h.Connecting)) {
                _context21.next = 7;
                break;
              }
              this.logPossibleInconsistency("attempting to call preview while room is in preview/connecting");
              return _context21.abrupt("return");
            case 7:
              _context21.prev = 7;
              this.setState(function (i) {
                i.room.roomState = h.Connecting;
              }, "connecting");
              _context21.next = 11;
              return this.sdkPreviewWithListeners(e);
            case 11:
              _context21.next = 16;
              break;
            case 13:
              _context21.prev = 13;
              _context21.t0 = _context21["catch"](7);
              throw S.e("Cannot show preview. Failed to connect to room - ", _context21.t0), _context21.t0;
            case 16:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this, [[7, 13]]);
      }));
    }
  }, {
    key: "join",
    value: function join(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              if (!this.isRoomJoinCalled) {
                _context22.next = 3;
                break;
              }
              this.logPossibleInconsistency("room join is called again");
              return _context22.abrupt("return");
            case 3:
              _context22.prev = 3;
              this.isRoomJoinCalled = !0;
              this.setState(function (t) {
                t.room.roomState = h.Connecting;
              }, "join");
              _context22.next = 8;
              return this.sdkJoinWithListeners(e);
            case 8:
              _context22.next = 13;
              break;
            case 10:
              _context22.prev = 10;
              _context22.t0 = _context22["catch"](3);
              throw this.isRoomJoinCalled = !1, S.e("Failed to connect to room - ", _context22.t0), _context22.t0;
            case 13:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this, [[3, 10]]);
      }));
    }
  }, {
    key: "leave",
    value: function leave() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var _this4 = this;
        var e, t, i;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              e = this.store.getState(G), t = !0;
              e || (t = !1, this.logPossibleInconsistency("room leave is called when no room is connected"));
              i = this.store.getState(A);
              return _context23.abrupt("return", (this.setState(function (o) {
                o.room.roomState = h.Disconnecting;
              }, "leaving"), this.sdk.leave(t).then(function () {
                _this4.resetState("leave"), _this4.beamSpeakerLabelsLogger && _this4.beamSpeakerLabelsLogger.stop().catch(S.e), S.i("left room");
              }).catch(function (o) {
                S.e("error in leaving room - ", o), _this4.setState(function (r) {
                  r.room.roomState = i;
                }, "revertLeave");
              })));
            case 4:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
    }
  }, {
    key: "setScreenShareEnabled",
    value: function setScreenShareEnabled(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              typeof t == "boolean" && (t = {
                audioOnly: t
              });
              _context24.prev = 1;
              if (!e) {
                _context24.next = 7;
                break;
              }
              _context24.next = 5;
              return this.startScreenShare(t);
            case 5:
              _context24.next = 9;
              break;
            case 7:
              _context24.next = 9;
              return this.stopScreenShare();
            case 9:
              _context24.next = 14;
              break;
            case 11:
              _context24.prev = 11;
              _context24.t0 = _context24["catch"](1);
              throw this.hmsNotifications.sendError(T.convertException(_context24.t0)), _context24.t0;
            case 14:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this, [[1, 11]]);
      }));
    }
  }, {
    key: "addTrack",
    value: function addTrack(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "regular";
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.sdk.addTrack(e, t);
            case 2:
              this.syncRoomState("addTrack");
            case 3:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
    }
  }, {
    key: "removeTrack",
    value: function removeTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.sdk.removeTrack(e);
            case 2:
              this.syncRoomState("removeTrack");
            case 3:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
    }
  }, {
    key: "setLocalAudioEnabled",
    value: function setLocalAudioEnabled(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        var t;
        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              t = this.store.getState(N);
              _context27.t0 = t;
              if (!_context27.t0) {
                _context27.next = 5;
                break;
              }
              _context27.next = 5;
              return this.setEnabledTrack(t, e);
            case 5:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
    }
  }, {
    key: "setLocalVideoEnabled",
    value: function setLocalVideoEnabled(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
        var t;
        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              t = this.store.getState(b);
              _context28.t0 = t;
              if (!_context28.t0) {
                _context28.next = 5;
                break;
              }
              _context28.next = 5;
              return this.setEnabledTrack(t, e);
            case 5:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
    }
  }, {
    key: "setEnabledTrack",
    value: function setEnabledTrack(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
        var _this5 = this;
        var r, o;
        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              if (!(((r = this.store.getState().tracks[e]) == null ? void 0 : r.enabled) === t)) {
                _context29.next = 3;
                break;
              }
              this.logPossibleInconsistency("local track[".concat(e, "] enabled state - ").concat(t));
              return _context29.abrupt("return");
            case 3:
              this.setState(function (n) {
                n.tracks[e] ? n.tracks[e].displayEnabled = t : _this5.logPossibleInconsistency("track id not found for setEnabled");
              }, "displayEnabled");
              _context29.prev = 4;
              _context29.next = 7;
              return this.setEnabledSDKTrack(e, t);
            case 7:
              this.syncRoomState("setEnabled");
              _context29.next = 13;
              break;
            case 10:
              _context29.prev = 10;
              _context29.t0 = _context29["catch"](4);
              throw this.setState(function (a) {
                a.tracks[e].displayEnabled = !t;
              }, "rollbackDisplayEnabled"), this.hmsNotifications.sendError(T.convertException(_context29.t0)), _context29.t0;
            case 13:
              o = t ? _hmsVideo.HMSTrackUpdate.TRACK_UNMUTED : _hmsVideo.HMSTrackUpdate.TRACK_MUTED;
              this.hmsNotifications.sendTrackUpdate(o, e);
            case 15:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this, [[4, 10]]);
      }));
    }
  }, {
    key: "setAudioSettings",
    value: function setAudioSettings(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
        var t;
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              t = this.store.getState(N);
              _context30.t0 = t;
              if (!_context30.t0) {
                _context30.next = 6;
                break;
              }
              _context30.next = 5;
              return this.setSDKLocalAudioTrackSettings(t, e);
            case 5:
              this.syncRoomState("setAudioSettings");
            case 6:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
    }
  }, {
    key: "setVideoSettings",
    value: function setVideoSettings(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        var t;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              t = this.store.getState(b);
              _context31.t0 = t;
              if (!_context31.t0) {
                _context31.next = 6;
                break;
              }
              _context31.next = 5;
              return this.setSDKLocalVideoTrackSettings(t, e);
            case 5:
              this.syncRoomState("setVideoSettings");
            case 6:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
    }
  }, {
    key: "switchCamera",
    value: function switchCamera() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        var e, _t2;
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              e = this.store.getState(b);
              if (!e) {
                _context32.next = 8;
                break;
              }
              _t2 = this.hmsSDKTracks[e];
              _context32.t0 = _t2;
              if (!_context32.t0) {
                _context32.next = 8;
                break;
              }
              _context32.next = 7;
              return _t2.switchCamera();
            case 7:
              this.syncRoomState("switchCamera");
            case 8:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(e) {
      this.sendBroadcastMessage(e);
    }
  }, {
    key: "sendBroadcastMessage",
    value: function sendBroadcastMessage(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
        var i;
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return this.sdk.sendBroadcastMessage(e, t);
            case 2:
              i = _context33.sent;
              this.updateMessageInStore(i, {
                message: e,
                type: t
              });
            case 4:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
    }
  }, {
    key: "sendGroupMessage",
    value: function sendGroupMessage(e, t, i) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
        var o, r, n;
        return _regeneratorRuntime().wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              o = this.store.getState(U);
              r = t.map(function (a) {
                return o[a];
              });
              _context34.next = 4;
              return this.sdk.sendGroupMessage(e, r, i);
            case 4:
              n = _context34.sent;
              this.updateMessageInStore(n, {
                message: e,
                recipientRoles: t,
                type: i
              });
            case 6:
            case "end":
              return _context34.stop();
          }
        }, _callee34, this);
      }));
    }
  }, {
    key: "sendDirectMessage",
    value: function sendDirectMessage(e, t, i) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
        var o, r;
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              o = this.hmsSDKPeers[t];
              _context35.next = 3;
              return this.sdk.sendDirectMessage(e, o, i);
            case 3:
              r = _context35.sent;
              this.updateMessageInStore(r, {
                message: e,
                recipientPeer: o.peerId,
                type: i
              });
            case 5:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this);
      }));
    }
  }, {
    key: "updateMessageInStore",
    value: function updateMessageInStore(e, t) {
      if (!e) throw S.w("sendMessage", "Failed to send message", t), Error("sendMessage Failed - ".concat(JSON.stringify(t)));
      var i = T.convertMessage(e);
      return i.read = !0, i.senderName = "You", i.ignored = this.ignoredMessageTypes.includes(i.type), this.putMessageInStore(i), i;
    }
  }, {
    key: "setMessageRead",
    value: function setMessageRead(e, t) {
      var _this6 = this;
      this.setState(function (i) {
        t ? i.messages.byID[t] ? i.messages.byID[t].read = e : _this6.logPossibleInconsistency("no message with id is found") : i.messages.allIDs.forEach(function (o) {
          i.messages.byID[o].read = e;
        });
      }, "setMessageRead");
    }
  }, {
    key: "attachVideo",
    value: function attachVideo(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
        var _this7 = this;
        return _regeneratorRuntime().wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              if (!(S.d("[HMSSDKAction] attaching the video element ".concat(e, " ").concat(t)), this.localAndVideoUnmuting(e))) {
                _context37.next = 2;
                break;
              }
              return _context37.abrupt("return", new Promise(function (i) {
                var o = _this7.store.subscribe(function (r) {
                  return c(_this7, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
                    return _regeneratorRuntime().wrap(function _callee36$(_context36) {
                      while (1) switch (_context36.prev = _context36.next) {
                        case 0:
                          _context36.t0 = r;
                          if (!_context36.t0) {
                            _context36.next = 6;
                            break;
                          }
                          _context36.next = 4;
                          return this.attachVideoInternal(e, t);
                        case 4:
                          o();
                          i();
                        case 6:
                        case "end":
                          return _context36.stop();
                      }
                    }, _callee36, this);
                  }));
                }, ge);
              }));
            case 2:
              _context37.next = 4;
              return this.attachVideoInternal(e, t);
            case 4:
            case "end":
              return _context37.stop();
          }
        }, _callee37, this);
      }));
    }
  }, {
    key: "detachVideo",
    value: function detachVideo(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
        var i;
        return _regeneratorRuntime().wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              S.d("[HMSSDKAction] detaching the video element ".concat(e, " ").concat(t));
              i = this.hmsSDKTracks[e];
              if (!((i == null ? void 0 : i.type) === "video")) {
                _context38.next = 7;
                break;
              }
              _context38.next = 5;
              return this.sdk.detachVideo(i, t);
            case 5:
              _context38.next = 8;
              break;
            case 7:
              t && (t.srcObject = null), S.d("possible inconsistency detected - no video track found to remove sink");
            case 8:
            case "end":
              return _context38.stop();
          }
        }, _callee38, this);
      }));
    }
  }, {
    key: "addPluginToVideoTrack",
    value: function addPluginToVideoTrack(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
        return _regeneratorRuntime().wrap(function _callee39$(_context39) {
          while (1) switch (_context39.prev = _context39.next) {
            case 0:
              return _context39.abrupt("return", this.addRemoveVideoPlugin(e, "add", t));
            case 1:
            case "end":
              return _context39.stop();
          }
        }, _callee39, this);
      }));
    }
  }, {
    key: "addPluginToAudioTrack",
    value: function addPluginToAudioTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
        return _regeneratorRuntime().wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              return _context40.abrupt("return", this.addRemoveAudioPlugin(e, "add"));
            case 1:
            case "end":
              return _context40.stop();
          }
        }, _callee40, this);
      }));
    }
  }, {
    key: "validateVideoPluginSupport",
    value: function validateVideoPluginSupport(e) {
      var t = {};
      if (t.isSupported = !1, !e) return S.w("no plugin passed in for checking support"), t.errMsg = "no plugin passed in for checking support", t;
      var i = this.store.getState(b);
      if (!i) return S.w("video Track not added to local peer yet"), t.errMsg = "call this function only after local peer has video track", t;
      var o = this.hmsSDKTracks[i];
      return o ? t = o.validatePlugin(e) : (S.w("track ".concat(i, " not present, unable to validate plugin")), t.errMsg = "track ".concat(i, " not present, unable to validate plugin")), t;
    }
  }, {
    key: "validateAudioPluginSupport",
    value: function validateAudioPluginSupport(e) {
      var t = {};
      if (t.isSupported = !1, !e) return S.w('no plugin passed in for checking support"'), t.errMsg = 'no plugin passed in for checking support"', t;
      var i = this.store.getState(N);
      if (!i) return S.w("audio track not added to local peer yet"), t.errMsg = "call this function only after local peer has audio track", t;
      var o = this.hmsSDKTracks[i];
      return o ? t = o.validatePlugin(e) : (S.w("track ".concat(i, " not present, unable to validate plugin")), t.errMsg = "track ".concat(i, " not present, unable to validate plugin")), t;
    }
  }, {
    key: "removePluginFromVideoTrack",
    value: function removePluginFromVideoTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
        return _regeneratorRuntime().wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              return _context41.abrupt("return", this.addRemoveVideoPlugin(e, "remove"));
            case 1:
            case "end":
              return _context41.stop();
          }
        }, _callee41, this);
      }));
    }
  }, {
    key: "removePluginFromAudioTrack",
    value: function removePluginFromAudioTrack(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
        return _regeneratorRuntime().wrap(function _callee42$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              return _context42.abrupt("return", this.addRemoveAudioPlugin(e, "remove"));
            case 1:
            case "end":
              return _context42.stop();
          }
        }, _callee42, this);
      }));
    }
  }, {
    key: "changeRole",
    value: function changeRole(e, t) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
        var o;
        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              o = this.hmsSDKPeers[e];
              if (o) {
                _context43.next = 4;
                break;
              }
              this.logPossibleInconsistency("Unknown peer ID given ".concat(e, " for changerole"));
              return _context43.abrupt("return");
            case 4:
              _context43.next = 6;
              return this.sdk.changeRoleOfPeer(o, t, i);
            case 6:
            case "end":
              return _context43.stop();
          }
        }, _callee43, this);
      }));
    }
  }, {
    key: "changeRoleOfPeer",
    value: function changeRoleOfPeer(e, t) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
        var o;
        return _regeneratorRuntime().wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              o = this.hmsSDKPeers[e];
              if (o) {
                _context44.next = 4;
                break;
              }
              this.logPossibleInconsistency("Unknown peer ID given ".concat(e, " for changerole"));
              return _context44.abrupt("return");
            case 4:
              _context44.next = 6;
              return this.sdk.changeRoleOfPeer(o, t, i);
            case 6:
            case "end":
              return _context44.stop();
          }
        }, _callee44, this);
      }));
    }
  }, {
    key: "changeRoleOfPeersWithRoles",
    value: function changeRoleOfPeersWithRoles(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var i;
        return _regeneratorRuntime().wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              i = this.sdk.getRoles().filter(function (o) {
                return e.includes(o.name);
              });
              _context45.next = 3;
              return this.sdk.changeRoleOfPeersWithRoles(i, t);
            case 3:
            case "end":
              return _context45.stop();
          }
        }, _callee45, this);
      }));
    }
  }, {
    key: "acceptChangeRole",
    value: function acceptChangeRole(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              t = e.requestedBy ? this.hmsSDKPeers[e.requestedBy.id] : void 0;
              t || S.w("peer for which role change is requested no longer available - ".concat(e.requestedBy));
              i = {
                requestedBy: t,
                role: e.role,
                token: e.token
              };
              _context46.next = 5;
              return this.sdk.acceptChangeRole(i);
            case 5:
              this.removeRoleChangeRequest(e);
            case 6:
            case "end":
              return _context46.stop();
          }
        }, _callee46, this);
      }));
    }
  }, {
    key: "initAppData",
    value: function initAppData(e) {
      this.setState(function (t) {
        t.appData = e;
      }, "initAppData");
    }
  }, {
    key: "setAppData",
    value: function setAppData(e, t, i) {
      var o = (t == null ? void 0 : t.constructor.name) === "Object";
      this.setState(function (r) {
        if (r.appData) i && o ? Object.assign(r.appData[e], t) : r.appData[e] = t;else {
          var n = _defineProperty({}, e, t);
          r.appData = n;
        }
      }, "setAppData-".concat(e));
    }
  }, {
    key: "rejectChangeRole",
    value: function rejectChangeRole(e) {
      this.removeRoleChangeRequest(e);
    }
  }, {
    key: "endRoom",
    value: function endRoom(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
        var i, o;
        return _regeneratorRuntime().wrap(function _callee47$(_context47) {
          while (1) switch (_context47.prev = _context47.next) {
            case 0:
              i = this.store.getState(ze);
              if (i == null ? void 0 : i.endRoom) {
                _context47.next = 4;
                break;
              }
              S.w("You are not allowed to perform this action - endRoom");
              return _context47.abrupt("return");
            case 4:
              o = this.store.getState(A);
              this.setState(function (r) {
                r.room.roomState = h.Disconnecting;
              }, "endingRoom");
              _context47.prev = 6;
              _context47.next = 9;
              return this.sdk.endRoom(e, t);
            case 9:
              this.resetState("endRoom");
              _context47.next = 15;
              break;
            case 12:
              _context47.prev = 12;
              _context47.t0 = _context47["catch"](6);
              S.e("error in ending room - ", _context47.t0), this.setState(function (n) {
                n.room.roomState = o;
              }, "revertEndRoom");
            case 15:
            case "end":
              return _context47.stop();
          }
        }, _callee47, this, [[6, 12]]);
      }));
    }
  }, {
    key: "removePeer",
    value: function removePeer(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
        var i;
        return _regeneratorRuntime().wrap(function _callee48$(_context48) {
          while (1) switch (_context48.prev = _context48.next) {
            case 0:
              i = this.hmsSDKPeers[e];
              if (!(i && !i.isLocal)) {
                _context48.next = 6;
                break;
              }
              _context48.next = 4;
              return this.sdk.removePeer(i, t);
            case 4:
              _context48.next = 8;
              break;
            case 6:
              this.logPossibleInconsistency("No remote peer found for peerID - ".concat(e));
              return _context48.abrupt("return");
            case 8:
            case "end":
              return _context48.stop();
          }
        }, _callee48, this);
      }));
    }
  }, {
    key: "startRTMPOrRecording",
    value: function startRTMPOrRecording(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
        return _regeneratorRuntime().wrap(function _callee49$(_context49) {
          while (1) switch (_context49.prev = _context49.next) {
            case 0:
              _context49.next = 2;
              return this.sdk.startRTMPOrRecording(e);
            case 2:
            case "end":
              return _context49.stop();
          }
        }, _callee49, this);
      }));
    }
  }, {
    key: "stopRTMPAndRecording",
    value: function stopRTMPAndRecording() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
        return _regeneratorRuntime().wrap(function _callee50$(_context50) {
          while (1) switch (_context50.prev = _context50.next) {
            case 0:
              _context50.next = 2;
              return this.sdk.stopRTMPAndRecording();
            case 2:
            case "end":
              return _context50.stop();
          }
        }, _callee50, this);
      }));
    }
  }, {
    key: "startHLSStreaming",
    value: function startHLSStreaming(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
        return _regeneratorRuntime().wrap(function _callee51$(_context51) {
          while (1) switch (_context51.prev = _context51.next) {
            case 0:
              _context51.next = 2;
              return this.sdk.startHLSStreaming(e);
            case 2:
            case "end":
              return _context51.stop();
          }
        }, _callee51, this);
      }));
    }
  }, {
    key: "stopHLSStreaming",
    value: function stopHLSStreaming(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
        return _regeneratorRuntime().wrap(function _callee52$(_context52) {
          while (1) switch (_context52.prev = _context52.next) {
            case 0:
              _context52.next = 2;
              return this.sdk.stopHLSStreaming(e);
            case 2:
            case "end":
              return _context52.stop();
          }
        }, _callee52, this);
      }));
    }
  }, {
    key: "sendHLSTimedMetadata",
    value: function sendHLSTimedMetadata(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
        return _regeneratorRuntime().wrap(function _callee53$(_context53) {
          while (1) switch (_context53.prev = _context53.next) {
            case 0:
              _context53.next = 2;
              return this.sdk.sendHLSTimedMetadata(e);
            case 2:
            case "end":
              return _context53.stop();
          }
        }, _callee53, this);
      }));
    }
  }, {
    key: "changeName",
    value: function changeName(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
        return _regeneratorRuntime().wrap(function _callee54$(_context54) {
          while (1) switch (_context54.prev = _context54.next) {
            case 0:
              _context54.next = 2;
              return this.sdk.changeName(e);
            case 2:
            case "end":
              return _context54.stop();
          }
        }, _callee54, this);
      }));
    }
  }, {
    key: "changeMetadata",
    value: function changeMetadata(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
        return _regeneratorRuntime().wrap(function _callee55$(_context55) {
          while (1) switch (_context55.prev = _context55.next) {
            case 0:
              typeof e != "string" && (e = JSON.stringify(e));
              _context55.next = 3;
              return this.sdk.changeMetadata(e);
            case 3:
            case "end":
              return _context55.stop();
          }
        }, _callee55, this);
      }));
    }
  }, {
    key: "setSessionMetadata",
    value: function setSessionMetadata(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
        return _regeneratorRuntime().wrap(function _callee56$(_context56) {
          while (1) switch (_context56.prev = _context56.next) {
            case 0:
              _context56.next = 2;
              return this.sdk.setSessionMetadata(e);
            case 2:
              this.setState(function (t) {
                t.sessionMetadata = e;
              }, "setSessionMetadata");
              this.setSessionStoreValueLocally({
                key: "default",
                value: e
              }, "setSessionMetadata");
            case 4:
            case "end":
              return _context56.stop();
          }
        }, _callee56, this);
      }));
    }
  }, {
    key: "populateSessionMetadata",
    value: function populateSessionMetadata() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
        var e;
        return _regeneratorRuntime().wrap(function _callee57$(_context57) {
          while (1) switch (_context57.prev = _context57.next) {
            case 0:
              _context57.next = 2;
              return this.sdk.getSessionMetadata();
            case 2:
              e = _context57.sent;
              this.setState(function (t) {
                t.sessionMetadata = e;
              }, "populateSessionMetadata"), this.setSessionStoreValueLocally({
                key: "default",
                value: e
              }, "populateSessionmetadata");
            case 4:
            case "end":
              return _context57.stop();
          }
        }, _callee57, this);
      }));
    }
  }, {
    key: "setRemoteTrackEnabled",
    value: function setRemoteTrackEnabled(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
        var _this8 = this;
        var i;
        return _regeneratorRuntime().wrap(function _callee58$(_context58) {
          while (1) switch (_context58.prev = _context58.next) {
            case 0:
              if (!(typeof e == "string")) {
                _context58.next = 10;
                break;
              }
              i = this.hmsSDKTracks[e];
              if (!(i && Ht(i))) {
                _context58.next = 7;
                break;
              }
              _context58.next = 5;
              return this.sdk.changeTrackState(i, t);
            case 5:
              _context58.next = 8;
              break;
            case 7:
              this.logPossibleInconsistency("No remote track with ID ".concat(e, " found for change track state"));
            case 8:
              _context58.next = 11;
              break;
            case 10:
              Array.isArray(e) && e.forEach(function (i) {
                return _this8.setRemoteTrackEnabled(i, t);
              });
            case 11:
            case "end":
              return _context58.stop();
          }
        }, _callee58, this);
      }));
    }
  }, {
    key: "setRemoteTracksEnabled",
    value: function setRemoteTracksEnabled(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
        var t, i;
        return _regeneratorRuntime().wrap(function _callee59$(_context59) {
          while (1) switch (_context59.prev = _context59.next) {
            case 0:
              t = {
                enabled: e.enabled,
                type: e.type,
                source: e.source
              };
              if (e.roles) {
                i = this.store.getState(U);
                t.roles = e.roles.map(function (o) {
                  return i[o];
                });
              }
              _context59.next = 4;
              return this.sdk.changeMultiTrackState(t);
            case 4:
            case "end":
              return _context59.stop();
          }
        }, _callee59, this);
      }));
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(e) {
      S.level = e, this.sdk.setLogLevel(e);
    }
  }, {
    key: "setFrameworkInfo",
    value: function setFrameworkInfo(e) {
      this.sdk.setFrameworkInfo(e);
    }
  }, {
    key: "ignoreMessageTypes",
    value: function ignoreMessageTypes(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      if (t) this.ignoredMessageTypes = e;else {
        var _iterator11 = _createForOfIteratorHelper(e),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var i = _step11.value;
            this.ignoredMessageTypes.includes(i) || this.ignoredMessageTypes.push(i);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    }
  }, {
    key: "enableBeamSpeakerLabelsLogging",
    value: function enableBeamSpeakerLabelsLogging() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
        return _regeneratorRuntime().wrap(function _callee60$(_context60) {
          while (1) switch (_context60.prev = _context60.next) {
            case 0:
              _context60.t0 = this.beamSpeakerLabelsLogger;
              if (_context60.t0) {
                _context60.next = 6;
                break;
              }
              S.i("enabling beam speaker labels logging");
              this.beamSpeakerLabelsLogger = new xe(this.store, this);
              _context60.next = 6;
              return this.beamSpeakerLabelsLogger.start();
            case 6:
            case "end":
              return _context60.stop();
          }
        }, _callee60, this);
      }));
    }
  }, {
    key: "resetState",
    value: function resetState() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "resetState";
      this.isRoomJoinCalled = !1, this.hmsSDKTracks = {}, S.cleanUp(), this.setState(function (t) {
        Object.assign(t, oe());
      }, e);
    }
  }, {
    key: "sdkJoinWithListeners",
    value: function sdkJoinWithListeners(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
        return _regeneratorRuntime().wrap(function _callee61$(_context61) {
          while (1) switch (_context61.prev = _context61.next) {
            case 0:
              _context61.next = 2;
              return this.sdk.join(e, {
                onJoin: this.onJoin.bind(this),
                onRoomUpdate: this.onRoomUpdate.bind(this),
                onPeerUpdate: this.onPeerUpdate.bind(this),
                onTrackUpdate: this.onTrackUpdate.bind(this),
                onMessageReceived: this.onMessageReceived.bind(this),
                onError: this.onError.bind(this),
                onReconnected: this.onReconnected.bind(this),
                onReconnecting: this.onReconnecting.bind(this),
                onRoleChangeRequest: this.onRoleChangeRequest.bind(this),
                onRoleUpdate: this.onRoleUpdate.bind(this),
                onDeviceChange: this.onDeviceChange.bind(this),
                onChangeTrackStateRequest: this.onChangeTrackStateRequest.bind(this),
                onChangeMultiTrackStateRequest: this.onChangeMultiTrackStateRequest.bind(this),
                onRemovedFromRoom: this.onRemovedFromRoom.bind(this),
                onNetworkQuality: this.onNetworkQuality.bind(this),
                onSessionStoreUpdate: this.onSessionStoreUpdate.bind(this)
              });
            case 2:
              this.sdk.addAudioListener({
                onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this)
              });
              this.sdk.addConnectionQualityListener({
                onConnectionQualityUpdate: this.onConnectionQualityUpdate.bind(this)
              });
            case 4:
            case "end":
              return _context61.stop();
          }
        }, _callee61, this);
      }));
    }
  }, {
    key: "onRemovedFromRoom",
    value: function onRemovedFromRoom(e) {
      var o;
      var t = this.store.getState(x((o = e.requestedBy) == null ? void 0 : o.peerId));
      this.hmsNotifications.sendLeaveRoom(J(O({}, e), {
        requestedBy: t || void 0
      }));
      var i = e.roomEnded || !t ? "roomEnded" : "removedFromRoom";
      S.i("resetting state after peer removed ".concat(i), e), this.resetState(i);
    }
  }, {
    key: "onDeviceChange",
    value: function onDeviceChange(e) {
      var _this9 = this;
      var t = e.devices;
      if (!t) return;
      var i = this.store.getState(E);
      if (this.setState(function (o) {
        K(o.devices.audioInput, t.audioInput) || (o.devices.audioInput = t.audioInput), K(o.devices.videoInput, t.videoInput) || (o.devices.videoInput = t.videoInput), K(o.devices.audioOutput, t.audioOutput) || (o.devices.audioOutput = t.audioOutput), (i == null ? void 0 : i.id) && _this9.hmsSDKPeers[i.id] && Object.assign(o.settings, _this9.getMediaSettings(_this9.hmsSDKPeers[i.id]));
      }, "deviceChange"), e.selection) {
        var o = T.convertDeviceChangeUpdate(e);
        this.hmsNotifications.sendDeviceChange(o);
      }
    }
  }, {
    key: "sdkPreviewWithListeners",
    value: function sdkPreviewWithListeners(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
        return _regeneratorRuntime().wrap(function _callee62$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              _context62.next = 2;
              return this.sdk.preview(e, {
                onPreview: this.onPreview.bind(this),
                onError: this.onError.bind(this),
                onReconnected: this.onReconnected.bind(this),
                onReconnecting: this.onReconnecting.bind(this),
                onDeviceChange: this.onDeviceChange.bind(this),
                onRoomUpdate: this.onRoomUpdate.bind(this),
                onPeerUpdate: this.onPeerUpdate.bind(this),
                onNetworkQuality: this.onNetworkQuality.bind(this)
              });
            case 2:
              this.sdk.addAudioListener({
                onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this)
              });
            case 3:
            case "end":
              return _context62.stop();
          }
        }, _callee62, this);
      }));
    }
  }, {
    key: "onNetworkQuality",
    value: function onNetworkQuality(e) {
      var _this10 = this;
      this.setState(function (t) {
        var o;
        var i = t.room.localPeer || ((o = _this10.sdk.getLocalPeer()) == null ? void 0 : o.peerId);
        i && (t.connectionQualities[i] = {
          peerID: i,
          downlinkQuality: e
        });
      }, "ConnectionQuality");
    }
  }, {
    key: "onSessionStoreUpdate",
    value: function onSessionStoreUpdate(e) {
      this.setSessionStoreValueLocally(e, "sessionStoreUpdate");
    }
  }, {
    key: "startScreenShare",
    value: function startScreenShare(e) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
        var _this11 = this;
        return _regeneratorRuntime().wrap(function _callee63$(_context63) {
          while (1) switch (_context63.prev = _context63.next) {
            case 0:
              if (!this.store.getState(ye)) {
                _context63.next = 4;
                break;
              }
              this.logPossibleInconsistency("start screenshare is called while it's on");
              _context63.next = 7;
              break;
            case 4:
              _context63.next = 6;
              return this.sdk.startScreenShare(function () {
                return _this11.syncRoomState("screenshareStopped");
              }, e);
            case 6:
              this.syncRoomState("startScreenShare");
            case 7:
            case "end":
              return _context63.stop();
          }
        }, _callee63, this);
      }));
    }
  }, {
    key: "stopScreenShare",
    value: function stopScreenShare() {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
        return _regeneratorRuntime().wrap(function _callee64$(_context64) {
          while (1) switch (_context64.prev = _context64.next) {
            case 0:
              if (!this.store.getState(ye)) {
                _context64.next = 6;
                break;
              }
              _context64.next = 3;
              return this.sdk.stopScreenShare();
            case 3:
              this.syncRoomState("stopScreenShare");
              _context64.next = 7;
              break;
            case 6:
              this.logPossibleInconsistency("stop screenshare is called while it's not on");
            case 7:
            case "end":
              return _context64.stop();
          }
        }, _callee64, this);
      }));
    }
  }, {
    key: "attachVideoInternal",
    value: function attachVideoInternal(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
        var i;
        return _regeneratorRuntime().wrap(function _callee65$(_context65) {
          while (1) switch (_context65.prev = _context65.next) {
            case 0:
              i = this.hmsSDKTracks[e];
              if (!(i && i.type === "video")) {
                _context65.next = 6;
                break;
              }
              _context65.next = 4;
              return this.sdk.attachVideo(i, t);
            case 4:
              _context65.next = 7;
              break;
            case 6:
              this.logPossibleInconsistency("no video track found to add sink");
            case 7:
            case "end":
              return _context65.stop();
          }
        }, _callee65, this);
      }));
    }
  }, {
    key: "syncRoomState",
    value: function syncRoomState(e) {
      var _this12 = this;
      e = "".concat(e, "_fullSync"), S.time("store-sync-".concat(e));
      var t = {},
        i = [],
        o = {},
        r = {},
        n = {},
        a,
        d = this.sdk.getPeers();
      var _iterator12 = _createForOfIteratorHelper(d),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var g = _step12.value;
          var j = T.convertPeer(g);
          t[j.id] = j, i.push(j.id), this.hmsSDKPeers[j.id] = g;
          var he = [g.audioTrack, g.videoTrack].concat(_toConsumableArray(g.auxiliaryTracks));
          var _iterator13 = _createForOfIteratorHelper(he),
            _step13;
          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var _w = _step13.value;
              if (!_w) continue;
              var Ue = T.convertTrack(_w);
              o[Ue.id] = Ue, r[_w.trackId] = _w;
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
          if (g.isLocal) {
            var w = g;
            a = this.getPreviewFields(w), Object.assign(n, this.getMediaSettings(w));
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      var P = this.sdk.getRecordingState(),
        $ = this.sdk.getRTMPState(),
        F = this.sdk.getHLSState();
      this.setState(function (g) {
        var w;
        g.room.peers = i;
        var j = g.peers,
          he = g.tracks;
        ht(j, t), ft(he, o), Object.assign(g.settings, n), _this12.hmsSDKTracks = r, ((w = g.preview) == null ? void 0 : w.localPeer) && (a == null ? void 0 : a.localPeer) ? Object.assign(g.preview, a) : g.preview = a, Object.assign(g.roles, T.convertRoles(_this12.sdk.getRoles())), Object.assign(g.playlist, T.convertPlaylist(_this12.sdk.getPlaylistManager())), Object.assign(g.room, T.convertRecordingStreamingState(P, $, F)), Object.assign(g.templateAppData, _this12.sdk.getTemplateAppData());
      }, e), S.timeEnd("store-sync-".concat(e));
    }
  }, {
    key: "onPreview",
    value: function onPreview(e) {
      this.setState(function (t) {
        Object.assign(t.room, T.convertRoom(e)), t.room.roomState = h.Preview;
      }, "previewStart"), this.syncRoomState("previewSync");
    }
  }, {
    key: "onJoin",
    value: function onJoin(e) {
      var _this13 = this;
      var t = this.sdk.getPlaylistManager();
      this.audioPlaylist = new Te(t, M.audio, this.syncPlaylistState.bind(this), this.store), this.videoPlaylist = new Te(t, M.video, this.syncRoomState.bind(this), this.store), this.syncRoomState("joinSync"), this.setState(function (i) {
        Object.assign(i.room, T.convertRoom(e)), i.room.isConnected = !0, i.room.roomState = h.Connected;
      }, "joined"), t.onProgress(this.setProgress), t.onNewTrackStart(function (i) {
        _this13.syncPlaylistState("".concat(i.type, "PlaylistUpdate"));
      }), t.onPlaylistEnded(function (i) {
        _this13.syncPlaylistState("".concat(i, "PlaylistEnded"));
      }), t.onCurrentTrackEnded(function (i) {
        _this13.hmsNotifications.sendPlaylistTrackEnded(T.convertPlaylistItem(t, i)), _this13.syncPlaylistState("".concat(i.type, "PlaylistItemEnded"));
      });
    }
  }, {
    key: "onRoomUpdate",
    value: function onRoomUpdate(e, t) {
      this.setState(function (i) {
        Object.assign(i.room, T.convertRoom(t));
      }, e);
    }
  }, {
    key: "onPeerUpdate",
    value: function onPeerUpdate(e, t) {
      var _this14 = this;
      if (![_hmsVideo.HMSPeerUpdate.BECAME_DOMINANT_SPEAKER, _hmsVideo.HMSPeerUpdate.RESIGNED_DOMINANT_SPEAKER].includes(e)) {
        if (Array.isArray(t)) {
          var i = this.store.getState(D),
            o = t.filter(function (n) {
              return !i[n.peerId];
            });
          if (this.syncRoomState("peersJoined"), this.store.getState(G)) {
            var n = [];
            var _iterator14 = _createForOfIteratorHelper(t),
              _step14;
            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var a = _step14.value;
                var d = this.store.getState(x(a.peerId));
                d && n.push(d);
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
            this.hmsNotifications.sendPeerList(n);
          } else o.forEach(function (n) {
            var a = _this14.store.getState(x(n.peerId));
            a && _this14.hmsNotifications.sendPeerUpdate(_hmsVideo.HMSPeerUpdate.PEER_JOINED, a);
          });
          return;
        }
        this.sendPeerUpdateNotification(e, t);
      }
    }
  }, {
    key: "onTrackUpdate",
    value: function onTrackUpdate(e, t, i) {
      if (e === _hmsVideo.HMSTrackUpdate.TRACK_REMOVED) this.hmsNotifications.sendTrackUpdate(e, t.trackId), this.handleTrackRemove(t, i);else {
        var o = ce[e] || "trackUpdate";
        this.syncRoomState(o), this.hmsNotifications.sendTrackUpdate(e, t.trackId);
      }
    }
  }, {
    key: "onMessageReceived",
    value: function onMessageReceived(e) {
      var t = T.convertMessage(e);
      t.read = !1, t.ignored = this.ignoredMessageTypes.includes(t.type), this.putMessageInStore(t), this.hmsNotifications.sendMessageReceived(t);
    }
  }, {
    key: "putMessageInStore",
    value: function putMessageInStore(e) {
      var _this15 = this;
      e.ignored || this.setState(function (t) {
        e.id = String(_this15.store.getState(Je) + 1), t.messages.byID[e.id] = e, t.messages.allIDs.push(e.id);
      }, "newMessage");
    }
  }, {
    key: "onAudioLevelUpdate",
    value: function onAudioLevelUpdate(e) {
      this.setState(function (t) {
        var i = {};
        e.forEach(function (r) {
          if (!r.track || !r.peer) return;
          var n = r.track.trackId;
          i[n] = r.audioLevel, t.speakers[n] || (t.speakers[n] = {
            audioLevel: r.audioLevel,
            peerID: r.peer.peerId,
            trackID: n
          });
        });
        var o = Object.entries(t.speakers);
        for (var _i3 = 0, _o = o; _i3 < _o.length; _i3++) {
          var _o$_i = _slicedToArray(_o[_i3], 2),
            r = _o$_i[0],
            n = _o$_i[1];
          n.audioLevel = i[r] || 0, n.audioLevel === 0 && delete t.speakers[r];
        }
      }, "audioLevel");
    }
  }, {
    key: "onConnectionQualityUpdate",
    value: function onConnectionQualityUpdate(e) {
      this.setState(function (t) {
        var i = new Set();
        e.forEach(function (r) {
          var n = r.peerID;
          !n || (i.add(n), t.connectionQualities[n] ? Object.assign(t.connectionQualities[n], r) : t.connectionQualities[n] = r);
        });
        var o = Object.keys(t.connectionQualities);
        for (var _i4 = 0, _o2 = o; _i4 < _o2.length; _i4++) {
          var r = _o2[_i4];
          i.has(r) || delete t.connectionQualities[r];
        }
      }, "connectionQuality");
    }
  }, {
    key: "onChangeTrackStateRequest",
    value: function onChangeTrackStateRequest(e) {
      var r;
      var t = this.store.getState(x((r = e.requestedBy) == null ? void 0 : r.peerId)),
        i = this.getStoreLocalTrackIDfromSDKTrack(e.track),
        o = this.store.getState(ue(i));
      if (!o) return this.logPossibleInconsistency("Not found track for which track state change was requested, ".concat(e.track));
      e.enabled || this.syncRoomState("changeTrackStateRequest"), this.hmsNotifications.sendChangeTrackStateRequest({
        requestedBy: t || void 0,
        track: o,
        enabled: e.enabled
      });
    }
  }, {
    key: "onChangeMultiTrackStateRequest",
    value: function onChangeMultiTrackStateRequest(e) {
      var r;
      var t = this.store.getState(x((r = e.requestedBy) == null ? void 0 : r.peerId));
      e.enabled || this.syncRoomState("changeMultiTrackStateRequest");
      var i = [],
        o = this.store.getState(f);
      var _iterator15 = _createForOfIteratorHelper(e.tracks),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var n = _step15.value;
          var a = this.getStoreLocalTrackIDfromSDKTrack(n);
          a && o[a] && i.push(o[a]);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      this.hmsNotifications.sendChangeMultiTrackStateRequest({
        requestedBy: t || void 0,
        tracks: i,
        enabled: e.enabled,
        type: e.type,
        source: e.source
      });
    }
  }, {
    key: "onReconnected",
    value: function onReconnected() {
      this.syncRoomState("reconnectedSync"), this.hmsNotifications.sendReconnected(), this.setState(function (e) {
        e.room.roomState = e.room.isConnected ? h.Connected : h.Preview;
      }, "reconnected");
    }
  }, {
    key: "onReconnecting",
    value: function onReconnecting(e) {
      var t = T.convertException(e);
      S.e("Reconnection: received error from sdk", t), this.hmsNotifications.sendReconnecting(t), this.setState(function (i) {
        i.room.roomState = h.Reconnecting, i.errors.push(t);
      }, "reconnecting");
    }
  }, {
    key: "onError",
    value: function onError(e) {
      var t = T.convertException(e);
      t.isTerminal ? (this.leave().then(function () {
        return S.e("error from SDK, left room.");
      }), this.setState(function (i) {
        i.room.roomState = h.Failed, i.errors.push(t);
      }, "errorTerminal")) : this.store.getState().errors.length < 50 && this.setState(function (o) {
        o.errors.push(t);
      }, "error"), this.syncRoomState("errorSync"), this.hmsNotifications.sendError(t), S.e("received error from sdk", t instanceof _hmsVideo.HMSException ? "".concat(t) : t);
    }
  }, {
    key: "handleTrackRemove",
    value: function handleTrackRemove(e, t) {
      var _this16 = this;
      this.setState(function (i) {
        var o = i.peers[t.peerId],
          r = i.tracks,
          n = e.trackId;
        if (_this16.isSameStoreSDKTrack(n, o == null ? void 0 : o.audioTrack)) o == null || delete o.audioTrack;else if (_this16.isSameStoreSDKTrack(n, o == null ? void 0 : o.videoTrack)) o == null || delete o.videoTrack;else {
          var a = o == null ? void 0 : o.auxiliaryTracks.indexOf(n);
          a > -1 && _this16.isSameStoreSDKTrack(n, o == null ? void 0 : o.auxiliaryTracks[a]) && (o == null || o.auxiliaryTracks.splice(a, 1));
        }
        delete r[n], delete _this16.hmsSDKTracks[n];
      }, "trackRemoved");
    }
  }, {
    key: "setEnabledSDKTrack",
    value: function setEnabledSDKTrack(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
        var i;
        return _regeneratorRuntime().wrap(function _callee66$(_context66) {
          while (1) switch (_context66.prev = _context66.next) {
            case 0:
              i = this.hmsSDKTracks[e];
              if (!i) {
                _context66.next = 6;
                break;
              }
              _context66.next = 4;
              return i.setEnabled(t);
            case 4:
              _context66.next = 7;
              break;
            case 6:
              this.logPossibleInconsistency("track ".concat(e, " not present, unable to enabled/disable"));
            case 7:
            case "end":
              return _context66.stop();
          }
        }, _callee66, this);
      }));
    }
  }, {
    key: "setSDKLocalVideoTrackSettings",
    value: function setSDKLocalVideoTrackSettings(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
        var i;
        return _regeneratorRuntime().wrap(function _callee67$(_context67) {
          while (1) switch (_context67.prev = _context67.next) {
            case 0:
              i = this.hmsSDKTracks[e];
              if (!i) {
                _context67.next = 6;
                break;
              }
              _context67.next = 4;
              return i.setSettings(t);
            case 4:
              _context67.next = 7;
              break;
            case 6:
              this.logPossibleInconsistency("local track ".concat(e, " not present, unable to set settings"));
            case 7:
            case "end":
              return _context67.stop();
          }
        }, _callee67, this);
      }));
    }
  }, {
    key: "setSDKLocalAudioTrackSettings",
    value: function setSDKLocalAudioTrackSettings(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
        var i;
        return _regeneratorRuntime().wrap(function _callee68$(_context68) {
          while (1) switch (_context68.prev = _context68.next) {
            case 0:
              i = this.hmsSDKTracks[e];
              if (!i) {
                _context68.next = 6;
                break;
              }
              _context68.next = 4;
              return i.setSettings(t);
            case 4:
              _context68.next = 7;
              break;
            case 6:
              this.logPossibleInconsistency("local track ".concat(e, " not present, unable to set settings"));
            case 7:
            case "end":
              return _context68.stop();
          }
        }, _callee68, this);
      }));
    }
  }, {
    key: "getMediaSettings",
    value: function getMediaSettings(e) {
      var r;
      var t = this.store.getState(Fe),
        i = e.audioTrack,
        o = e.videoTrack;
      return {
        audioInputDeviceId: (i == null ? void 0 : i.settings.deviceId) || t.audioInputDeviceId,
        videoInputDeviceId: (o == null ? void 0 : o.settings.deviceId) || t.videoInputDeviceId,
        audioOutputDeviceId: (r = this.sdk.getAudioOutput().getDevice()) == null ? void 0 : r.deviceId
      };
    }
  }, {
    key: "getPreviewFields",
    value: function getPreviewFields(e) {
      var i, o;
      if (!e.isInPreview()) return;
      var t = T.convertPeer(e);
      return {
        localPeer: t.id,
        audioTrack: t.audioTrack,
        videoTrack: t.videoTrack,
        asRole: ((i = e.asRole) == null ? void 0 : i.name) || ((o = e.role) == null ? void 0 : o.name)
      };
    }
  }, {
    key: "setTrackVolume",
    value: function setTrackVolume(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
        var i;
        return _regeneratorRuntime().wrap(function _callee69$(_context69) {
          while (1) switch (_context69.prev = _context69.next) {
            case 0:
              i = this.hmsSDKTracks[t];
              if (!i) {
                _context69.next = 11;
                break;
              }
              if (!(i instanceof _hmsVideo.HMSAudioTrack)) {
                _context69.next = 8;
                break;
              }
              _context69.next = 5;
              return i.setVolume(e);
            case 5:
              this.setState(function (o) {
                var r = o.tracks[t];
                r && r.type === "audio" && (r.volume = e);
              }, "trackVolume");
              _context69.next = 9;
              break;
            case 8:
              S.w("track ".concat(t, " is not an audio track"));
            case 9:
              _context69.next = 12;
              break;
            case 11:
              this.logPossibleInconsistency("track ".concat(t, " not present, unable to set volume"));
            case 12:
            case "end":
              return _context69.stop();
          }
        }, _callee69, this);
      }));
    }
  }, {
    key: "localAndVideoUnmuting",
    value: function localAndVideoUnmuting(e) {
      var t = this.store.getState(E);
      if ((t == null ? void 0 : t.videoTrack) !== e) return !1;
      var i = this.store.getState(Qe),
        o = this.store.getState(ge);
      return i && !o;
    }
  }, {
    key: "logPossibleInconsistency",
    value: function logPossibleInconsistency(e) {
      S.w("possible inconsistency detected - ", e);
    }
  }, {
    key: "addRemoveVideoPlugin",
    value: function addRemoveVideoPlugin(e, t, i) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
        var o, r;
        return _regeneratorRuntime().wrap(function _callee70$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              if (e) {
                _context70.next = 3;
                break;
              }
              S.w("Invalid plugin received in store");
              return _context70.abrupt("return");
            case 3:
              o = this.store.getState(b);
              if (!o) {
                _context70.next = 20;
                break;
              }
              r = this.hmsSDKTracks[o];
              if (!r) {
                _context70.next = 19;
                break;
              }
              if (!(t === "add")) {
                _context70.next = 12;
                break;
              }
              _context70.next = 10;
              return r.addPlugin(e, i);
            case 10:
              _context70.next = 16;
              break;
            case 12:
              _context70.t0 = t === "remove";
              if (!_context70.t0) {
                _context70.next = 16;
                break;
              }
              _context70.next = 16;
              return r.removePlugin(e);
            case 16:
              this.syncRoomState("".concat(t, "VideoPlugin"));
              _context70.next = 20;
              break;
            case 19:
              this.logPossibleInconsistency("track ".concat(o, " not present, unable to remove plugin"));
            case 20:
            case "end":
              return _context70.stop();
          }
        }, _callee70, this);
      }));
    }
  }, {
    key: "addRemoveAudioPlugin",
    value: function addRemoveAudioPlugin(e, t) {
      return c(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
        var i, o;
        return _regeneratorRuntime().wrap(function _callee71$(_context71) {
          while (1) switch (_context71.prev = _context71.next) {
            case 0:
              if (e) {
                _context71.next = 3;
                break;
              }
              S.w("Invalid plugin received in store");
              return _context71.abrupt("return");
            case 3:
              i = this.store.getState(N);
              if (!i) {
                _context71.next = 20;
                break;
              }
              o = this.hmsSDKTracks[i];
              if (!o) {
                _context71.next = 19;
                break;
              }
              if (!(t === "add")) {
                _context71.next = 12;
                break;
              }
              _context71.next = 10;
              return o.addPlugin(e);
            case 10:
              _context71.next = 16;
              break;
            case 12:
              _context71.t0 = t === "remove";
              if (!_context71.t0) {
                _context71.next = 16;
                break;
              }
              _context71.next = 16;
              return o.removePlugin(e);
            case 16:
              this.syncRoomState("".concat(t, "AudioPlugin"));
              _context71.next = 20;
              break;
            case 19:
              this.logPossibleInconsistency("track ".concat(i, " not present, unable to remove plugin"));
            case 20:
            case "end":
              return _context71.stop();
          }
        }, _callee71, this);
      }));
    }
  }, {
    key: "isSameStoreSDKTrack",
    value: function isSameStoreSDKTrack(e, t) {
      var i;
      return t ? ((i = this.hmsSDKTracks[t]) == null ? void 0 : i.trackId) === e : !1;
    }
  }, {
    key: "onRoleChangeRequest",
    value: function onRoleChangeRequest(e) {
      this.setState(function (t) {
        t.roleChangeRequests.length === 0 && t.roleChangeRequests.push(T.convertRoleChangeRequest(e));
      }, "roleChangeRequest");
    }
  }, {
    key: "removeRoleChangeRequest",
    value: function removeRoleChangeRequest(e) {
      this.setState(function (t) {
        var i = t.roleChangeRequests.findIndex(function (o) {
          return o.token === e.token;
        });
        i !== -1 && t.roleChangeRequests.splice(i, 1);
      }, "removeRoleChangeRequest");
    }
  }, {
    key: "onRoleUpdate",
    value: function onRoleUpdate() {
      this.syncRoomState("roleUpdate");
    }
  }, {
    key: "getStoreLocalTrackIDfromSDKTrack",
    value: function getStoreLocalTrackIDfromSDKTrack(e) {
      var _this17 = this;
      return this.store.getState(We).find(function (i) {
        return _this17.hmsSDKTracks[i].trackId === e.trackId;
      });
    }
  }, {
    key: "setSessionStoreValueLocally",
    value: function setSessionStoreValueLocally(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "setSessionStore";
      var i = Array.isArray(e) ? e : [e];
      this.setState(function (o) {
        i.forEach(function (r) {
          o.sessionStore[r.key] = r.value;
        });
      }, t);
    }
  }]);
  return Le;
}();
var me = function me(s) {
  return _hmsVideo.isBrowser ? "".concat(s, " ").concat(document.title) : s;
};
var we = /*#__PURE__*/function () {
  function we(e, t, i) {
    _classCallCheck(this, we);
    this.store = e, this.actions = t, this.notifications = i;
  }
  _createClass(we, [{
    key: "getStore",
    value: function getStore() {
      return this.store;
    }
  }, {
    key: "getActions",
    value: function getActions() {
      return this.actions;
    }
  }, {
    key: "getNotifications",
    value: function getNotifications() {
      return {
        onNotification: this.notifications.onNotification
      };
    }
  }]);
  return we;
}();
exports.BeamControllerStore = we;
var Rt = function Rt(s, e, t) {
    var i;
    t.getState(A) === h.Connected && (i = Pt(s, e, t)), t.subscribe(function (o) {
      [h.Connected, h.Reconnecting].includes(o) ? i || (i = Pt(s, e, t)) : [h.Disconnected, h.Failed].includes(o) && i && (fs(e, o), i(), i = void 0);
    }, A);
  },
  Pt = function Pt(s, e, t) {
    var r, n;
    var i = Hs(t, e);
    (r = s.getWebrtcInternals()) == null || r.start();
    var o = (n = s.getWebrtcInternals()) == null ? void 0 : n.onStatsChange(function (a) {
      return hs(e, a, t, s);
    });
    return function () {
      i(), o && o();
    };
  },
  Hs = function Hs(s, e) {
    var t, i, o;
    return s.getState(Q) ? e.namedSetState(function (r) {
      r.localPeer.id = s.getState(Q);
    }, "localpeer-id") : t = s.subscribe(function (r) {
      r && e.namedSetState(function (n) {
        n.localPeer.id = r;
      }, "localpeer-id");
    }, Q), s.getState(b) ? e.namedSetState(function (r) {
      r.localPeer.videoTrack = s.getState(b);
    }, "localpeer-videotrack-id") : i = s.subscribe(function (r) {
      r && e.namedSetState(function (n) {
        n.localPeer.videoTrack = r;
      }, "localpeer-videotrack-id");
    }, b), s.getState(N) ? e.namedSetState(function (r) {
      r.localPeer.audioTrack = s.getState(N);
    }, "localpeer-audiotrack-id") : o = s.subscribe(function (r) {
      r && e.namedSetState(function (n) {
        n.localPeer.audioTrack = r;
      }, "localpeer-audiotrack-id");
    }, N), function () {
      t == null || t(), i == null || i(), o == null || o();
    };
  },
  hs = function hs(s, e, t, i) {
    var o = t.getState(f);
    s.namedSetState(function (r) {
      var n = t.getState(Q),
        a = {},
        d = Object.keys(o).filter(function ($) {
          return o[$].peerId !== n;
        });
      var _iterator16 = _createForOfIteratorHelper(d),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var $ = _step16.value;
          var F = e.getRemoteTrackStats($);
          F && (a[$] = F);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      Ie(r.remoteTrackStats, a);
      var P = _defineProperty({}, n, e.getLocalPeerStats());
      Ie(r.peerStats, P), gt(r.localTrackStats, e.getLocalTrackStats(), i.store.getLocalPeerTracks());
    }, "webrtc-stats");
  },
  fs = function fs(s) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "resetState";
    s.namedSetState(function (t) {
      Object.assign(t, re());
    }, e);
  };
var He = /*#__PURE__*/_createClass(function He(e, t) {
  var _this18 = this;
  _classCallCheck(this, He);
  this.hmsStore = e;
  this.sdk = t;
  this.store = L.createNewHMSStore(me("HMSStatsStore"), re), this.getState = this.store.getState, this.subscribe = this.store.subscribe, this.getPublishPeerConnection = function () {
    return new Promise(function (i) {
      var o, r;
      _this18.hmsStore.getState(A) === "Connected" ? i((r = (o = _this18.sdk) == null ? void 0 : o.getWebrtcInternals()) == null ? void 0 : r.getPublishPeerConnection()) : _this18.hmsStore.subscribe(function (n) {
        var a, d;
        n === "Connected" && i((d = (a = _this18.sdk) == null ? void 0 : a.getWebrtcInternals()) == null ? void 0 : d.getPublishPeerConnection());
      }, A);
    });
  }, this.getSubscribePeerConnection = function () {
    return new Promise(function (i) {
      var o, r;
      _this18.hmsStore.getState(A) === "Connected" ? i((r = (o = _this18.sdk) == null ? void 0 : o.getWebrtcInternals()) == null ? void 0 : r.getSubscribePeerConnection()) : _this18.hmsStore.subscribe(function (n) {
        var a, d;
        n === "Connected" && i((d = (a = _this18.sdk) == null ? void 0 : a.getWebrtcInternals()) == null ? void 0 : d.getSubscribePeerConnection());
      }, A);
    });
  }, !!this.sdk && Rt(this.sdk, this.store, this.hmsStore);
});
exports.HMSStats = He;
var gs = function gs(s) {
    return s.localPeer.id;
  },
  ys = function ys(s) {
    return s.localPeer.audioTrack;
  },
  ks = function ks(s) {
    return s.localPeer.videoTrack;
  },
  Rs = function Rs(s, e) {
    return e;
  },
  vt = function vt(s, e) {
    return e;
  },
  Ps = function Ps(s) {
    return s.remoteTrackStats;
  },
  Dt = function Dt(s) {
    return s.peerStats;
  },
  Oe = function Oe(s) {
    return s.localTrackStats;
  },
  q = (0, _reselect.createSelector)([Dt, gs], function (s, e) {
    return s[e];
  }),
  vs = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.subscribe) == null ? void 0 : e.packetsLost;
  }),
  Ds = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.subscribe) == null ? void 0 : e.jitter;
  }),
  Is = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.publish) == null ? void 0 : e.bitrate;
  }),
  Es = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.subscribe) == null ? void 0 : e.bitrate;
  }),
  bs = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.publish) == null ? void 0 : e.availableOutgoingBitrate;
  }),
  As = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.subscribe) == null ? void 0 : e.availableIncomingBitrate;
  }),
  Cs = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.publish) == null ? void 0 : e.bytesSent;
  }),
  Ns = (0, _reselect.createSelector)(q, function (s) {
    var e;
    return (e = s == null ? void 0 : s.subscribe) == null ? void 0 : e.bytesReceived;
  }),
  xs = (0, _reselect.createSelector)([Dt, Rs], function (s, e) {
    return e ? s[e] : void 0;
  }),
  Ls = (0, _reselect.createSelector)([Ps, vt], function (s, e) {
    return e ? s[e] : void 0;
  }),
  _e = (0, _reselect.createSelector)([Oe, vt], function (s, e) {
    return e ? s[e] : void 0;
  }),
  ws = p(xs),
  Os = p(Ls),
  _s = (0, _reselect.createSelector)([Oe, ys], function (s, e) {
    var t;
    return e ? (t = s[e]) == null ? void 0 : t[0] : void 0;
  }),
  Us = p((0, _reselect.createSelector)(_e, function (s) {
    return s == null ? void 0 : s[0];
  })),
  Ks = (0, _reselect.createSelector)([Oe, ks], function (s, e) {
    var t;
    return e ? (t = s[e]) == null ? void 0 : t[0] : void 0;
  }),
  Vs = p((0, _reselect.createSelector)(_e, function (s) {
    return s;
  })),
  Bs = function Bs(s) {
    return p((0, _reselect.createSelector)(_e, function (e) {
      var t = Object.keys(_hmsVideo.simulcastMapping).find(function (i) {
        return _hmsVideo.simulcastMapping[i] === s;
      });
      return s && (e == null ? void 0 : e.find(function (i) {
        return i.rid === t;
      })) || (e == null ? void 0 : e[0]);
    }));
  },
  qs = {
    localPeerStats: q,
    packetsLost: vs,
    jitter: Ds,
    publishBitrate: Is,
    subscribeBitrate: Es,
    availablePublishBitrate: bs,
    availableSubscribeBitrate: As,
    totalBytesSent: Cs,
    totalBytesReceived: Ns,
    peerStatsByID: ws,
    trackStatsByID: Os,
    localAudioTrackStatsByID: Us,
    localVideoTrackStatsByID: Vs,
    localVideoTrackStatsByLayer: Bs,
    localAudioTrackStats: _s,
    localVideoTrackStats: Ks
  };
exports.selectHMSStats = qs;
var L = /*#__PURE__*/function () {
  function L(e, t, i) {
    var _this19 = this;
    _classCallCheck(this, L);
    this.getStats = function () {
      return _this19.stats || (_this19.stats = new He(_this19.store, _this19.sdk)), _this19.stats;
    };
    e ? this.store = e : this.store = L.createNewHMSStore(me("HMSStore"), oe), i ? this.notifications = i : this.notifications = new De(this.store), t ? this.actions = t : (this.sdk = new _hmsVideo.HMSSdk(), this.actions = new Le(this.store, this.sdk, this.notifications)), this.actions.setFrameworkInfo({
      type: "js",
      sdkVersion: It().version
    }), this.initialTriggerOnSubscribe = !1, _hmsVideo.isBrowser && (window.__hms = this, window.__beam = new we(this.store, this.actions, this.notifications));
  }
  _createClass(L, [{
    key: "triggerOnSubscribe",
    value: function triggerOnSubscribe() {
      this.initialTriggerOnSubscribe || (L.makeStoreTriggerOnSubscribe(this.store), this.initialTriggerOnSubscribe = !0);
    }
  }, {
    key: "getStore",
    value: function getStore() {
      return this.store;
    }
  }, {
    key: "getHMSActions",
    value: function getHMSActions() {
      return this.actions;
    }
  }, {
    key: "getActions",
    value: function getActions() {
      return this.actions;
    }
  }, {
    key: "getNotifications",
    value: function getNotifications() {
      return {
        onNotification: this.notifications.onNotification
      };
    }
  }], [{
    key: "createNewHMSStore",
    value: function createNewHMSStore(e, t) {
      var i = (0, _vanilla.default)(function () {
          return t();
        }),
        o = i.setState;
      i.setState = function (a) {
        var d = typeof a == "function" ? (0, _immer.default)(a) : a;
        o(d);
      };
      var r = i.getState;
      i.getState = function (a) {
        return a ? a(r()) : r();
      }, L.compareWithShallowCheckInSubscribe(i);
      var n = L.setUpDevtools(i, e);
      return J(O({}, i), {
        namedSetState: n
      });
    }
  }, {
    key: "makeStoreTriggerOnSubscribe",
    value: function makeStoreTriggerOnSubscribe(e) {
      var t = e.subscribe;
      e.subscribe = function (i, o, r) {
        return i(e.getState(o), void 0), t(i, o, r);
      };
    }
  }, {
    key: "compareWithShallowCheckInSubscribe",
    value: function compareWithShallowCheckInSubscribe(e) {
      var t = e.subscribe;
      e.subscribe = function (i, o, r) {
        return o || (o = function o(n) {
          return n;
        }), r = r || _shallow.default, t(i, o, r);
      };
    }
  }, {
    key: "setUpDevtools",
    value: function setUpDevtools(e, t) {
      var i;
      try {
        i = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
      } catch (n) {}
      if (!i) return function (n) {
        e.setState(n);
      };
      var o = i.connect(L.devtoolsOptions(t));
      o.prefix = t ? "".concat(t, " > ") : "";
      var r = e.setState;
      return e.setState = function (n) {
        r(n), o.send("".concat(o.prefix, "setState"), e.getState());
      }, o.subscribe(L.devtoolsSubscribe(o, e, r)), o.send("setUpStore", e.getState()), function (n, a) {
        r(n);
        var d = a || "".concat(o.prefix, "action");
        o.send(d, e.getState());
      };
    }
  }, {
    key: "devtoolsOptions",
    value: function devtoolsOptions(e) {
      return {
        name: e,
        actionsBlacklist: ["audioLevel", "playlistProgress", "connectionQuality"]
      };
    }
  }, {
    key: "devtoolsSubscribe",
    value: function devtoolsSubscribe(e, t, i) {
      return function (o) {
        var r, n, a, d;
        if (o.type === "DISPATCH" && o.state) ["JUMP_TO_ACTION", "JUMP_TO_STATE"].includes(o.payload.type) ? i(JSON.parse(o.state)) : t.setState(JSON.parse(o.state));else if (o.type === "DISPATCH" && ((r = o.payload) == null ? void 0 : r.type) === "COMMIT") e.init(t.getState());else if (o.type === "DISPATCH" && ((n = o.payload) == null ? void 0 : n.type) === "IMPORT_STATE") {
          var P = (a = o.payload.nextLiftedState) == null ? void 0 : a.actionsById;
          (((d = o.payload.nextLiftedState) == null ? void 0 : d.computedStates) || []).forEach(function (_ref2, g) {
            var F = _ref2.state;
            var j = P[g] || "".concat(e.prefix, "setState");
            g === 0 ? e.init(F) : (i(F), e.send(j, t.getState()));
          });
        }
      };
    }
  }]);
  return L;
}();
exports.HMSReactiveStore = L;
},{"immer":"mkVv","zustand/shallow":"J5wV","zustand/vanilla":"UWKb","@100mslive/hms-video":"ZYu2","eventemitter2":"x3aR","reselect":"K9HF"}],"HlZQ":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var define;
/*!
 * jQuery JavaScript Library v3.6.4
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-03-08T15:28Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.10
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2023-02-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
	// Make sure the the `:has()` argument is parsed unforgivingly.
	// We include `*` in the test to detect buggy implementations that are
	// _selectively_ forgiving (specifically when the list includes at least
	// one valid selector).
	// Note that we treat complete lack of support for `:has()` as if it were
	// spec-compliant support, which is fine because use of `:has()` in such
	// environments will fail in the qSA path and fall back to jQuery traversal
	// anyway.
	support.cssHas = assert( function() {
		try {
			document.querySelector( ":has(*,:jqfake)" );
			return false;
		} catch ( e ) {
			return true;
		}
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	if ( !support.cssHas ) {

		// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Our regular `try-catch` mechanism fails to detect natively-unsupported
		// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
		// in browsers that parse the `:has()` argument as a forgiving selector list.
		// https://drafts.csswg.org/selectors/#relational now requires the argument
		// to be parsed unforgivingly, but browsers have not yet fully adjusted.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {

			// Support: IE <9 only
			// IE doesn't have `contains` on `document` so we need to check for
			// `documentElement` presence.
			// We need to fall back to `a` when `documentElement` is missing
			// as `ownerDocument` of elements within `<template/>` may have
			// a null one - a default behavior of all modern browsers.
			var adown = a.nodeType === 9 && a.documentElement || a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );

var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{"process":"g5IB"}],"LDbG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CameraCaptureCallBack = CameraCaptureCallBack;
exports.CaptureUserPhoto = CaptureUserPhoto;
exports.DisableActivities = DisableActivities;
exports.Events = Events;
exports.GoInFullscreen = GoInFullscreen;
exports.IsFullScreenCurrently = IsFullScreenCurrently;
exports.NotificationCall = NotificationCall;
exports.PushTracking = PushTracking;
exports.ScreenSharedType = ScreenSharedType;
exports.ToastMessage = ToastMessage;
exports.dataURItoBlob = dataURItoBlob;
var _jquery = _interopRequireDefault(require("../node_modules/jquery"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var START_TEST = 'START_TEST';
function Events() {
  var openvideo = document.getElementById("openvideo");
  var openchat = document.getElementById("openchat");
  var closechat = document.getElementById("closechat");
  var closevideo = document.getElementById("closevideo");
  function fn_openvideo() {
    document.getElementById("video").classList.add("show");
  }
  function fn_closevideo() {
    document.getElementById("video").classList.remove("show");
  }
  function fn_openchat() {
    document.getElementById("chat").classList.add("show");
    (0, _jquery.default)(".msg-badge").html("");
  }
  function fn_closechat() {
    document.getElementById("chat").classList.remove("show");
  }
  openvideo.onclick = fn_openvideo;
  openchat.onclick = fn_openchat;
  closechat.onclick = fn_closechat;
  closevideo.onclick = fn_closevideo;
}
var canDisplayAlert = false;
function PushTracking(activityId) {
  var questionNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
} //$.ajax({
//	url: '/Tracker/ReportActions',
//	type: 'POST',
//	cache: false,
//	async: true,
//	data: { ActivityType: activityId, Details: questionNo },
//	success: function (response) {
//		if (GlobalObj.IsProctorLive) {
//			//UserAlertTrigger();	
//			//GlobalObj.ActivityCallBack();
//		}
//	},
//	error: function () {
//	},
//});
///* Get into full screen */
function GoInFullscreen(element) {
  if (element.requestFullscreen) element.requestFullscreen();else if (element.oneRequestFullscreen) element.oneRequestFullscreen();else if (element.twoRequestFullscreen) element.twoRequestFullscreen();else if (element.mozRequestFullScreen) element.mozRequestFullScreen();else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen();else if (element.msRequestFullscreen) element.msRequestFullscreen();
}

///* Is currently in full screen or not */
function IsFullScreenCurrently(_document) {
  var full_screen_element = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;

  // If no element is in full-screen
  if (full_screen_element === null) return false;else return true;
}
function NotificationCall(hmsNotifications, HMSNotificationTypes, CallBack) {
  var DisplayAlert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  canDisplayAlert = DisplayAlert;
  var unsubscribe = hmsNotifications.onNotification(function (notification) {
    // you can use the following to show appropriate toast notifications for eg.

    switch (notification.type) {
      case 'DEVICE_CHANGE_UPDATE':
        CallBack(notification);
        break;
      case HMSNotificationTypes.PEER_LIST:
        ToastMessage("".concat(notification.data, " are the peers in the room")); // received right after join
        break;
      case HMSNotificationTypes.PEER_JOINED:
        ToastMessage("".concat(notification.data.name, " joined"));
        break;
      case HMSNotificationTypes.PEER_LEFT:
        ToastMessage("".concat(notification.data.name, " left"));
        break;
      case HMSNotificationTypes.NEW_MESSAGE:
        ToastMessage("".concat(notification.data.message, " received from ").concat(notification.data.senderName));
        break;
      case HMSNotificationTypes.ERROR:
        GetErrorMessageByCode(notification.data);
        break;
      case HMSNotificationTypes.RECONNECTING:
        ToastMessage('[Reconnecting]', notification.data);
        break;
      case HMSNotificationTypes.RECONNECTED:
        ToastMessage('[Reconnected]');
        break;
      case HMSNotificationTypes.NAME_UPDATED:
      case HMSNotificationTypes.ROLE_UPDATED:
        ToastMessage("peer updated(".concat(notification.type, "), new peer="), notification.data);
        break;
      case HMSNotificationTypes.METADATA_UPDATED:
        CallBack(notification);
        break;
      case HMSNotificationTypes.TRACK_DEGRADED:
        ToastMessage("track - ".concat(notification.data, " degraded due to poor network"));
        break;
      case HMSNotificationTypes.TRACK_RESTORED:
        ToastMessage("track - ".concat(notification.data, " recovered"));
        break;
      case HMSNotificationTypes.ROOM_ENDED:
        ToastMessage("room ended, reason - ".concat(notification.data.reason));
        break;
      case HMSNotificationTypes.REMOVED_FROM_ROOM:
        ToastMessage("removed from room, reason - ".concat(notification.data.reason));
        break;
      case HMSNotificationTypes.DEVICE_CHANGE_UPDATE:
        ToastMessage("device changed - ".concat(notification.data));
        break;
      case HMSNotificationTypes.TRACK_ADDED:
        ToastMessage("Track added - ".concat(notification.data));
        CallBack(notification);
        break;
      case HMSNotificationTypes.TRACK_REMOVED:
        ToastMessage("Track removed - ".concat(notification.data));
        CallBack(notification);
        break;
      case HMSNotificationTypes.TRACK_MUTED:
        ToastMessage("Track removed - ".concat(notification.data));
        CallBack(notification);
        break;
      default:
        break;
    }
  });
}
function ScreenSharedType(_x, _x2) {
  return _ScreenSharedType.apply(this, arguments);
}
function _ScreenSharedType() {
  _ScreenSharedType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, prefix) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = data.displaySurface;
          _context.next = _context.t0 === "monitor" ? 3 : _context.t0 === "entire" ? 3 : _context.t0 === "window" ? 5 : _context.t0 === "appl" ? 5 : _context.t0 === "browser" ? 7 : _context.t0 === "tab" ? 7 : 9;
          break;
        case 3:
          PushTracking(prefix + 1);
          return _context.abrupt("break", 9);
        case 5:
          PushTracking(prefix + 2);
          return _context.abrupt("break", 9);
        case 7:
          PushTracking(prefix + 3);
          return _context.abrupt("break", 9);
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _ScreenSharedType.apply(this, arguments);
}
function GetErrorMessageByCode(data) {
  switch (data.code) {
    case 1000:
      ToastMessage('Cause: Failed to connect to Websocket - Happens due to network issues or firewall blocking Websocket connections \n Take Action: Mention user to check their network connection and firewall/anti-virus/VPN or try again after some time.', true);
      break;
    case 1003:
      ToastMessage('Cause: Websocket disconnected - Happens due to network issues \n Take Action: Mention user to check their network connection or try again after some time.', true);
      break;
    case 2002:
      ToastMessage('Cause: Invalid Endpoint URL \n Take Action: Check the endpoint provided while calling�join�on�HMSSDK.', true);
      break;
    case 2003:
      ToastMessage('Cause: Endpoint is not reachable \n Take Action: Mention user to check their network connection or try again after some time.', true);
      break;
    case 2004:
      ToastMessage('Cause: Token is not in proper JWT format \n Take Action: The token passed while calling�join�is not in correct format. Retry getting a new token.', true);
      break;
    case 3000:
      ToastMessage('Cause: Overconstrained error \n Take Action: No Action needed from end user, we will be internally retrying.', true);
      break;
    case 3001:
      ToastMessage('Cause: User denied permission to access capture device at browser level \n Take Action: Ask user to check permission granted to audio/video capture devices in browser(in address bar).', true);
      break;
    case 3002:
      ToastMessage('Cause: Capture Device is not Available \n Take Action: Ask user to check if the audio/video capture device is connected or not.', true);
      break;
    case 3003:
      ToastMessage('Cause: Capture device is in use by some other application \n Take Action: Show notification to user mentioning that the capturing device is used by some other application currently.', true);
      break;
    case 3004:
      ToastMessage('Cause: Lost access to capture device midway \n Take Action: Suggest the user to check connection to their hardware device and try reconnecting.', true);
      break;
    case 3005:
      ToastMessage('Cause: There is no media to return. Please select either video or audio or both. \n Take Action: There is no media to return. Please select either video or audio or both.', true);
      break;
    case 3008:
      ToastMessage('Cause: Browser has throw an autoplay exception \n Take Action: Show notification to user mentioning that the browser blocked autoplay', true);
      break;
    case 3009:
      ToastMessage('Cause: Device unable to satisfy requested media constraints \n Take Action: Reduce media constraints for the role in dashboard or upgrade device hardware.', true);
      break;
    case 3010:
      ToastMessage('Cause: No audio detected from track, indicates problem with device hardware \n Take Action: Notify user to try using a headphone for microphone.', true);
      break;
    case 3011:
      ToastMessage('Cause: System denied permission to access capture device \n Take Action: Ask user to check permission granted to audio/video/screen capture devices in system settings.', true);
      break;
    case 3012:
      ToastMessage('Cause: Current tab is not shared when forceCurrentTab was set to true for screenshare \n Take Action: -', true);
      break;
    case 3013:
      ToastMessage('Cause: An error occurred while playing audio of remote audio tracks \n Take Action: -', true);
      break;
    case 3014:
      ToastMessage('Cause: Selected audio/video device not detected on change \n Take Action: Ask user to check if the audio/video capture device is connected or not.', true);
      break;
    case 4001:
      ToastMessage('Cause: Failed to create offer \n Take Action: Ask the user to retry joining', true);
      break;
    case 4002:
      ToastMessage('Cause: Failed to create answer \n Take Action: Ask the user to retry joining', true);
      break;
    case 4003:
      ToastMessage('Cause: Failed to set offer \n Take Action: Ask the user to retry joining', true);
      break;
    case 4004:
      ToastMessage('Cause: Failed to set answer \n Take Action: Ask the user to retry joining', true);
      break;
    case 4005:
      ToastMessage('Cause: ICE Connection Failed due to network issue \n Take Action: Mention user to check their network connection or try again after some time.', true);
      break;
    case 4006:
      ToastMessage('Cause: ICE Connection Disconnected due to network issue \n Take Action: Mention user to check their network connection or try again after some time.', true);
      break;
    case 5001:
      ToastMessage('Cause: Trying to join a room which is already joined \n Take Action: Trying to join an already joined room.', true);
      break;
    case 5002:
      ToastMessage('Cause: Trying to join a room when preview is in progress \n Take Action: Call join action only when room state is "Preview" and not "Connecting".', true);
      break;
    case 6000:
      ToastMessage('Cause: Calling actions when not connected/joined to a room \n Take Action: Call the required action after joining a room.', true);
      break;
    case 6002:
      ToastMessage('Cause: WebRTC Error: Error while renegotiating \n Take Action: We can add check�error.message�for more info.', true);
      break;
    case 6003:
      ToastMessage('Cause: WebRTC engine is not ready yet \n Take Action: Wait for preview to complete before calling join.', true);
      break;
    case 6008:
      ToastMessage('Cause: Invalid arguments(peer ID, track ID, or others) passed to actions \n Take Action: Check if the corresponding arguments are valid by checking the store when calling the action', true);
      break;
    case 6009:
      ToastMessage('Cause: Trying to join a room when preview is in progress \n Take Action: Call join action only when room state is "Preview" and not "Connecting".', true);
      break;
    case 6010:
      ToastMessage('Cause: navigator.mediaDevices is undefined in insecure contexts served over HTTP protocol \n Take Action: Deploy the app in a secure context with HTTPS protocol.', true);
      break;
    case 6011:
      ToastMessage('Cause: RTCPeerConnection is undefined in browser \n Take Action: Switch/Upgrade browser to WebRTC compatible version/check for browser extension blocking WebRTC.', true);
      break;
    case 6012:
      ToastMessage('Cause: The application does not have access to localStorage \n Take Action: Try joining the link in a normal browser window if using in incognito mode causes this error. Alternatively, allowing cookies and localStorage via browser settings also works in incognito mode', true);
      break;
    case 7001:
      ToastMessage('Cause: Platform Not Supported \n Take Action: The platform is not supported for plugin', true);
      break;
    case 7002:
      ToastMessage('Cause: Plugin Init Failed \n Take Action: Plugin initialization has failed', true);
      break;
    case 7003:
      ToastMessage('Cause: Plugin Processing Failed \n Take Action: Plugin processing failed', true);
      break;
    case 7004:
      ToastMessage('Cause: Plugin Add Already Going on \n Take Action: Plugin add is already in progress', true);
      break;
    case 8001:
      ToastMessage('Cause: Playlist: Invalid action call \n Take Action: Check current playing entry, next entry, previous entry when calling seek/seekTo, playNext, playPrevious.', true);
      break;
    default:
      ToastMessage(data.message, true);
  }
}
function ToastMessage(msg) {
  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (canDisplayAlert || display) {
    // Get the snackbar DIV
    var x = document.getElementById("toastMessage");
    x.innerHTML = msg;
    // Add the "show" class to DIV
    x.className = "show";

    // After 3 seconds, remove the show class from DIV
    setTimeout(function () {
      x.className = x.className.replace("show", "");
      x.innerHTML = "";
    }, 3000);
  }
}
function dataURItoBlob(dataURI) {
  // convert base64/URLEncoded data component to raw binary data held in a string
  var byteString;
  if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);else byteString = unescape(dataURI.split(',')[1]);
  // separate out the mime component
  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
  // write the bytes of the string to a typed array
  var ia = new Uint8Array(byteString.length);
  for (var i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }
  return ia;
}
function CaptureUserPhoto(video, callBack) {
  try {
    if (video == "undefined") {
      PushTracking("514");
      //console.log("Due to no camera unable to capture photo");
      return;
    }
    //Extra start
    if (document.getElementById('canvas_photo') == null) {
      var c = document.createElement('canvas');
      c.setAttribute("id", "canvas_photo");
      c.style.display = "none";
      (document.body || document.documentElement).appendChild(c);
    }
    var canvas = document.getElementById('canvas_photo'); //document.getElementById('canvas');//

    canvas.setAttribute("width", "480"); //480
    canvas.setAttribute("height", "350"); //350
    var ctx = canvas.getContext("2d");
    ctx.drawImage(video, 0, 0, 480, 350);
    var image = canvas.toDataURL("image/png");
    var blob = dataURItoBlob(image);
    if (!EmptyStream(blob, "426")) {
      // we need to upload "File" --- not "Blob"
      var fileObject = new File([blob], "test.png", {
        type: 'image/png'
      });
      var formData = new FormData();

      // recorded data
      formData.append('File', fileObject);
      formData.append('RecorderType', "Photo");
      //// upload using jQuery
      UploadRecorder("425", formData, callBack);
    }
  } catch (e) {
    PushTracking("515");
    //console.log("Error in save capture : " + e);
  }
}

function CameraCaptureCallBack(response) {
  var msg = "";
  var type = "";
  if (response.ActivityTypeCode == 1) {
    msg = "User Face Not Deducted";
    type = "NoFaceDetection";
  } else if (response.ActivityTypeCode == 2) {
    msg = "Multipe Faces Detected";
    type = "MultiFaceDetection", "FaceDetectionError";
  } else if (response.ActivityTypeCode == 4) {
    msg = "Error Occured at Detecting Face";
    type = "FaceDetectionError";
  }
  if (msg != "" && type != "") {
    ToastMessage("".concat(type, " - ").concat(msg));
  }
}
function DisableActivities() {
  Disable_Keys();
  DisableMouseRightClick();
  DisableCutCopyPaste();
  ClearConsoleLogs();
}

//Keyboard Keys Disable 
function Disable_Keys() {
  document.addEventListener("keydown", function (event) {
    if (event.ctrlKey) {
      ToastMessage("Ctrl is disabled.", true);
      PushTracking(48);
      return false;
    }
    if (event.altKey) {
      ToastMessage("Alt is disabled.", true);
      PushTracking(47);
      return false;
    }
    if (event.keyCode === 44) {
      //PrintScreen
      ToastMessage("PrintScreen is disabled.", true);
      PushTracking(44);
      return false;
    }
    if (event.keyCode === 27 || event.keyCode === 122) {
      //F11
      ToastMessage("FullScreen always need to be enabled.", true);
      PushTracking(122);
      return false;
    }
    if (event.keyCode === 123) {
      //F12
      ToastMessage("Developer Tool is disabled.", true);
      PushTracking(123);
      return false;
    }
    if (event.keyCode === 116) {
      //f5
      ToastMessage("Refresh Page is disabled.", true);
      PushTracking(116);
      return false;
    }
  });
}
function DisableCutCopyPaste() {
  //Disable cut copy paste
  (0, _jquery.default)('body').bind('cut copy paste', function (e) {
    //ToastMessage("cut copy paste functionalities are disabled.");		
    PushTracking(49);
    ToastMessage("Cut copy paste functionalities are disabled.", true);
    //iscontext = false;
    e.preventDefault();
    return false;
  });
}
function DisableMouseRightClick() {
  document.oncontextmenu = null; // restrict the rightclick popup
  window.oncontextmenu = function () {
    //ToastMessage("right click is disabled for this page.");
    PushTracking(50);
    ToastMessage("Right click is disabled for this page.", true);
    //iscontext = false;
    return false;
  };
}
function ClearConsoleLogs() {
  var debuggerCheck = false;
  setInterval(function () {
    var startTime = performance.now(),
      check,
      diff;
    for (check = 0; check < 1000; check++) {
      //	console.log(check);
      console.clear();
    }
    diff = performance.now() - startTime;
    if (diff > 200 || debuggerCheck) {
      //DisplayAlert("debuggerCheck");
      debuggerCheck = true;
      PushTracking(120);
    }
  }, 500);
}
function EmptyStream(blob, Type) {
  var IsEmpty = blob == null || blob.size == 0;
  if (IsEmpty) {
    PushTracking(Type);
  }
  return IsEmpty;
}
function UploadRecorder(Type, FormData) {
  var callbackFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  _jquery.default.ajax({
    url: '/Tracker/UploadRecorder',
    type: 'POST',
    data: FormData,
    cache: false,
    async: true,
    contentType: false,
    processData: false,
    success: function success(response) {
      callbackFn && callbackFn(response);
      console.log("screen recording uploaded successfully");
    },
    error: function error() {
      PushTracking(Type);
      console.log("screen recording couldnt be uploaded");
    }
  });
}
},{"../node_modules/jquery":"HlZQ"}],"QEF8":[function(require,module,exports) {
var define;
"use strict";

var _hmsVideoStore = require("../node_modules/@100mslive/hms-video-store");
var _common = require("./common");
var _jquery = _interopRequireDefault(require("../node_modules/jquery"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Initialize HMS Store
var hmsManager = new _hmsVideoStore.HMSReactiveStore();
hmsManager.triggerOnSubscribe();
var hmsStore = hmsManager.getStore();
var hmsActions = hmsManager.getActions();
var hmsNotifications = hmsManager.getNotifications();
var scopeData;
var ProofAdminPeerId = "";
var docElement = document.documentElement;
function NotificationCallBack(Notify) {
  var dataProp = Notify != null && Notify.data;
  switch (Notify.type) {
    case _hmsVideoStore.HMSNotificationTypes.TRACK_ADDED:
      if (dataProp.displayEnabled && dataProp.source == "screen" && dataProp.type == "video") {
        if (dataProp.displaySurface) {
          (0, _common.ScreenSharedType)(dataProp, "60");
        }
      }
      break;
    case _hmsVideoStore.HMSNotificationTypes.TRACK_REMOVED:
      if (dataProp.displayEnabled && dataProp.source == "screen" && dataProp.type == "video") {
        if (dataProp.displaySurface) {
          (0, _common.ScreenSharedType)(dataProp, "61");
        }
      }
      break;
    case _hmsVideoStore.HMSNotificationTypes.METADATA_UPDATED:
      var peer = dataProp;
      var PeerMetdataData = hmsStore.getState((0, _hmsVideoStore.selectPeerMetadata)(peer.id));
      var localPeerId = hmsStore.getState(_hmsVideoStore.selectLocalPeerID);
      var localLatestMetadata = PeerMetdataData[localPeerId];
      if (localLatestMetadata) {
        if (localLatestMetadata["CandidateSkipProof"]) {
          (0, _jquery.default)('#proof-test').hide();
          (0, _jquery.default)('#admin-wait').addClass('hide');
          (0, _jquery.default)('.step-next-3').removeClass('hide');
          (0, _jquery.default)('.btn-Approve').addClass('hide');
          localLatestMetadata["CandidateSkipProof"] = false;
        }
        if (localLatestMetadata["StartQuiz"]) {
          show(startTestButton);
          localLatestMetadata["StartQuiz"] = false;
        }
        if (localLatestMetadata["NewProof"]) {
          (0, _jquery.default)('#proof-test').removeClass('hide');
          (0, _jquery.default)('#admin-wait').addClass('hide');
          ProofAdminPeerId = peer.id;
          localLatestMetadata["NewProof"] = false;
        }
        if (localLatestMetadata["NewProofStatus"] == true) {
          (0, _jquery.default)('.step-next-3').removeClass('hide');
          (0, _jquery.default)('.btn-Approve').addClass('hide');
          localLatestMetadata["NewProofStatus"] = false;
          var proofmsg = localLatestMetadata["NewProofStatusMessage"];
          if (proofmsg != "" && proofmsg != null) {
            (0, _common.ToastMessage)(proofmsg, true);
            localLatestMetadata["NewProofStatusMessage"] = "";
          }
        } else if (localLatestMetadata["NewProofStatus"] == false) {
          var proofmsg = localLatestMetadata["NewProofStatusMessage"];
          if (proofmsg != "" && proofmsg != null) {
            (0, _common.ToastMessage)(proofmsg, true);
            localLatestMetadata["NewProofStatusMessage"] = "";
          }
        }
        if (localLatestMetadata["CandidatePauseTest"] == true || localLatestMetadata["CandidateResumeTest"] == false) {
          localLatestMetadata["CandidatePauseTest"] = true;
          localLatestMetadata["CandidateResumeTest"] = false;
          pauseTest();
          (0, _common.ToastMessage)("Paused the test by Admin", true);
        } else if (localLatestMetadata["CandidateResumeTest"] == true || localLatestMetadata["CandidatePauseTest"] == false) {
          localLatestMetadata["CandidatePauseTest"] = false;
          localLatestMetadata["CandidateResumeTest"] = true;
          resumeTest();
        }
        if (localLatestMetadata["CandidateEndTest"] == true) {
          TestSubmitAutomatically();
        }
        if (localLatestMetadata["AdminLeaveRoom"] == true) {
          pauseTest();
          (0, _common.ToastMessage)("Admin Leaved the Room!! Please wait for admin to rejoin and enable the test", true);
        } else if (localLatestMetadata["AdminLeaveRoom"] == false) {
          resumeTest("Admin Re-Joined the Room");
        }
        hmsActions.changeMetadata(localLatestMetadata);
      }
      break;
    case 'DEVICE_CHANGE_UPDATE':
      if (!dataProp.devices.videoInput.length) {
        (0, _common.ToastMessage)("camera not detected/removed from the candidate system", true);
        leaveBtn.onclick();
      }
      break;
  }
}
;
//Notification Element
(0, _common.NotificationCall)(hmsNotifications, _hmsVideoStore.HMSNotificationTypes, NotificationCallBack, false);

// HTML elements
var conference = document.querySelector(".new-conference");
var peersContainer = document.querySelector(".peers-container");
var leaveBtn = document.getElementById("leave-btn");
var screenShareVideo = document.querySelector(".screen-share-video");
var screenShareBtn = document.querySelector(".btn-share-screen");
var screenShareStatus = document.querySelector(".screen-share-status-text");
var presenterController = document.querySelector(".presenter-controller");
var startTestButton = document.getElementById("load-test");
var authenticateSubmit = document.getElementById("authenticateSubmit");
var loadSystemCheck = document.getElementById("load-system-check");
var refreshvideo = document.getElementById("refreshvideo");
var params = new Proxy(new URLSearchParams(window.location.search), {
  get: function get(searchParams, prop) {
    return searchParams.get(prop);
  }
});
var msgInputElement = document.getElementById("msgInput");
var msgsElement = document.getElementById("messages");
var newProofUpload = document.getElementById("proof-test");
var customView = document.querySelector(".custom-tab-view");
var joinRoom = document.getElementById("join-room");
var afterScreenShare = document.getElementById("screen-load-test");
// store peer IDs already rendered to avoid re-render on mute/unmute
var renderedPeerIDs = new Set();
//connection network
var connectionTooltip = {
  0: "Reconnecting",
  1: "Very Bad Connection",
  2: "Bad Connection",
  3: "Moderate Connection",
  4: "Good Connection",
  5: "Excellent Connection"
};
connectionTooltip[-1] = "Network Unknown";
var fullScreen = document.querySelector(".btn-full-screen");
var initialTimer = true;
var isProctorLive = true;
var isProctor = true;
window.pauseAll = false;
var SendButtonClick = null;
window.stopRecordingForce = {
  camera: false,
  screen: false,
  photo: false
};
window.CompletedRecording = isProctorLive == true || isProctor == true ? {
  camera: false,
  screen: false,
  photo: false
} : null;
var PhotoCaptureTimer = 5; //5 sec once
var IsSystemCheck = true;
//Functions -Start
function GetToolTipConnection(value) {
  return connectionTooltip[value];
}
function GetColor(position, connectionScore) {
  var defaultColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#FFFFFF';
  var shouldBeColored = position <= connectionScore;
  if (!shouldBeColored) {
    return defaultColor;
  }
  if (connectionScore >= 4) {
    return "#37F28D";
  } else if (connectionScore >= 3) {
    return "#FAC919";
  } else if (connectionScore >= 1) {
    return "#ED4C5A";
  }
  return defaultColor;
}
;
function ConnectivitySVG(quality) {
  if (quality == 0) {
    return '<span title="' + GetToolTipConnection(quality) + '"><svg class="connection-network" width="12" height="12" viewBox="2 0 20 20" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2;"><path d="M3.046 3.046a.75.75 0 0 0 0 1.06l16.847 16.848a.75.75 0 1 0 1.06-1.06L4.108 3.045a.75.75 0 0 0-1.06 0Zm.256 6.303a13.888 13.888 0 0 1 2.175-1.432l1.356 1.356c-.847.401-1.65.902-2.391 1.497a.91.91 0 0 1-1.14-1.42Zm2.066 3.625A9.79 9.79 0 0 1 8.57 11.01l1.451 1.451a7.969 7.969 0 0 0-3.42 1.854.91.91 0 1 1-1.233-1.34Zm7.503-2.543 2.563 2.563a7.968 7.968 0 0 1 1.927 1.297.91.91 0 1 0 1.227-1.346 9.79 9.79 0 0 0-5.717-2.514Zm2.391 7.271L12.05 14.49h-.057a5.698 5.698 0 0 0-1.752.277c-.852.276-1.63.75-2.267 1.386a.91.91 0 1 0 1.286 1.29 3.878 3.878 0 0 1 3.66-1.019c.683.17 1.308.521 1.807 1.019.15.15.34.236.535.259ZM9.048 6.608l1.582 1.583a12.07 12.07 0 0 1 8.928 2.584.91.91 0 0 0 1.14-1.42 13.89 13.89 0 0 0-11.65-2.747Z" fill="#FFFFFF61" transform="translate(-.333)"></path></svg></span>';
  }
  return '<span title="' + GetToolTipConnection(quality) + '"><svg class="connection-network" width="12" height="12" viewBox="0 0 14 12" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2;"><path d="M6.875 0c2.549.035 4.679.902 6.445 2.648.366.362.45.796.216 1.096-.239.306-.714.34-1.142.072a2.28 2.28 0 0 1-.341-.271C9.24.862 4.924.775 1.992 3.346c-.284.249-.594.419-.983.393-.272-.019-.49-.135-.613-.388-.125-.261-.05-.498.114-.713.073-.092.156-.177.245-.254C2.516.804 4.591.039 6.875 0Z" fill="' + GetColor(4, quality) + '" transform="translate(-.333)"></path><path d="M7.056 2.964c1.756.035 3.208.7 4.499 1.763.162.134.277.315.354.512.098.251.114.503-.075.72-.193.222-.452.259-.725.198-.293-.066-.518-.247-.738-.443a4.859 4.859 0 0 0-6.198-.26c-.166.127-.318.271-.475.409-.242.211-.513.343-.843.317-.43-.034-.679-.397-.561-.81.062-.211.181-.4.345-.546 1.265-1.162 2.733-1.836 4.417-1.86Z" fill="' + GetColor(3, quality) + '" transform="translate(-.333)"></path><path d="M7.384,6.052C8.293,6.068 9.157,6.449 9.783,7.108C10.005,7.339 10.157,7.6 10.07,7.942C9.959,8.377 9.435,8.581 9.071,8.243C7.935,7.191 6.356,7.183 5.152,8.183C4.816,8.462 4.6,8.485 4.332,8.27C4.063,8.055 3.998,7.691 4.177,7.358C4.273,7.179 4.414,7.038 4.57,6.911C5.26,6.349 6.149,6.05 7.384,6.052L7.384,6.052Z" fill="' + GetColor(2, quality) + '"></path><path d="M8.214,9.941C8.214,10.234 8.097,10.515 7.888,10.721C7.68,10.928 7.398,11.042 7.104,11.039C6.471,11.036 5.982,10.541 5.993,9.912C6.004,9.259 6.499,8.766 7.133,8.779C7.744,8.791 8.22,9.301 8.214,9.941Z" fill="' + GetColor(1, quality) + '"></path></svg></span>';
}
function getBaseUrl() {
  return "/Test";
}
function SystemCheck() {
  if (!(0, _jquery.default)("div#video").hasClass("visible")) {
    (0, _jquery.default)("div#video").addClass("visible");
  }
}
function LoadQuestion() {
  var isExists = document.getElementById('InjectTest');
  var testingId = GlobalObj.OfferingId;
  if (isExists != null) {
    var url = getBaseUrl() + "/NewLoadTest?Id=" + (testingId !== null && testingId !== void 0 ? testingId : params.OfferingId);
    //console.log(url);
    _jquery.default.ajax({
      url: url,
      type: 'GET',
      dataType: 'html',
      data: {},
      crossDomain: true,
      cache: false,
      async: true,
      beforeSend: function beforeSend() {
        (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
      },
      success: function success(response) {
        var callBack = function callBack() {
          var result = response;
          (0, _common.PushTracking)(70);
          (0, _jquery.default)('#InjectTest').replaceWith(result);
          (0, _jquery.default)("#new-inject-test").removeClass("hide");
          (0, _jquery.default)(".custom-step-8").addClass("hide");
          InitiatingTimer();
          hide(presenterController);
          hide(startTestButton);
        };
        //HeaderText(callBack);
        callBack();
      },
      complete: function complete() {
        (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
      },
      error: function error(response) {
        (0, _common.ToastMessage)(response.responseText, false);
      }
    });
    if (typeof syncChatMessage != 'undefined') {
      syncChatMessage();
    }
  }
}
function GetRoomCode(_x) {
  return _GetRoomCode.apply(this, arguments);
}
function _GetRoomCode() {
  _GetRoomCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_redemptionId) {
    var fullName,
      url,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          fullName = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
          url = getBaseUrl() + "/GetRoomCodeByRedemptionId"; // fullScreenEnable();
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            data: {
              redemptionId: _redemptionId,
              role: "candidate"
            },
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              JoinRoom(fullName !== null && fullName !== void 0 ? fullName : params.Name, result);
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error() {
              (0, _common.ToastMessage)("UnAuthorized Access to Joining the Room", true);
            }
          });
        case 3:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _GetRoomCode.apply(this, arguments);
}
function UpdateSlots() {
  return _UpdateSlots.apply(this, arguments);
}
function _UpdateSlots() {
  _UpdateSlots = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var url;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          url = getBaseUrl() + "/UpdateSlots";
          _jquery.default.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            data: {},
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {},
            success: function success(response) {
              (0, _common.ToastMessage)("Room Joined Successfully", false);
            },
            complete: function complete() {},
            error: function error(e) {
              (0, _common.ToastMessage)("Room Joining Failed", true);
            }
          });
        case 2:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _UpdateSlots.apply(this, arguments);
}
function InitialLoad() {
  return _InitialLoad.apply(this, arguments);
}
function _InitialLoad() {
  _InitialLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var url;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          url = getBaseUrl() + "/InitialLoad";
          (0, _jquery.default)('#proof-check').text((0, _jquery.default)('#proof-check').data("loading-text"));
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              UpdateGlobalVariable(result); // updating the Global Variable
              GlobalObj.ActivityCallBack = UserAlertTrigger;
              scopeData = GlobalObj; //assigning the global variable in NodeScope
              PhotoCaptureTimer = parseInt(GlobalObj.FaceDetectionInterval);
              GetRoomCode(GlobalObj.RedemptionId, GlobalObj.FullName);
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error(response) {
              (0, _common.ToastMessage)(response.responseText, false);
            }
          });
        case 3:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _InitialLoad.apply(this, arguments);
}
function NextScreenShare() {
  change_tab('load-test');
  (0, _jquery.default)(".custom-step-8").attr("class", "step8 custom-step-8"); //clear classes
  (0, _jquery.default)("#new-inject-test").attr("class", "new-conference conference candidate-conference hide"); //clear classes
  show(conference);
  show(screenShareStatus);
  (0, _jquery.default)("#start-test").click();
}
function GetSecurityQuestion() {
  return _GetSecurityQuestion.apply(this, arguments);
}
function _GetSecurityQuestion() {
  _GetSecurityQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var url;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          url = getBaseUrl() + "/NewSecurityQuestions";
          (0, _jquery.default)("#pills-security-questions").html();
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'html',
            data: {
              "_TestType": GlobalObj.TestType
            },
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              window.ToastMessage = _common.ToastMessage;
              window.SecQnsCallBack = function (resultResponse) {
                if (resultResponse && resultResponse.Status == 200) {
                  (0, _jquery.default)('#submit-sec-qns').val("Submit");
                  change_tab('screenshare');
                } else {
                  (0, _jquery.default)('#submit-sec-qns').val("Submit");
                  (0, _common.ToastMessage)(resultResponse.Message, true);
                }
              };
              if (result) {
                (0, _jquery.default)("#pills-security-questions").html(result);
                (0, _jquery.default)('#authenticateSubmit').val("Submit");
                change_tab('security-questions');
              }
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error(response) {
              (0, _common.ToastMessage)(response.responseText, false);
            }
          });
        case 3:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _GetSecurityQuestion.apply(this, arguments);
}
function SystemCheckAPI() {
  return _SystemCheckAPI.apply(this, arguments);
}
function _SystemCheckAPI() {
  _SystemCheckAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    var url;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          (0, _jquery.default)('#load-system-check').val((0, _jquery.default)('#load-system-check').data("loading-text"));
          url = getBaseUrl() + "/NewSystemCheck";
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'html',
            data: {},
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              if (result) {
                (0, _jquery.default)("#pills-system-check-item").html("");
                (0, _jquery.default)("#pills-system-check-item").html(result);
                (0, _jquery.default)('#load-system-check').val("Next");
                change_tab('system-check');
              }
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error(response) {
              (0, _common.ToastMessage)(response.responseText, false);
            }
          });
        case 3:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _SystemCheckAPI.apply(this, arguments);
}
function AuthenticationSubmit() {
  return _AuthenticationSubmit.apply(this, arguments);
}
function _AuthenticationSubmit() {
  _AuthenticationSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
    var url;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          url = getBaseUrl() + "/AuthenticateCandidate";
          (0, _jquery.default)('#authenticateSubmit').val((0, _jquery.default)('#authenticateSubmit').data("loading-text"));
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            data: {
              EmailAddress: (0, _jquery.default)("#txtEmail").val(),
              MobileNumber: (0, _jquery.default)("#txtMobile").val(),
              PinNumber: (0, _jquery.default)("#txtPin").val()
            },
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              if (result != null && result.Status) {
                GetSecurityQuestion();
              } else if (result != null && result.Message) {
                (0, _jquery.default)('#authenticateSubmit').val("Submit");
                (0, _common.ToastMessage)("Authentication Failed due to" + result.Message, true);
              } else {
                (0, _jquery.default)('#authenticateSubmit').val("Submit");
                (0, _common.ToastMessage)("Authentication Failed!!!", true);
              }
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error() {
              (0, _jquery.default)('#authenticateSubmit').val("Submit");
              (0, _common.ToastMessage)("Authentication Failed!!!", true);
            }
          });
        case 3:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _AuthenticationSubmit.apply(this, arguments);
}
function startRecording() {
  return _startRecording.apply(this, arguments);
}
function _startRecording() {
  _startRecording = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
    var url;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          url = getBaseUrl() + "/StartRecording";
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            data: {
              redemptionId: scopeData.RedemptionId
            },
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              (0, _jquery.default)(".recording-icon").removeClass("hide");
              RecordingIconDisplay(true);
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error() {
              (0, _common.ToastMessage)("Screen Recorder failed to Initiate", false);
            }
          });
        case 2:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _startRecording.apply(this, arguments);
}
function stopRecording() {
  return _stopRecording.apply(this, arguments);
} // Joining the room
function _stopRecording() {
  _stopRecording = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
    var url;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          url = getBaseUrl() + "/StopRecording";
          _jquery.default.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            data: {
              redemptionId: scopeData.RedemptionId
            },
            crossDomain: true,
            cache: false,
            async: true,
            beforeSend: function beforeSend() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "visible");
            },
            success: function success(response) {
              var result = response;
              (0, _jquery.default)(".recording-icon").removeClass("hide").addClass("hide");
              RecordingIconDisplay(false);
            },
            complete: function complete() {
              (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
            },
            error: function error() {
              (0, _common.ToastMessage)("Screen Recorder failed to Stop", false);
            }
          });
        case 2:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _stopRecording.apply(this, arguments);
}
function JoinRoom(_x2, _x3) {
  return _JoinRoom.apply(this, arguments);
}
function _JoinRoom() {
  _JoinRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(userName, roomCode) {
    var authTokenAPI;
    return _regeneratorRuntime().wrap(function _callee12$(_context12) {
      while (1) switch (_context12.prev = _context12.next) {
        case 0:
          // use room code to fetch auth token
          authTokenAPI = hmsActions.getAuthTokenByRoomCode({
            roomCode: roomCode
          }).then( /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(authToken) {
              var joining;
              return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                while (1) switch (_context11.prev = _context11.next) {
                  case 0:
                    // join room using username and auth token
                    joining = hmsActions.join({
                      userName: userName,
                      authToken: authToken,
                      metaData: {
                        userType: "candidate"
                      },
                      settings: {
                        isAudioMuted: false,
                        isVideoMuted: false,
                        captureNetworkQualityInPreview: true
                      }
                    }).then( /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(values) {
                        var slots;
                        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                          while (1) switch (_context10.prev = _context10.next) {
                            case 0:
                              _context10.next = 2;
                              return UpdateSlots();
                            case 2:
                              slots = _context10.sent;
                              if (scopeData.IsProctorLive) {
                                change_tab('join-proof');
                              } else {
                                change_tab("authentication");
                              }
                              show(customView);
                            case 5:
                            case "end":
                              return _context10.stop();
                          }
                        }, _callee10);
                      }));
                      return function (_x5) {
                        return _ref3.apply(this, arguments);
                      };
                    }());
                    (0, _common.Events)();
                  case 2:
                  case "end":
                    return _context11.stop();
                }
              }, _callee11);
            }));
            return function (_x4) {
              return _ref2.apply(this, arguments);
            };
          }()).catch(function (error) {
            (0, _common.ToastMessage)("Failed to Join Room!!! Contact System Administrator", true);
          });
        case 1:
        case "end":
          return _context12.stop();
      }
    }, _callee12);
  }));
  return _JoinRoom.apply(this, arguments);
}
;

// Helper function to create html elements
function createElementWithClass(tag, className) {
  var newElement = document.createElement(tag);
  newElement.className = className;
  return newElement;
}
// Render a single peer
function renderPeer(peer) {
  var callback = null;
  var peerTileDiv = createElementWithClass("div", "peer-tile");
  var videoElement = createElementWithClass("video", "peer-video");
  var nonVideoElement = createElementWithClass("div", "peer-video-tile");
  var peerNetwork = createElementWithClass("div", "peer-network");
  var peerTileName = createElementWithClass("div", "peer-name");
  videoElement.autoplay = true;
  videoElement.muted = false;
  videoElement.controls = false;
  videoElement.playsinline = true;
  peerTileName.textContent = peer.name;
  hmsStore.subscribe(function (connectionQuality) {
    if (connectionQuality) {
      peerNetwork.innerHTML = ConnectivitySVG(connectionQuality.downlinkQuality);
      if (IsSystemCheck) {
        if (connectionQuality.downlinkQuality >= 3.0) {
          (0, _jquery.default)('#speed-error').addClass('d-none');
          (0, _jquery.default)('#speed-success').removeClass('d-none');
        } else {
          (0, _jquery.default)('#speed-error').removeClass('d-none');
          (0, _jquery.default)('#speed-success').addClass('d-none');
        }
      }
    }
  }, (0, _hmsVideoStore.selectConnectionQualityByPeerID)(peer.id));
  var profileIcon = '<div data-testid="preview_avatar_tile" class="tile-short shape-circle shape-color">' + peer.name.substr(0, 2).toUpperCase() + '</div>';
  nonVideoElement.innerHTML = profileIcon;
  //track the camera Screen
  hmsStore.subscribe(function (track) {
    if (!track) {
      return;
    }
    // console.log(track);
    (0, _common.PushTracking)(track.enabled ? 73 : 520); //Camera Enabled or not
    if (track.enabled) {
      hmsActions.attachVideo(track.id, videoElement);
      videoElement.style.display = "";
      nonVideoElement.style.display = "none";
      callback = function callback(def) {
        (0, _common.CaptureUserPhoto)(videoElement, def);
      };
    } else {
      hmsActions.detachVideo(track.id, videoElement);
      videoElement.style.display = "none";
      nonVideoElement.style.display = "";
      callback = function callback(def) {
        (0, _common.CaptureUserPhoto)("undefined", def);
      };
    }
  }, (0, _hmsVideoStore.selectVideoTrackByID)(peer.videoTrack));
  peerTileDiv.append(videoElement);
  peerTileDiv.append(nonVideoElement);
  peerTileDiv.append(peerTileName);
  peerTileDiv.append(peerNetwork);
  renderedPeerIDs.add(peer.id);
  return {
    "elem": peerTileDiv,
    "deferred": callback
  };
}

// display a tile for each peer in the peer list
function renderPeers() {
  return _renderPeers.apply(this, arguments);
}
function _renderPeers() {
  _renderPeers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
    var peers, vi;
    return _regeneratorRuntime().wrap(function _callee13$(_context13) {
      while (1) switch (_context13.prev = _context13.next) {
        case 0:
          peers = hmsStore.getState(_hmsVideoStore.selectPeers);
          _context13.next = 3;
          return hmsActions.setLocalVideoEnabled(true);
        case 3:
          vi = _context13.sent;
          peers.forEach(function (peer) {
            if (!renderedPeerIDs.has(peer.id) && peer !== null && peer !== void 0 && peer.videoTrack && peer !== null && peer !== void 0 && peer.isLocal) {
              var render = renderPeer(peer);
              (0, _jquery.default)(peersContainer).empty();
              peersContainer.append(render.elem);
              render.deferred && render.deferred(_common.CameraCaptureCallBack); //trigger callback

              var photoMilliSeconds = PhotoCaptureTimer * 1000;
              var triggerTimeOut = setInterval(function () {
                var stopRecordingForce = window.stopRecordingForce;
                if (stopRecordingForce != null && stopRecordingForce.photo == false) {
                  render.deferred && render.deferred();
                } else if (stopRecordingForce != null && stopRecordingForce.photo == true) {
                  clearInterval(triggerTimeOut);
                  var callBack = function callBack(response) {
                    var camVideo = document.getElementsByClassName("peer-video");
                    camVideo = camVideo.length > 0 ? camVideo[0] : camVideo;
                    camVideo.pause();
                    window.CompletedRecording.photo = true;
                  };
                  render.deferred && render.deferred(callBack);
                }
              }, photoMilliSeconds);
            }
          });
        case 5:
        case "end":
          return _context13.stop();
      }
    }, _callee13);
  }));
  return _renderPeers.apply(this, arguments);
}
function hide(el) {
  el.style.display = "none";
}
function show(el) {
  el.style.display = "";
}
function handleLeave() {
  var callBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  hmsActions.leave();
  hide(customView);
  change_tab('error-message');
  peersContainer.innerHTML = "";
  callBack && callBack();
  var url = '<br><a href="' + GlobalObj.PublicWebsite + '/User/Dashboard">Click Here for Dashboard</a>';
  (0, _jquery.default)(".error-message").html(url);
  (0, _jquery.default)('.proctor-loader').css("visibility", "hidden");
}
function handleEndRoom() {
  var callBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  stopRecording().then(function (values) {
    EndRoomClick("Test Room Ended Successfully by Candidate");
    (0, _common.ToastMessage)("Test Room Ended Successfully by Candidate", true);
    callBack && callBack();
  });
}
function EndRoomClick(msg) {
  try {
    var lock = true; // set to true to disallow rejoins
    var reason = msg;
    hmsActions.endRoom(lock, reason);
  } catch (error) {
    // Permission denied or not connected to room
    //console.error(error);
    (0, _common.ToastMessage)(error, false);
  }
}
function fullScreenEnable() {
  if (!(0, _common.IsFullScreenCurrently)(docElement)) (0, _common.GoInFullscreen)(docElement);
}
function isStreaming() {
  return params.Name == "candidate";
}
function exitHandler() {
  if (!docElement.webkitIsFullScreen && !docElement.mozFullScreen && !docElement.msFullscreenElement) {
    (0, _common.ToastMessage)("Cant able to Cancel the FullScreen", true);
    setTimeout(function () {
      fullScreen.onclick();
    }, 1000);
  }
}
function TriggerFSEvents() {
  if (document.addEventListener) {
    document.addEventListener('fullscreenchange', exitHandler, false);
    document.addEventListener('mozfullscreenchange', exitHandler, false);
    document.addEventListener('MSFullscreenChange', exitHandler, false);
    document.addEventListener('webkitfullscreenchange', exitHandler, false);
  }
}

// *************************
// Change screen based on connected to room or not
// *************************

// Showing the required elements on connection/disconnection
function onConnectionVideo(isConnected) {
  if (isConnected) {
    show(conference);
    show(leaveBtn);
    show(presenterController);
  } else {
    hide(conference);
    hide(leaveBtn);
    hide(presenterController);
  }
}

// *************************
// Share screen
// *************************
function handleScreenShare() {
  return _handleScreenShare.apply(this, arguments);
}
function _handleScreenShare() {
  _handleScreenShare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
    var screenShareOn;
    return _regeneratorRuntime().wrap(function _callee14$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          (0, _jquery.default)('#screen-share').val("SHARE YOUR SCREEN");
          screenShareOn = !hmsStore.getState(_hmsVideoStore.selectIsSomeoneScreenSharing);
          _context14.next = 4;
          return hmsActions.setScreenShareEnabled(screenShareOn);
        case 4:
          if (!scopeData.IsProctorLive) {
            startTestButton.style.display = screenShareOn ? "" : "none";
          }
          showScreenShareVideo();
          (0, _jquery.default)('#screen-share').hide();
          (0, _jquery.default)('.step-next-4').removeClass("hide");
        case 8:
        case "end":
          return _context14.stop();
      }
    }, _callee14);
  }));
  return _handleScreenShare.apply(this, arguments);
}
function showScreenShareVideo() {
  return _showScreenShareVideo.apply(this, arguments);
}
function _showScreenShareVideo() {
  _showScreenShareVideo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
    var screenShareOn, amIScreenSharing, presenter, screenShareVideoTrack;
    return _regeneratorRuntime().wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          screenShareOn = hmsStore.getState(_hmsVideoStore.selectIsSomeoneScreenSharing);
          if (!screenShareOn) {
            _context15.next = 16;
            break;
          }
          amIScreenSharing = hmsStore.getState(_hmsVideoStore.selectIsLocalScreenShared);
          presenter = hmsStore.getState(_hmsVideoStore.selectPeerScreenSharing);
          screenShareVideoTrack = hmsStore.getState((0, _hmsVideoStore.selectScreenShareByPeerID)(presenter === null || presenter === void 0 ? void 0 : presenter.id));
          if (!amIScreenSharing) {
            _context15.next = 11;
            break;
          }
          fullScreenEnable();
          screenShareStatus.textContent = "Preparing to start test!!!";
          (0, _common.PushTracking)(71); //start the sharing
          _context15.next = 14;
          break;
        case 11:
          hide(screenShareStatus);
          _context15.next = 14;
          return hmsActions.attachVideo(screenShareVideoTrack === null || screenShareVideoTrack === void 0 ? void 0 : screenShareVideoTrack.id, screenShareVideo);
        case 14:
          _context15.next = 18;
          break;
        case 16:
          (0, _common.PushTracking)(72); //stopped the sharing
          screenShareStatus.textContent = "Preparing to start test!!!";
        case 18:
        case "end":
          return _context15.stop();
      }
    }, _callee15);
  }));
  return _showScreenShareVideo.apply(this, arguments);
}
function renderMessageList(messages) {
  if (messages.length === 0) {
    return;
  }
  var text = "";
  messages.forEach(function (msg) {
    text += "\n".concat(msg.senderName, ": ").concat(msg.message);
  });
  var elem = msgsElement;
  if (elem) {
    elem.textContent = text;
  }
}
function UpdateUnreadMessageCount(messages) {
  (0, _jquery.default)(".msg-badge").html("");
  var ChatOpened = (0, _jquery.default)("#chat").hasClass("show");
  if (messages > 0 && !ChatOpened) {
    (0, _jquery.default)(".msg-badge").html(messages);
  }
}
function sendMessage() {
  if (!hmsStore.getState(_hmsVideoStore.selectIsConnectedToRoom)) {
    console.warn("can't send message when not conneted to room");
    return;
  }
  var msg = msgInputElement.value;
  if (msg && msg.trim() !== "") {
    hmsActions.sendBroadcastMessage(msg);
  } else {
    console.warn("Invalid message");
  }
}
function AfterSubmitTest(response) {
  var callBack = function callBack() {
    (0, _jquery.default)('.new-conference.candidate-conference').empty();
    (0, _jquery.default)('.new-conference.candidate-conference').html(response);
  };
  handleEndRoom(callBack);
}
function BeforeSubmitTest() {
  pauseTest();
  hide(customView);
  change_tab('error-message');
}
window.AfterSubmitTest = AfterSubmitTest;
window.BeforeSubmitTest = BeforeSubmitTest;
function InitiatingTimer() {
  //for timer
  var timer;
  var timerExamInterval;
  if (window.pauseAll) {
    window.pauseAll = false;
  }
  if (document.getElementById("exam-timer") != null) {
    var minutes, seconds;
    if (initialTimer && !window.pauseAll) {
      var duration = 60 * totalMcqTime;
      timer = duration, minutes, seconds;
      initialTimer = false;
    }
    timerExamInterval = setInterval(function () {
      countExamTimer();
      if (isNaN(timer)) {
        clearInterval(timerExamInterval);
      }
    }, 1000);
    function countExamTimer() {
      if (!window.pauseAll && !isNaN(timer)) {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);
        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        if (document.getElementById("exam-timer") != null) {
          document.getElementById("exam-timer").innerHTML = maxMcqTime + " / " + minutes + ":" + seconds;
        }
        if (--timer < 0) {
          timer = duration;
          TestSubmitAutomatically();
        }
      }
    }
  }
}
function TestSubmitAutomatically() {
  if (window.SubmitTestAutomatically != null) {
    window.SubmitTestAutomatically(AfterSubmitTest);
  } else {
    function callRedirect() {
      window.location.href = GlobalObj.PublicWebsite + "/User/Dashboard";
    }
    handleLeave();
    window.setTimeout(callRedirect, 3000);
  }
}
var RecordingIconDisplay = function RecordingIconDisplay(isRecording) {
  var localPeerId = hmsStore.getState(_hmsVideoStore.selectLocalPeerID); //candidate peer
  if (localPeerId) {
    var local_metadata = hmsStore.getState((0, _hmsVideoStore.selectPeerMetadata)(localPeerId));
    var newLocalMetadata = _objectSpread(_objectSpread({}, local_metadata), {}, {
      IsRecording: isRecording
    });
    var obj = {};
    obj[localPeerId] = newLocalMetadata;
    hmsActions.changeMetadata(obj);
    var oldLocalMetadata = _objectSpread({}, local_metadata);
    // update the old Metadata
    hmsActions.changeMetadata(oldLocalMetadata);
  }
};
var UserNewProofTrigger = function UserNewProofTrigger(proof, UrlId, ImageId, documentName, documentType) {
  var localPeerId = hmsStore.getState(_hmsVideoStore.selectLocalPeerID); //candidate peer
  if (localPeerId) {
    var admin_metadata = hmsStore.getState((0, _hmsVideoStore.selectPeerMetadata)(ProofAdminPeerId));
    var newAdminMetadata = _objectSpread(_objectSpread({}, admin_metadata), {}, {
      ViewNewProof: proof,
      UrlId: UrlId,
      ImageId: ImageId,
      DocumentName: documentName,
      DocumentType: documentType
    });
    var local_metadata = hmsStore.getState((0, _hmsVideoStore.selectPeerMetadata)(localPeerId));
    var obj = {};
    obj[ProofAdminPeerId] = newAdminMetadata;
    hmsActions.changeMetadata(obj);
    var newLocalMetadata = _objectSpread({}, local_metadata);
    // update the old Metadata
    hmsActions.changeMetadata(newLocalMetadata);
  }
};
function UploadProof() {
  var fileInput = (0, _jquery.default)("#newproof");
  var documentType = (0, _jquery.default)("#documentType").val();
  if (documentType == null || documentType == "" || documentType == "0") {
    (0, _common.ToastMessage)("Invalid Document Type Select", true);
    return;
  }
  var documentName = (0, _jquery.default)("#documentType option:selected")[0].text;
  if (fileInput == null || fileInput[0] == null || fileInput[0].files == null || fileInput[0].files.length == 0) {
    (0, _common.ToastMessage)("Files are not selected to upload!!!", true);
    return;
  }
  var fileData = new FormData();
  fileData.append("documentType", documentType);
  for (i = 0; i < fileInput[0].files.length; i++) {
    //Appending each file to FormData object
    fileData.append(fileInput[0].files[i].name, fileInput[0].files[i]);
  }
  _jquery.default.ajax({
    url: '/Proof/Upload',
    type: 'POST',
    data: fileData,
    cache: false,
    async: true,
    processData: false,
    contentType: false,
    success: function success(response) {
      if (response != null && response.Status == 200) {
        (0, _common.ToastMessage)("Proof Uploaded Successfully!!!", true);
        UserNewProofTrigger(true, response.imageUrl, response.imageId, documentName, documentType);
      } else if (response != null && response.Status != 200) {
        (0, _common.ToastMessage)(response.Message, true);
      } else {
        (0, _common.ToastMessage)("Error on the Proof Upload", true);
      }
    },
    error: function error(response) {
      (0, _jquery.default)("#Inject-UAA").html(response.responseText);
      UserNewProofTrigger(false, "", "", "");
    }
  });
}
function NewProofUpload() {
  (0, _jquery.default)('#proof-test').hide();
  (0, _jquery.default)("#Inject-UAA").html("");
  var options = "";
  GlobalObj.DocumentType.forEach(function (x) {
    options = options + "<option value='" + x.Value + "'>" + x.Text + "</option>";
  });
  var select = "<select id='documentType' class='documentTypeClass form-select fs-15p c-select'>" + options + "</select>";
  (0, _jquery.default)("#Inject-UAA").html(select + "<input type='file' id='newproof' /></img><a id='uploadnewproof' class='btn btn-primary fs-15p mt-4 wt-27 action-btn'>Submit</a>");
  (0, _jquery.default)("#newproof").change(function () {
    newproof(this);
  });
  (0, _jquery.default)("#uploadnewproof").click(UploadProof);
}
function newproof(input) {
  if (input.files && input.files[0]) {
    var reader3 = new FileReader();
    reader3.onload = function (e) {
      (0, _jquery.default)('#preview-newproof').attr('src', e.target.result);
      fullScreenEnable();
    };
    reader3.readAsDataURL(input.files[0]);
  }
}
function pauseTest() {
  window.pauseAll = true;
  if (!(0, _jquery.default)(".test-question-grid").hasClass("test-pause")) {
    (0, _jquery.default)(".test-question-grid").addClass("test-pause");
  }
  if (!(0, _jquery.default)(".test-question-container").hasClass("test-pause")) {
    (0, _jquery.default)(".test-question-container").addClass("test-pause");
  }
}
function resumeTest() {
  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Resume the test by Admin";
  (0, _common.ToastMessage)(message, true);
  window.pauseAll = false;
  var items = document.querySelectorAll(".test-pause");
  for (var i = 0; i < items.length; i++) {
    items[0].classList.remove("test-pause");
  }
  if ((0, _jquery.default)(".test-question-grid").hasClass("test-pause")) {
    (0, _jquery.default)(".test-question-grid").removeClass("test-pause");
  }
  if ((0, _jquery.default)(".test-question-container").hasClass("test-pause")) {
    (0, _jquery.default)(".test-question-container").removeClass("test-pause");
  }
}
function UserAlertTrigger() {
  var localPeerId = hmsStore.getState(_hmsVideoStore.selectLocalPeerID); //candidate peer
  if (localPeerId) {
    var local_metadata = hmsStore.getState((0, _hmsVideoStore.selectPeerMetadata)(localPeerId));
    var newLocalMetadata = _objectSpread({}, local_metadata);
    newLocalMetadata["UserAlertActivity"] = true;
    var obj = {};
    obj[localPeerId] = newLocalMetadata;
    hmsActions.changeMetadata(obj);
    var oldLocalMetadata = _objectSpread({}, local_metadata);
    oldLocalMetadata["UserAlertActivity"] = false;
    // update the old Metadata
    hmsActions.changeMetadata(oldLocalMetadata);
  }
}
//Functions - End

//Bind Events - Start
loadSystemCheck.onclick = SystemCheckAPI;
authenticateSubmit.onclick = AuthenticationSubmit;
screenShareBtn.onclick = handleScreenShare;
joinRoom.onclick = InitialLoad;
afterScreenShare.onclick = NextScreenShare;
refreshvideo.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        renderedPeerIDs = new Set();
        hmsStore.subscribe(renderPeers, _hmsVideoStore.selectPeers);
      case 2:
      case "end":
        return _context.stop();
    }
  }, _callee);
}));
hide(startTestButton);
leaveBtn.onclick = TestSubmitAutomatically;
startTestButton.onclick = function () {
  SystemCheck();
  (0, _jquery.default)('#load-test').val((0, _jquery.default)('#load-test').data("loading-text"));
  startRecording(); //trigger the recording
  LoadQuestion();
};
newProofUpload.onclick = NewProofUpload;
fullScreen.onclick = fullScreenEnable;

// Cleanup if user refreshes the tab or navigates away
window.onunload = window.onbeforeunload = TestSubmitAutomatically;
msgInputElement.onkeypress = function (e) {
  if (e.keyCode === 13) {
    sendMessage();
    msgInputElement.value = "";
  }
};

// Listen to the connection state
hmsStore.subscribe(onConnectionVideo, _hmsVideoStore.selectIsConnectedToRoom);

// subscribe to the peers, so showScreenShareVideo is called whenever there is a change like peer join and leave
hmsStore.subscribe(showScreenShareVideo, _hmsVideoStore.selectPeers);

// Reactive state - renderPeers is called whenever there is a change in the peer-list
hmsStore.subscribe(renderPeers, _hmsVideoStore.selectPeers);
hmsStore.subscribe(UpdateUnreadMessageCount, _hmsVideoStore.selectUnreadHMSMessagesCount); // unread message  count
hmsStore.subscribe(renderMessageList, _hmsVideoStore.selectHMSMessages);
hide(screenShareStatus);
//Bind Events - End
fullScreen.onclick();
(0, _common.DisableActivities)();
SystemCheckAPI();
},{"../node_modules/@100mslive/hms-video-store":"j5Na","./common":"LDbG","../node_modules/jquery":"HlZQ"}]},{},["QEF8"], null)
//# sourceMappingURL=/Newcandidate.b98c26f5.js.map